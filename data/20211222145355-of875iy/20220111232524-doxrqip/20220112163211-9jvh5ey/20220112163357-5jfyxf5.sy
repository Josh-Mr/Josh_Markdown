{
	"ID": "20220112163357-5jfyxf5",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20220112163357-5jfyxf5",
		"title": "【对象序列化过程】",
		"updated": "20220112163501"
	},
	"Children": [
		{
			"ID": "20220112163423-1kztplp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220112163423-1kztplp",
				"updated": "20220112163429"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一、什么是序列化和反序列化？Github："
				},
				{
					"Type": "NodeLink",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "https://github.com/Josh-Mr/Java_learing/tree/master/io/src/com/serializable"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://github.com/Josh-Mr/Java_learing/tree/master/io/src/com/serializable"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220112163423-j4belxz",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220112163423-j4belxz",
				"updated": "20220112163423"
			},
			"Children": [
				{
					"ID": "20220112163423-e7c489e",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220112163423-e7c489e"
					},
					"Children": [
						{
							"ID": "20220112163423-xqewk8o",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220112163423-xqewk8o"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "序列化：把对象转换为字节流保存起来，并在以后还原这个对象。叫序列化。"
								}
							]
						}
					]
				},
				{
					"ID": "20220112163423-x453acr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220112163423-x453acr"
					},
					"Children": [
						{
							"ID": "20220112163423-lkld6u2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220112163423-lkld6u2"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "反序列化：把保存的对象通过字节流转换为对象的过程。"
								}
							]
						}
					]
				},
				{
					"ID": "20220112163423-jj2bi1q",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220112163423-jj2bi1q"
					},
					"Children": [
						{
							"ID": "20220112163423-v8a5vac",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220112163423-v8a5vac"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ps：持久化：将一个对象保存到永久的存储设备上就持久化。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220112163423-shx8p2l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220112163423-shx8p2l",
				"updated": "20220112163423"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二、为什么要序列化？"
				}
			]
		},
		{
			"ID": "20220112163423-667k1ge",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220112163423-667k1ge",
				"updated": "20220112163423"
			},
			"Children": [
				{
					"ID": "20220112163423-6aqopjq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220112163423-6aqopjq"
					},
					"Children": [
						{
							"ID": "20220112163423-mbirzo8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220112163423-mbirzo8"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对象序列化可以实现分布式对象"
								}
							]
						}
					]
				},
				{
					"ID": "20220112163423-0iq52yp",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220112163423-0iq52yp"
					},
					"Children": [
						{
							"ID": "20220112163423-4z7xl7w",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220112163423-4z7xl7w"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "java对象序列化不仅保留一个对象的数据，而且递归保存对象引用的每个对象的数据（深复制）"
								}
							]
						}
					]
				},
				{
					"ID": "20220112163423-3978t8z",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220112163423-3978t8z"
					},
					"Children": [
						{
							"ID": "20220112163423-ehae978",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220112163423-ehae978"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "序列化可以将内存中的类写入文件或数据库中（持久化）"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220112163423-cjqko4u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220112163423-cjqko4u",
				"updated": "20220112163423"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二、序列化特点"
				}
			]
		},
		{
			"ID": "20220112163423-ap2t6ht",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220112163423-ap2t6ht",
				"updated": "20220112163423"
			},
			"Children": [
				{
					"ID": "20220112163423-5fodfpy",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220112163423-5fodfpy"
					},
					"Children": [
						{
							"ID": "20220112163423-60xwrzi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220112163423-60xwrzi"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对象被序列化，只能保存对象的非静态的成员变量， 不能保存任何的成员方法和静态的成员变量。"
								}
							]
						}
					]
				},
				{
					"ID": "20220112163423-qt6lu01",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220112163423-qt6lu01"
					},
					"Children": [
						{
							"ID": "20220112163423-sg73pmk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220112163423-sg73pmk"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一个对象的成员变量是对象，这个对象的数据也会被序列化。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220112163423-9f57j00",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220112163423-9f57j00",
				"updated": "20220112163423"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "三、序列化的使用"
				}
			]
		},
		{
			"ID": "20220112163423-9co0p25",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220112163423-9co0p25",
				"updated": "20220112163423"
			},
			"Children": [
				{
					"ID": "20220112163423-7k62wkr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220112163423-7k62wkr"
					},
					"Children": [
						{
							"ID": "20220112163423-j5syw99",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220112163423-j5syw99"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一个类想序列化，就要实现Serializable接口，标记着这个类可以被序列化。"
								}
							]
						}
					]
				},
				{
					"ID": "20220112163423-emtck9l",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220112163423-emtck9l"
					},
					"Children": [
						{
							"ID": "20220112163423-3td5bom",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220112163423-3td5bom"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "声明成transient的变量不被序列化，static变量也不被序列化。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220112163443-4vdb9h7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220112163443-4vdb9h7",
				"updated": "20220112163501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package com.serializable;\nimport java.io.*;\nimport java.util.ArrayList;\nimport java.util.Date;\n/**\n* @author Josh\n* @version 1.0.0\n* @ClassName SerializableTest.java\n* @Description TODO\n* @createTime 2021-03-12 00:35:00\n*/\npublic class SerializableTest {\n    public static void main(String[] args) throws IOException, ClassNotFoundException {\n        System.out.println(\"-----序列化过程-----\");\n        Person person1 = new Person(23,\"Josh关华钦\",new Date());\n        Person person2 = new Person(23,\"Josh关华钦\",new Date());\n        Person person3 = new Person(23,\"Josh关华钦\", new Date());\n        ArrayList\u003cPerson\u003e list = new ArrayList\u003c\u003e();\n        list.add(person1);\n        list.add(person2);\n        list.add(person3);\n        File file = new File(\"serializable.txt\");\n        FileOutputStream fileOutputStream = new FileOutputStream(file);\n        ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream);\n        objectOutputStream.writeObject(list);\n        objectOutputStream.close();\n        System.out.println(\"-----反序列化过程-----\");\n        ObjectInputStream objectInputStream = new ObjectInputStream(new FileInputStream(file));\n        ArrayList\u003cPerson\u003e unserialized = (ArrayList\u003cPerson\u003e)objectInputStream.readObject();\n        for (Person p : unserialized){\n            System.out.println(p.toString());\n        }\n        objectInputStream.close();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}