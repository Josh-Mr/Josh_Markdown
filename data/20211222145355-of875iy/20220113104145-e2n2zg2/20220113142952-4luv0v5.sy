{
	"ID": "20220113142952-4luv0v5",
	"Type": "NodeDocument",
	"Properties": {
		"icon": "1f4dd",
		"id": "20220113142952-4luv0v5",
		"title": "5、【LinkedArray （双向链表）实现栈（stack）和 队列 （queue）】",
		"updated": "20220113143005"
	},
	"Children": [
		{
			"ID": "20220113142952-w0mjbqr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220113142952-w0mjbqr",
				"updated": "20220113143005"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import java.util.LinkedList;\n/**\n * LinkedArray\n * 1、栈 （stack） : 后进先出 （LIFO）last in ， first out\n * 2、队列（queue）:先进先出（FIFO）first in ， first out\n *\n * @author JCS for 2018-12-05\n */\npublic class LinkedArrayForStackAndQueueTest {\n    public static void main(String[] args) {\n     \n         StackTest stackTest = new StackTest();\n         stackTest.push(\"guan\");\n         stackTest.push(\"hua\");\n         stackTest.push(\"qin\");\n         System.out.println(\"--stack----\");\n         System.out.println(stackTest.pop());\n         System.out.println(stackTest.pop());\n         System.out.println(stackTest.pop());\n         System.out.println(stackTest.isEmty());\n         System.out.println(stackTest.getSize());\n         QueueTest queueTest = new QueueTest();\n         queueTest.push(\"guan\");\n         queueTest.push(\"hua\");\n         queueTest.push(\"qin\");\n         System.out.println(\"--queue----\");\n         System.out.println(queueTest.pop());\n         System.out.println(queueTest.pop());\n         System.out.println(queueTest.pop());\n         System.out.println(queueTest.isEmpty());\n     \n    }\n}\n// 1、栈 （stack） : 后进先出 （LIFO）last in ， first out\nclass StackTest {\n    LinkedList\u003cObject\u003e linkedList = new LinkedList\u003c\u003e();\n    // 入栈\n    public void push(Object ojb) {\n         linkedList.addLast(ojb);\n    }\n    // 出栈，删除并返回删除的元素\n    public Object pop() {\n         return linkedList.removeLast();\n    }\n    // 获得顶栈的元素\n    public Object getpeek() {\n         return linkedList.getFirst();\n    }\n    // 是否为空栈\n    public boolean isEmty() {\n         return linkedList.isEmpty();\n    }\n    public int getSize() {\n         return linkedList.size();\n    }\n}\n// 2、队列 （queue）:先进先出（FIFO）first in ， first out\nclass QueueTest {\n    LinkedList\u003cObject\u003e linkedList = new LinkedList\u003c\u003e();\n    // 入队 — 添加都末尾\n    public void push(Object object) {\n         linkedList.addLast(object);\n    }\n    // 出队 -移除第一个并返回该元素\n    public Object pop() {\n         return linkedList.removeFirst();\n    }\n    // 队列大小\n    public boolean isEmpty() {\n         return linkedList.isEmpty();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}