{
	"ID": "20220113143056-s0nt9sv",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20220113143056-s0nt9sv",
		"title": "7、Java【Map详解】",
		"updated": "20220113143103"
	},
	"Children": [
		{
			"ID": "20220113143057-mr0zfwc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220113143057-mr0zfwc",
				"updated": "20220113143057"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Map的遍历："
				},
				{
					"Type": "NodeLink",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "https://bbs.huaweicloud.com/blogs/206679"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://bbs.huaweicloud.com/blogs/206679"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220113143057-zxjgc1c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220113143057-zxjgc1c",
				"updated": "20220113143057"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Map ："
				}
			]
		},
		{
			"ID": "20220113143057-by4vw1i",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220113143057-by4vw1i",
				"updated": "20220113143057"
			},
			"Children": [
				{
					"ID": "20220113143057-v4di2c6",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113143057-v4di2c6"
					},
					"Children": [
						{
							"ID": "20220113143057-yc8tdj3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113143057-yc8tdj3"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Map的keySet()返回key的集合Set类型，因为Map的键不能重复的。"
								}
							]
						}
					]
				},
				{
					"ID": "20220113143057-10qlt02",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113143057-10qlt02"
					},
					"Children": [
						{
							"ID": "20220113143057-dp7xl0g",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113143057-dp7xl0g"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Map的Values()返回是Collection集合，所以Map的值是可以重复的。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220113143057-ucrm421",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220113143057-ucrm421",
				"updated": "20220113143057"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一、HashMap：键值对形式双列集合。"
				}
			]
		},
		{
			"ID": "20220113143057-x19r7f8",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220113143057-x19r7f8",
				"updated": "20220113143057"
			},
			"Children": [
				{
					"ID": "20220113143057-ajd13xc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113143057-ajd13xc"
					},
					"Children": [
						{
							"ID": "20220113143057-rjv9c40",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113143057-rjv9c40"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "底层："
								}
							]
						},
						{
							"ID": "20220113143057-xoa255w",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20220113143057-xoa255w"
							},
							"Children": [
								{
									"ID": "20220113143057-zl040nh",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20220113143057-zl040nh"
									},
									"Children": [
										{
											"ID": "20220113143057-1nds3j2",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220113143057-1nds3j2"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "存储原理是：哈希链表（数组+链表），初始化长度是16，负载因子0.75，达到16"
												},
												{
													"Type": "NodeEmphasis",
													"Data": "em",
													"Children": [
														{
															"Type": "NodeEmA6kOpenMarker",
															"Data": "*"
														},
														{
															"Type": "NodeText",
															"Data": "0.75=12时，进行扩容到2倍即是16"
														},
														{
															"Type": "NodeEmA6kCloseMarker",
															"Data": "*"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "2=32，"
												}
											]
										},
										{
											"ID": "20220113143057-1n2hj7w",
											"Type": "NodeList",
											"ListData": {},
											"Properties": {
												"id": "20220113143057-1n2hj7w"
											},
											"Children": [
												{
													"ID": "20220113143057-iryeeg4",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20220113143057-iryeeg4"
													},
													"Children": [
														{
															"ID": "20220113143057-xozkgjm",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20220113143057-xozkgjm"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "当链表长度达到8的阈值，并且数值长度达到64时，链表转化红黑树。"
																}
															]
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20220113143057-y6btups",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113143057-y6btups"
					},
					"Children": [
						{
							"ID": "20220113143057-qbsymcf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113143057-qbsymcf"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如图："
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/Image(46)-20220113143057-el184cb.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20220113143057-j7iq8ru",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113143057-j7iq8ru"
					},
					"Children": [
						{
							"ID": "20220113143057-has1ys3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113143057-has1ys3"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "图说明："
								}
							]
						}
					]
				},
				{
					"ID": "20220113143057-jor8cda",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113143057-jor8cda"
					},
					"Children": [
						{
							"ID": "20220113143057-xn5gbt5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113143057-xn5gbt5"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "E* 代表一个Node节点，每个Node节点解释我们理解的key-value的mapping映射；"
								}
							]
						}
					]
				},
				{
					"ID": "20220113143057-31yfyvi",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113143057-31yfyvi"
					},
					"Children": [
						{
							"ID": "20220113143057-ez1gy5o",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113143057-ez1gy5o"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "每个Node除了保存了key和value的映射还保存了下一个Node引用。"
								}
							]
						}
					]
				},
				{
					"ID": "20220113143057-ad7idcf",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113143057-ad7idcf"
					},
					"Children": [
						{
							"ID": "20220113143057-ugesspq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113143057-ugesspq"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "实现原理："
								}
							]
						}
					]
				},
				{
					"ID": "20220113143057-mqz9qux",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113143057-mqz9qux"
					},
					"Children": [
						{
							"ID": "20220113143057-1svul7v",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113143057-1svul7v"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "HashMap底层维护一个数组，我们向HashMap中所放置的对象实际上是存储在该数组当中。"
								}
							]
						}
					]
				},
				{
					"ID": "20220113143057-6ppuzel",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113143057-6ppuzel"
					},
					"Children": [
						{
							"ID": "20220113143057-slh2vs0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113143057-slh2vs0"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当增加一对键值时，它会根据key的hashcode值计算出一个位置，该位置就是此对象准备向数组中存放的位置："
								}
							]
						}
					]
				},
				{
					"ID": "20220113143057-2zibb3b",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113143057-2zibb3b"
					},
					"Children": [
						{
							"ID": "20220113143057-ldjopsf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113143057-ldjopsf"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果该位置没有对象存在，就将此对象直接放进数组当中。"
								}
							]
						}
					]
				},
				{
					"ID": "20220113143057-eowg2nx",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113143057-eowg2nx"
					},
					"Children": [
						{
							"ID": "20220113143057-jnv3if0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113143057-jnv3if0"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果该位置已经有对象存在了，则顺着此存在的对象的链开始寻找（Entry 类有一个Entry类型的next成员变量，只想了该对象的下一个对象），如果此链上有对象的话，再去使用equals方法进行比较，如果对此链上的某一个对象的equals方法比较为false，则将该对象放到数组当中，然后将数值中该位置以前存在的那个对象链到此对象的后面。如果比较为true，则更新value的值。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220113143057-dt30lww",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220113143057-dt30lww",
				"updated": "20220113143057"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二、HashTable \u0026 HashMap 区别"
				}
			]
		},
		{
			"ID": "20220113143057-6eimy9j",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220113143057-6eimy9j",
				"updated": "20220113143057"
			},
			"Children": [
				{
					"ID": "20220113143057-dpkm05i",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113143057-dpkm05i"
					},
					"Children": [
						{
							"ID": "20220113143057-uyy7t3x",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113143057-uyy7t3x"
							},
							"Children": [
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/Image(47)-20220113143057-ruxth36.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20220113143057-pk455rx",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113143057-pk455rx"
					},
					"Children": [
						{
							"ID": "20220113143057-g1ww6j5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113143057-g1ww6j5"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "扩展：HashTable的synchronized，锁是加在方法上的。加在不同的地方，区别是锁对象不同："
								}
							]
						},
						{
							"ID": "20220113143057-0kxraw7",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20220113143057-0kxraw7"
							},
							"Children": [
								{
									"ID": "20220113143057-8tc1qyr",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20220113143057-8tc1qyr"
									},
									"Children": [
										{
											"ID": "20220113143057-myya67u",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220113143057-myya67u"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "同步代码块：任意对象"
												}
											]
										}
									]
								},
								{
									"ID": "20220113143057-k3xivyt",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20220113143057-k3xivyt"
									},
									"Children": [
										{
											"ID": "20220113143057-9qvmlt4",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220113143057-9qvmlt4"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "同步方法：this"
												}
											]
										}
									]
								},
								{
									"ID": "20220113143057-eq5xxzg",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20220113143057-eq5xxzg"
									},
									"Children": [
										{
											"ID": "20220113143057-idelkgx",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220113143057-idelkgx"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "静态同步方法：类名.class"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220113143057-36ku4aj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220113143057-36ku4aj",
				"updated": "20220113143057"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "三、TreeMap （有序的，不安全）"
				}
			]
		},
		{
			"ID": "20220113143057-cdflgbq",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220113143057-cdflgbq",
				"updated": "20220113143057"
			},
			"Children": [
				{
					"ID": "20220113143057-rp7b4a1",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113143057-rp7b4a1"
					},
					"Children": [
						{
							"ID": "20220113143057-6ypbe06",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113143057-6ypbe06"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "TreeMap：基于红黑树实现。TreeMap没有调优选项，因为该树总处于平衡状态。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220113143057-a9b9rqh",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220113143057-a9b9rqh",
				"updated": "20220113143057"
			}
		},
		{
			"ID": "20220113143057-nzg6is7",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220113143057-nzg6is7",
				"updated": "20220113143057"
			}
		},
		{
			"ID": "20220113143057-qtymd1y",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220113143057-qtymd1y",
				"updated": "20220113143057"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "HashMap 和 Hashtable 的区别"
				}
			]
		},
		{
			"ID": "20220113143057-fu9up09",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220113143057-fu9up09",
				"updated": "20220113143057"
			},
			"Children": [
				{
					"ID": "20220113143057-mg4ml26",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220113143057-mg4ml26"
					},
					"Children": [
						{
							"ID": "20220113143057-yppqmi2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113143057-yppqmi2"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "线程是否安全： HashMap 是非线程安全的，HashTable 是线程安全的,因为 HashTable 内部的方法基本都经过synchronized 修饰。（如果你要保证线程安全的话就使用 ConcurrentHashMap 吧！）；"
								}
							]
						}
					]
				},
				{
					"ID": "20220113143057-fo74w4g",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220113143057-fo74w4g"
					},
					"Children": [
						{
							"ID": "20220113143057-1s2i91d",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113143057-1s2i91d"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "效率： 因为线程安全的问题，HashMap 要比 HashTable 效率高一点。另外，HashTable 基本被淘汰，不要在代码中使用它；"
								}
							]
						}
					]
				},
				{
					"ID": "20220113143057-hqks3cx",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20220113143057-hqks3cx"
					},
					"Children": [
						{
							"ID": "20220113143057-pvrsqzc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113143057-pvrsqzc"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对 Null key 和 Null value 的支持： HashMap 可以存储 null 的 key 和 value，但 null 作为键只能有一个，null 作为值可以有多个；HashTable 不允许有 null 键和 null 值，否则会抛出 NullPointerException。"
								}
							]
						}
					]
				},
				{
					"ID": "20220113143057-nc0tr19",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20220113143057-nc0tr19"
					},
					"Children": [
						{
							"ID": "20220113143057-brmjfvi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113143057-brmjfvi"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "初始容量大小和每次扩充容量大小的不同 ： ① 创建时如果不指定容量初始值，Hashtable 默认的初始大小为 11，之后每次扩充，容量变为原来的 2n+1。HashMap 默认的初始化大小为 16。之后每次扩充，容量变为原来的 2 倍。② 创建时如果给定了容量初始值，那么 Hashtable 会直接使用你给定的大小，而 HashMap 会将其扩充为 2 的幂次方大小（HashMap 中的tableSizeFor()方法保证，下面给出了源代码）。也就是说 HashMap 总是使用 2 的幂作为哈希表的大小,后面会介绍到为什么是 2 的幂次方。"
								}
							]
						}
					]
				},
				{
					"ID": "20220113143057-w23hny3",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20220113143057-w23hny3"
					},
					"Children": [
						{
							"ID": "20220113143057-3tpdq50",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113143057-3tpdq50"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "底层数据结构： JDK1.8 以后的 HashMap 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间。Hashtable 没有这样的机制。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220113143057-2dazvj2",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220113143057-2dazvj2",
				"updated": "20220113143057"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "HashMap 和 HashSet 区别"
				}
			]
		},
		{
			"ID": "20220113143057-x1cupsw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220113143057-x1cupsw",
				"updated": "20220113143057"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果你看过 HashSet 源码的话就应该知道：HashSet 底层就是基于 HashMap 实现的。（HashSet 的源码非常非常少，因为除了 clone()、writeObject()、readObject()是 HashSet 自己不得不实现之外，其他方法都是直接调用 HashMap 中的方法。"
				}
			]
		},
		{
			"ID": "20220113143057-xg7r7xo",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0
			],
			"Properties": {
				"id": "20220113143057-xg7r7xo",
				"updated": "20220113143057"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "HashMap"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "HashSet"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "实现了Map接口"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "实现Set接口"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "存储键值对"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "仅存储对象"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "调用put()向 map 中添加元素"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "调用add()方法向Set中添加元素"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "HashMap使用键（Key）计算hashcode"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "HashSet使用成员对象来计算hashcode值，对于两个对象来说hashcode可能相同，所以 equals()方法用来判断对象的相等性"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220113143057-gg8hxjt",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220113143057-gg8hxjt",
				"updated": "20220113143057"
			}
		},
		{
			"ID": "20220113143057-cutgftp",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220113143057-cutgftp",
				"updated": "20220113143057"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ConcurrentHashMap 和 Hashtable 的区别"
				}
			]
		},
		{
			"ID": "20220113143057-z58tu0c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220113143057-z58tu0c",
				"updated": "20220113143057"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ConcurrentHashMap 和 Hashtable 的区别主要体现在实现线程安全的方式上不同。"
				}
			]
		},
		{
			"ID": "20220113143057-ktsv2l0",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220113143057-ktsv2l0",
				"updated": "20220113143057"
			},
			"Children": [
				{
					"ID": "20220113143057-ds7gygf",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113143057-ds7gygf"
					},
					"Children": [
						{
							"ID": "20220113143057-xibfveu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113143057-xibfveu"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "底层数据结构： JDK1.7 的 ConcurrentHashMap 底层采用 分段的数组+链表 实现，JDK1.8 采用的数据结构跟 HashMap1.8 的结构一样，数组+链表/红黑二叉树。Hashtable 和 JDK1.8 之前的 HashMap 的底层数据结构类似都是采用 数组+链表 的形式，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的；"
								}
							]
						}
					]
				},
				{
					"ID": "20220113143057-3kvd3gk",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113143057-3kvd3gk"
					},
					"Children": [
						{
							"ID": "20220113143057-yd9p9tr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113143057-yd9p9tr"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "实现线程安全的方式（重要）： ① 在 JDK1.7 的时候，ConcurrentHashMap（分段锁） 对整个桶数组进行了分割分段(Segment)，每一把锁只锁容器其中一部分数据，多线程访问容器里不同数据段的数据，就不会存在锁竞争，提高并发访问率。 到了 JDK1.8 的时候已经摒弃了 Segment 的概念，而是直接用 Node 数组+链表+红黑树的数据结构来实现，并发控制使用 synchronized 和 CAS 来操作。（JDK1.6 以后 对 synchronized 锁做了很多优化） 整个看起来就像是优化过且线程安全的 HashMap，虽然在 JDK1.8 中还能看到 Segment 的数据结构，但是已经简化了属性，只是为了兼容旧版本；② Hashtable(同一把锁) :使用 synchronized 来保证线程安全，效率非常低下。当一个线程访问同步方法时，其他线程也访问同步方法，可能会进入阻塞或轮询状态，如使用 put 添加元素，另一个线程不能使用 put 添加元素，也不能使用 get，竞争会越来越激烈效率越低。"
								}
							]
						}
					]
				}
			]
		}
	]
}