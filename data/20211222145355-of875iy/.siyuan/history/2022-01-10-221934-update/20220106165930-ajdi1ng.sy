{
	"ID": "20220106165930-ajdi1ng",
	"Type": "NodeDocument",
	"Properties": {
		"icon": "1f4d2",
		"id": "20220106165930-ajdi1ng",
		"title": "Java_多线程",
		"updated": "20220110221601"
	},
	"Children": [
		{
			"ID": "20220106165930-lmgaojz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220106165930-lmgaojz",
				"updated": "20220110152430"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Main执行会创建多少个线程？"
				}
			]
		},
		{
			"ID": "20220110152431-398xujl",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220110152431-398xujl",
				"updated": "20220110221601"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "    public static void main(String[] args) {\n\n        //获取Java中的线程工厂 获取Java虚拟中线程Bean\n        ThreadMXBean tmxb = ManagementFactory.getThreadMXBean();\n        //获取所有线程\n        ThreadInfo[] threadInfos=tmxb.dumpAllThreads(false, false);\n        for(ThreadInfo threadInfo:threadInfos) {\n            System.out.println(threadInfo.getThreadName());\n        }\n        /**\n         * Attach Listener：线程是负责接收到外部的命令，而对该命令进行执行的，并且把结果返回给发送者。通常我们会用一些命令去要求jvm给我们一些反馈信息，如：java -version、jmap、jstack等等。如果该线程在jvm启动的时候没有初始化，那么，则会在用户第一次执行jvm命令时，得到启动。\n         * Signal Dispatcher:前面我们提到第一个Attach Listener线程的职责是接收外部jvm命令，当命令接收成功后，会交给Signal Dispatcher线程去进行分发到各个不同的模块处理命令，并且返回处理结果。Signal Dispatcher线程也是在第一次接收外部 JVM 命令时，进行初始化工作。\n         * Finalizer：Finalizer线程 用来执行所有对象的finalize() ；\n         * Reference Handler：它主要用于处理引用对象本身（软引用、弱引用、虚引用）的垃圾回收问题。\n         * main：自己启动的线程。\n         */\n    }\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}