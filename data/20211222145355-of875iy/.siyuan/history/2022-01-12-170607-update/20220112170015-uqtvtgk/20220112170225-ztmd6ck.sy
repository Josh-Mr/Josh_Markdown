{
	"ID": "20220112170225-ztmd6ck",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20220112170225-ztmd6ck",
		"title": "20220112170225",
		"updated": "20220112170316"
	},
	"Children": [
		{
			"ID": "20220112170314-rs5ucx8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220112170314-rs5ucx8",
				"updated": "20220112170316"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Switch      False        tureByte short  long folat Boolean doubleintegerarray4、27获得系统输入：     Scanner scanner = new Scanner(System.in);        String string =scanner.nextLine();随机数：Random random = new Random()；random.nextInt(s);//设置长度Array数组：1）     //数组打印         int[] array= new int[]{2,3,423,42,352,5,435,2452,23};         //先排序在打印         Arrays.sort(array);         for(int element:array){             System.out.println(element);         }         System.out.println(\"-------------------\");         for(int i=0;i\u003carray.length;i++){             System.out.println(array[i]);         }2）//调用Arrays.toString();    int[] array2= new int[]{12,234,2,4,23,52,3,52,3,42,3};    System.out.println(Arrays.toString(array2));3）输入总数和要抽签的数进行抽签import java.util.Arrays;import java.util.Scanner;public class ArrayDemo {     public static void main(String[] args) {                              Scanner scanner = new Scanner(System.in);          System.out.println(\"请输入总人数：\");          int n = scanner.nextInt();          System.out.println(\"请输入抽的人数？\");          int k = scanner.nextInt();          int[] number = new int[n];          //把输入的总数赋值          for(int i=0;i\u003cnumber.length;i++){               number[i]=i+1;          }          int[] result=new int[k];          for(int i=0;i\u003cresult.length;i++){               //用Math.random()方法随机返回（0到1，不包括1）一个浮点数*上n(总数).               int r=(int) (Math.random()*n);               //随机生成的值r放到number[i]=i+1存在result中。               result[i]=number[r];               //为了保证下次不会抽到相同的数。把抽到的number[r]在总数中减去。               number[r]= number[n-1];               //总数自减               n--;                         }          //排序          Arrays.sort(result);          //打印          for(int element:result)               System.out.println(element);                         }}import java.util.Arrays;import java.util.HashSet;import java.util.Random;import java.util.Scanner;//四种抽不重复的随机数public class Test0607 {     public static void main(String[] args) {          int[] in = new TestDemo().two(20, 10, 8);          Arrays.sort(in);          for (int i : in) {               System.out.println(i);          }                    int[] reult2 = new TestDemo().randomArray(20,50,10);          for (int i : reult2) {              System.out.println(i);          }                    HashSet\u003cInteger\u003e set = new HashSet\u003cInteger\u003e();          new TestDemo().randomSet(20,50,10,set);             for (int j : set) {              System.out.println(j);          }      }}class TestDemo {          public void one() {          Scanner scanner = new Scanner(System.in);          System.out.println(\"总数：\");          int zong = scanner.nextInt();          int[] k = new int[zong];          for (int i = 0; i \u003c k.length; i++) {               k[i] = i + 1;          }          System.out.println(\"抽数\");          int shou = scanner.nextInt();          int[] j = new int[shou];          for (int i = 0; i \u003c j.length; i++) {               int r = (int) (Math.random() * zong);               j[i] = k[r];               k[r] = k[zong - 1];               zong--;          }          Arrays.sort(j);          for (int in : j) {               System.out.println(in);          }     }//-------------------------------------------------------     /**      * 随机指定范围内N个不重复的数 最简单最基本的方法      *      * @param min      *            指定范围最小值      * @param max      *            指定范围最大值      * @param n      *            随机数个数      */     public static int[] two(int max, int min, int n) {          if (n \u003e (max - min + 1) || min \u003e max) {               return null;          }          int connt = 0;          int[] arrays = new int[n];          while (connt \u003c n) {               int numbers = (int) ((Math.random() * (max - min)) + min);               boolean lag = true;               for (int j = 0; j \u003c n; j++) {                    if (numbers == arrays[j]) {                         lag = false;                         break;                    }               }               if (lag) {                    arrays[connt] = numbers;                    connt++;               }          }          return arrays;     }//-------------------------------------------------------------------     /**      * 随机指定范围内N个不重复的数 利用HashSet的特征，只能存放不同的值      *      * @param min      *            指定范围最小值      * @param max      *            指定范围最大值      * @param n      *            随机数个数      * @param HashSet\u003cInteger\u003e      *            set 随机数结果集      */     public static void randomSet(int min, int max, int n, HashSet\u003cInteger\u003e set) {          if (n \u003e (max - min + 1) || max \u003c min) {               return;          }          for (int i = 0; i \u003c n; i++) {               // 调用Math.random()方法               int num = (int) (Math.random() * (max - min)) + min;               set.add(num);// 将不同的数存入HashSet中          }          int setSize = set.size();          // 如果存入的数小于指定生成的个数，则调用递归再生成剩余个数的随机数，如此循环，直到达到指定大小          if (setSize \u003c n) {               randomSet(min, max, n, set);// 递归          }     }//-----------------------------------------------------------------------     /**      * 随机指定范围内N个不重复的数 在初始化的无重复待选数组中随机产生一个数放入结果中，      * 将待选数组被随机到的数，用待选数组(len-1)下标对应的数替换 然后从len-2里随机产生下一个随机数，如此类推      *      * @param max      *            指定范围最大值      * @param min      *            指定范围最小值      * @param n      *            随机数个数      * @return int[] 随机数结果集      */     public static int[] randomArray(int min, int max, int n) {          int len = max - min + 1;          if (max \u003c min || n \u003e len) {               return null;          }          // 初始化给定范围的待选数组          int[] source = new int[len];          for (int i = min; i \u003c min + len; i++) {               source[i - min] = i;          }          int[] result = new int[n];          Random rd = new Random();          int index = 0;          for (int i = 0; i \u003c result.length; i++) {               // 待选数组0到(len-2)随机一个下标               index = Math.abs(rd.nextInt() % len--);               // 将随机到的数放入结果集               result[i] = source[index];               // 将待选数组中被随机到的数，用待选数组(len-1)下标对应的数替换               source[index] = source[len];          }          return result;     }}4）自定义二维数组public class Arraytest {    public static void main(String[] args) {         //自定义二维数组         int[][] array = new int[3][];         array[0] = new int[2];         array[1] = new int[4];         array[2]= new int[3];         for(int i=0;i\u003c3;i++){                          for (int j = 0; j \u003c array[i].length; j++) {                                   array[i][j]=2;                      System.out.print(array[i][j]);             }             System.out.println(\"\");                      }    }}5）传值和传引用的区别public static void arrayParam(char[] ch,char a){                      ch[0]='1';         a='2';    }    public static void main(String[] args) {         char[] ch = new char[]{'a','b'};         ch[1]='b';         arrayParam(ch, ch[1]);         for(int i= 0;i\u003cch.length;i++){             System.out.println(ch[i]);         }             }}6）比较数组class ArrayAdd{    public static boolean arrayAdd(int[] a,int[] b){         //传入的引用不能为null         if(a==null||b==null){             return false;         }         //传入的长度不一样         if (a.length!=b.length) {             return false;                      }         //判断值是否相同         for(int i=0;i\u003ca.length;i++){             if(a[i]!=b[i]){                  return false;             }                      }         return true;             }7）拷贝数组public class ArrayCopy {    public static void main(String[] agrs){         //拷贝数组         int[] a = new int[]{1,2,3,4,5,6};         int[] b = new int[4];//       public static void arraycopy(Object src,//                int srcPos,//                Object dest,//                int destPos,//                int length)//       src - 源数组。//       srcPos - 源数组中的起始位置。//       dest - 目标数组。//       destPos - 目标数据中的起始位置。//       length - 要复制的数组元素的数量         System.arraycopy(a, 0, b, 0, 4);         for (int i = 0; i \u003c b.length; i++) {             System.out.println(b[i]);                      }    }\n\t1. ArrayList 数组列表\n\t2. public class ArrayTest {\n\t3. public static void main(String[] args) {\n\t4.      ArrayList arrayList = new ArrayList();\n\t5.      arrayList.add(\"hello\");\n\t6.      arrayList.add(\" world\");\n\t7.      arrayList.add(\"welcome\");\n\t8.      String aString = (String) arrayList.get(0);\n\t9.      for(int i=0;i\u003carrayList.size();i++){\n\t10.          System.out.println(arrayList.get(i));\n\t11.      }\n\t12.      //判断是否为空\n\t13.      System.out.println(arrayList.isEmpty());\n\t14.      System.out.println(\"------------------\");\n\t15.      ArrayList arrayList2= new ArrayList();\n\t16.      arrayList2.add(new Integer(2));\n\t17.      arrayList2.add(new Integer(3));\n\t18.      arrayList2.add(new Integer(4));\n\t19.      arrayList2.add(new Integer(5));\n\t20.      int sum=0;\n\t21.      for(int i=0;i\u003carrayList2.size();i++){\n\t22.          //拿到arr.对象转换为Integer再转换int\n\t23.          int value = ((Integer)arrayList2.get(i)).intValue();\n\t24.          sum += value;\n\t25.      }\n\t26.      System.out.println(sum);\n\t27.      System.out.println(\"-------------\");\n\t28.      ArrayList arrayList3 = new ArrayList();\n\t29.      arrayList3.add(new Integer(1));\n\t30.      arrayList3.add(new Integer(2));\n\t31.      arrayList3.add(new Integer(3));\n\t32.      arrayList3.add(new Integer(4));\n\t33.      arrayList3.add(new Integer(5));\n\t34.      arrayList3.add(new Integer(6));\n\t35.      //转换为数组然后通过数组获得值\n\t36.      Object[] in = arrayList3.toArray();\n\t37.      for(int i=0;i\u003cin.length;i++){\n\t38.          System.out.println(((Integer)in[i]).intValue());\n\t39.      \n\t40.      }\n\t41. }\n\n12. 随机生成 50 个数字（整数），每个数字的范围是[10, 50]，统计每个数字出现的次数以及 出现次数最多的数字与它的个数，最后将每个数字及其出现次数打印出来，如果某个数 字出现次数为 0，则不要打印它。打印时按照数字的升序排列。1、通过数组方法import java.util.Random;\n\t1. public class ThreeArray\n\t2. {\n\t3. public static void main(String[] args)\n\t4. {\n\t5.      int[] count = new int[41];\n\t6.  \n\t7.      Random random = new Random();\n\t8.      for(int i = 0; i \u003c 50; i++)\n\t9.      {\n\t10.          int number = random.nextInt(41) + 10;// [10, 50]\n\t11.          System.out.println(number);\n\t12.      \n\t13.          count[number - 10]++;\n\t14.      }\n\t15.      for(int i = 0; i \u003c count.length; i++)\n\t16.      {\n\t17.          if(0 == count[i])\n\t18.          {\n\t19.               continue;  \n\t20.          }\n\t21.          System.out.println((10 + i) + \"出现次数：\" + count[i]);\n\t22.      }\n\t23.      int max = count[0];\n\t24.      for(int i = 0; i \u003c count.length; i++)\n\t25.      {\n\t26.          if(max \u003c count[i])\n\t27.          {\n\t28.               max = count[i];\n\t29.          }\n\t30.      }\n\t31.      System.out.println(\"出现的最大次数为：\" +  max + \"次\");\n\t32.      for(int i = 0; i \u003c count.length; i++)\n\t33.      {\n\t34.          if(max == count[i])\n\t35.          {\n\t36.               System.out.println(i + 10);  \n\t37.          }\n\t38.      }\n\t39. }\n\n通过TreeMap集合方法import java.util.HashMap;import java.util.Iterator;import java.util.Map;import java.util.Map.Entry;import java.util.Random;import java.util.Set;import java.util.TreeMap;public class ArrayListHomeWork {    public static void main(String[] args) {         Map hashMap = new TreeMap();         Random random = new Random();         for(int i = 0;i\u003c50;i++){             int ran = random.nextInt(41)+10;//           System.out.println(ran);         //把int型转化为对象（Integer）型             Integer integer =new Integer(ran);             //如果在TreeMap中get（integer）没有这个数             //则在TreeMap中增加             if (hashMap.get(integer)==null) {                  hashMap.put(integer, new Integer(1));             }else {                  //如果存在值，则通过key获取value在加1                  int value=((Integer)hashMap.get(integer)).intValue();                  hashMap.put(integer, value+1);             }         }         //获取所有映射对象的Set集合         Set set = hashMap.entrySet();         //通过Map.Entry对象Map中的键值对，形成迭代set集合，在通过对象的映射（getKey）（getValue）获取键和值、         Iterator iterator = set.iterator();         while(iterator.hasNext()){             Map.Entry entry = (Map.Entry) iterator.next();             Object in=entry.getKey();             Object va=entry.getValue();             System.out.println(in+\" : \"+va);                      }                               }\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}