{
	"ID": "20220113104236-si0zelg",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20220113104236-si0zelg",
		"title": "3、Java【List详解】",
		"updated": "20220113104708"
	},
	"Children": [
		{
			"ID": "20220113104708-dey14ji",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220113104708-dey14ji",
				"updated": "20220113104708"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一、集合"
				}
			]
		},
		{
			"ID": "20220113104708-y95jozu",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220113104708-y95jozu",
				"updated": "20220113104708"
			},
			"Children": [
				{
					"ID": "20220113104708-n8l3qhm",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113104708-n8l3qhm"
					},
					"Children": [
						{
							"ID": "20220113104708-z7p13y9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113104708-z7p13y9"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "存放的是对象的引用而不是对象的本身！因为是存放对象的引用，所以无法放置原生数据类型，当放置原生类型时，会自动的包装类添加进去。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220113104708-hzl4ccf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220113104708-hzl4ccf",
				"updated": "20220113104708"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二、ArrayList"
				}
			]
		},
		{
			"ID": "20220113104708-ztqybzz",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220113104708-ztqybzz",
				"updated": "20220113104708"
			},
			"Children": [
				{
					"ID": "20220113104708-ymx0apy",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113104708-ymx0apy"
					},
					"Children": [
						{
							"ID": "20220113104708-v7l7jvp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113104708-v7l7jvp"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "底层是采用数组实现。"
								}
							]
						}
					]
				},
				{
					"ID": "20220113104708-9bgfbg6",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113104708-9bgfbg6"
					},
					"Children": [
						{
							"ID": "20220113104708-kue022l",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113104708-kue022l"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "创建对象过程：底层实际生成长度为10的Object的数组。"
								}
							]
						}
					]
				},
				{
					"ID": "20220113104708-jpzo0uo",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113104708-jpzo0uo"
					},
					"Children": [
						{
							"ID": "20220113104708-9mt761h",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113104708-9mt761h"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "超过初始化长度时：底层会生成行动的数组，数组为原来的1.5倍，然后将原数组的内容拷贝到新的数组当中。"
								}
							]
						}
					]
				},
				{
					"ID": "20220113104708-0ddd10z",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113104708-0ddd10z"
					},
					"Children": [
						{
							"ID": "20220113104708-3johj4l",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113104708-3johj4l"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当添加对象时，直接添加到ArrayList维护的数组的（尾部）数组当中。"
								}
							]
						}
					]
				},
				{
					"ID": "20220113104708-5v4qn6l",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113104708-5v4qn6l"
					},
					"Children": [
						{
							"ID": "20220113104708-vm8lbxe",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113104708-vm8lbxe"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "删除操作时：需要将被删除元素的后续元素向前移动（遍历删除时注意：iterator）"
								}
							]
						}
					]
				},
				{
					"ID": "20220113104708-gr30d69",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113104708-gr30d69"
					},
					"Children": [
						{
							"ID": "20220113104708-ugiqvdd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113104708-ugiqvdd"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "线程不同步"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220113104708-983l3ex",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220113104708-983l3ex",
				"updated": "20220113104708"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "三、LinkedList"
				}
			]
		},
		{
			"ID": "20220113104708-0i2yp0z",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220113104708-0i2yp0z",
				"updated": "20220113104708"
			},
			"Children": [
				{
					"ID": "20220113104708-q6rg1fi",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113104708-q6rg1fi"
					},
					"Children": [
						{
							"ID": "20220113104708-65gyeme",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113104708-65gyeme"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "底层是双向链表实现。"
								}
							]
						}
					]
				},
				{
					"ID": "20220113104708-v4zqzum",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113104708-v4zqzum"
					},
					"Children": [
						{
							"ID": "20220113104708-pkr28va",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113104708-pkr28va"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当添加对象时，LinkedList内部生成一个Entry对象，Entry对象结构包含：previous、next、element 。previous和next加入到指定的链表当中。"
								}
							]
						}
					]
				},
				{
					"ID": "20220113104708-7mn1oxg",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113104708-7mn1oxg"
					},
					"Children": [
						{
							"ID": "20220113104708-y6yse42",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113104708-y6yse42"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "总而言之：LinkedList是维护一个个的entry对象。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220113104708-ssrov8u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220113104708-ssrov8u",
				"updated": "20220113104708"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "四、ArrayList\u0026LinkedList"
				}
			]
		},
		{
			"ID": "20220113104708-i6uxkd3",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220113104708-i6uxkd3",
				"updated": "20220113104708"
			},
			"Children": [
				{
					"ID": "20220113104708-rqj9m8g",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113104708-rqj9m8g"
					},
					"Children": [
						{
							"ID": "20220113104708-kl49keq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113104708-kl49keq"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Arraylist对查询操好，LinkedList对删除，插入操作好。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220113104708-nt1iy6c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220113104708-nt1iy6c",
				"updated": "20220113104708"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "五、 Vector"
				}
			]
		},
		{
			"ID": "20220113104708-guj370p",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220113104708-guj370p",
				"updated": "20220113104708"
			},
			"Children": [
				{
					"ID": "20220113104708-k246qd3",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113104708-k246qd3"
					},
					"Children": [
						{
							"ID": "20220113104708-wce23kr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113104708-wce23kr"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "底层是数组实现"
								}
							]
						}
					]
				},
				{
					"ID": "20220113104708-dtrv9jz",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113104708-dtrv9jz"
					},
					"Children": [
						{
							"ID": "20220113104708-3blyk7z",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113104708-3blyk7z"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "线程同步"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220113104708-s8dk3hn",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220113104708-s8dk3hn",
				"updated": "20220113104708"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.2.1. Arraylist 和 Vector 的区别?"
				}
			]
		},
		{
			"ID": "20220113104708-1h2nbfb",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220113104708-1h2nbfb",
				"updated": "20220113104708"
			},
			"Children": [
				{
					"ID": "20220113104708-rfn2i37",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113104708-rfn2i37"
					},
					"Children": [
						{
							"ID": "20220113104708-5phl1k1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113104708-5phl1k1"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ArrayList 是 List 的主要实现类，底层使用 Object[ ]存储，适用于频繁的查找工作，线程不安全 ；"
								}
							]
						}
					]
				},
				{
					"ID": "20220113104708-jn7jq9v",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220113104708-jn7jq9v"
					},
					"Children": [
						{
							"ID": "20220113104708-zoli97e",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113104708-zoli97e"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Vector 是 List 的古老实现类，底层使用 Object[ ] 存储，线程安全的。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220113104708-37ui95a",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220113104708-37ui95a",
				"updated": "20220113104708"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.2.2. Arraylist 与 LinkedList 区别?"
				}
			]
		},
		{
			"ID": "20220113104708-4rq4hty",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220113104708-4rq4hty",
				"updated": "20220113104708"
			},
			"Children": [
				{
					"ID": "20220113104708-ab6vvdo",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220113104708-ab6vvdo"
					},
					"Children": [
						{
							"ID": "20220113104708-vmwin2k",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113104708-vmwin2k"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "是否保证线程安全： ArrayList 和 LinkedList 都是不同步的，也就是不保证线程安全；"
								}
							]
						}
					]
				},
				{
					"ID": "20220113104708-77383zt",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220113104708-77383zt"
					},
					"Children": [
						{
							"ID": "20220113104708-ex8o76a",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113104708-ex8o76a"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "底层数据结构： Arraylist 底层使用的是 Object 数组；LinkedList 底层使用的是 双向链表 数据结构（JDK1.6 之前为循环链表，JDK1.7 取消了循环。注意双向链表和双向循环链表的区别，下面有介绍到！）"
								}
							]
						}
					]
				},
				{
					"ID": "20220113104708-bri82ed",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20220113104708-bri82ed"
					},
					"Children": [
						{
							"ID": "20220113104708-9921jbx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113104708-9921jbx"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "插入和删除是否受元素位置的影响： ① ArrayList 采用数组存储，所以插入和删除元素的时间复杂度受元素位置的影响。 比如：执行add(E e)方法的时候， ArrayList 会默认在将指定的元素追加到此列表的末尾，这种情况时间复杂度就是 O(1)。但是如果要在指定位置 i 插入和删除元素的话（add(int index, E element)）时间复杂度就为 O(n-i)。因为在进行上述操作的时候集合中第 i 和第 i 个元素之后的(n-i)个元素都要执行向后位/向前移一位的操作。 ② LinkedList 采用链表存储，所以对于add(E e)方法的插入，删除元素时间复杂度不受元素位置的影响，近似 O(1)，如果是要在指定位置i插入和删除元素的话（(add(int index, E element)） 时间复杂度近似为o(n))因为需要先移动到指定位置再插入。"
								}
							]
						}
					]
				},
				{
					"ID": "20220113104708-4dgfpdk",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20220113104708-4dgfpdk"
					},
					"Children": [
						{
							"ID": "20220113104708-8oevfko",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113104708-8oevfko"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "是否支持快速随机访问： LinkedList 不支持高效的随机元素访问，而 ArrayList 支持。快速随机访问就是通过元素的序号快速获取元素对象(对应于get(int index)方法)。"
								}
							]
						}
					]
				},
				{
					"ID": "20220113104708-rfrqtvs",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20220113104708-rfrqtvs"
					},
					"Children": [
						{
							"ID": "20220113104708-u23wf3a",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220113104708-u23wf3a"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "内存空间占用： ArrayList 的空 间浪费主要体现在在 list 列表的结尾会预留一定的容量空间，而 LinkedList 的空间花费则体现在它的每一个元素都需要消耗比 ArrayList 更多的空间（因为要存放直接后继和直接前驱以及数据）。"
								}
							]
						}
					]
				}
			]
		}
	]
}