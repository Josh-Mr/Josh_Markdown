{
	"ID": "20220112170225-ztmd6ck",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20220112170225-ztmd6ck",
		"title": "Java之学习DEMO1",
		"updated": "20220112171556"
	},
	"Children": [
		{
			"ID": "20220112170314-rs5ucx8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220112170314-rs5ucx8",
				"updated": "20220112171221"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Switch      False        ture\nByte short  long folat Boolean doubleinteger\narray\n4、27\n\n获得系统输入：\n     Scanner scanner = new Scanner(System.in);\n        String string =scanner.nextLine();\n随机数：\nRandom random = new Random()；\nrandom.nextInt(s);//设置长度\nArray数组：\n1）\n     //数组打印\n         int[] array= new int[]{2,3,423,42,352,5,435,2452,23};\n         //先排序在打印\n         Arrays.sort(array);\n         for(int element:array){\n             System.out.println(element);\n         }\n         System.out.println(\"-------------------\");\n         for(int i=0;i\u003carray.length;i++){\n             System.out.println(array[i]);\n         }\n2）\n//调用Arrays.toString();\n    int[] array2= new int[]{12,234,2,4,23,52,3,52,3,42,3};\n    System.out.println(Arrays.toString(array2));\n3）输入总数和要抽签的数进行抽签\nimport java.util.Arrays;\nimport java.util.Scanner;\npublic class ArrayDemo {\n     public static void main(String[] args) {\n      \n      \n          Scanner scanner = new Scanner(System.in);\n          System.out.println(\"请输入总人数：\");\n          int n = scanner.nextInt();\n          System.out.println(\"请输入抽的人数？\");\n          int k = scanner.nextInt();\n          int[] number = new int[n];\n          //把输入的总数赋值\n          for(int i=0;i\u003cnumber.length;i++){\n               number[i]=i+1;\n          }\n          int[] result=new int[k];\n          for(int i=0;i\u003cresult.length;i++){\n               //用Math.random()方法随机返回（0到1，不包括1）一个浮点数*上n(总数).\n               int r=(int) (Math.random()*n);\n               //随机生成的值r放到number[i]=i+1存在result中。\n               result[i]=number[r];\n               //为了保证下次不会抽到相同的数。把抽到的number[r]在总数中减去。\n               number[r]= number[n-1];\n               //总数自减\n               n--;\n           \n          }\n          //排序\n          Arrays.sort(result);\n          //打印\n          for(int element:result)\n               System.out.println(element);\n                \n     }\n}\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Random;\nimport java.util.Scanner;\n//四种抽不重复的随机数\npublic class Test0607 {\n     public static void main(String[] args) {\n          int[] in = new TestDemo().two(20, 10, 8);\n          Arrays.sort(in);\n          for (int i : in) {\n               System.out.println(i);\n          }\n      \n          int[] reult2 = new TestDemo().randomArray(20,50,10); \n         for (int i : reult2) { \n             System.out.println(i); \n         } \n      \n         HashSet\u003cInteger\u003e set = new HashSet\u003cInteger\u003e(); \n         new TestDemo().randomSet(20,50,10,set); \n            for (int j : set) { \n             System.out.println(j); \n         } \n     }\n}\nclass TestDemo {\n   \n     public void one() {\n          Scanner scanner = new Scanner(System.in);\n          System.out.println(\"总数：\");\n          int zong = scanner.nextInt();\n          int[] k = new int[zong];\n          for (int i = 0; i \u003c k.length; i++) {\n               k[i] = i + 1;\n          }\n          System.out.println(\"抽数\");\n          int shou = scanner.nextInt();\n          int[] j = new int[shou];\n          for (int i = 0; i \u003c j.length; i++) {\n               int r = (int) (Math.random() * zong);\n               j[i] = k[r];\n               k[r] = k[zong - 1];\n               zong--;\n          }\n          Arrays.sort(j);\n          for (int in : j) {\n               System.out.println(in);\n          }\n     }\n//-------------------------------------------------------\n     /**\n      * 随机指定范围内N个不重复的数 最简单最基本的方法\n      *\n      * @param min\n      *            指定范围最小值\n      * @param max\n      *            指定范围最大值\n      * @param n\n      *            随机数个数\n      */\n     public static int[] two(int max, int min, int n) {\n          if (n \u003e (max - min + 1) || min \u003e max) {\n               return null;\n          }\n          int connt = 0;\n          int[] arrays = new int[n];\n          while (connt \u003c n) {\n               int numbers = (int) ((Math.random() * (max - min)) + min);\n               boolean lag = true;\n               for (int j = 0; j \u003c n; j++) {\n                    if (numbers == arrays[j]) {\n                         lag = false;\n                         break;\n                    }\n               }\n               if (lag) {\n                    arrays[connt] = numbers;\n                    connt++;\n               }\n          }\n          return arrays;\n     }\n//-------------------------------------------------------------------\n     /**\n      * 随机指定范围内N个不重复的数 利用HashSet的特征，只能存放不同的值\n      *\n      * @param min\n      *            指定范围最小值\n      * @param max\n      *            指定范围最大值\n      * @param n\n      *            随机数个数\n      * @param HashSet\u003cInteger\u003e\n      *            set 随机数结果集\n      */\n     public static void randomSet(int min, int max, int n, HashSet\u003cInteger\u003e set) {\n          if (n \u003e (max - min + 1) || max \u003c min) {\n               return;\n          }\n          for (int i = 0; i \u003c n; i++) {\n               // 调用Math.random()方法\n               int num = (int) (Math.random() * (max - min)) + min;\n               set.add(num);// 将不同的数存入HashSet中\n          }\n          int setSize = set.size();\n          // 如果存入的数小于指定生成的个数，则调用递归再生成剩余个数的随机数，如此循环，直到达到指定大小\n          if (setSize \u003c n) {\n               randomSet(min, max, n, set);// 递归\n          }\n     }\n//-----------------------------------------------------------------------\n     /**\n      * 随机指定范围内N个不重复的数 在初始化的无重复待选数组中随机产生一个数放入结果中，\n      * 将待选数组被随机到的数，用待选数组(len-1)下标对应的数替换 然后从len-2里随机产生下一个随机数，如此类推\n      *\n      * @param max\n      *            指定范围最大值\n      * @param min\n      *            指定范围最小值\n      * @param n\n      *            随机数个数\n      * @return int[] 随机数结果集\n      */\n     public static int[] randomArray(int min, int max, int n) {\n          int len = max - min + 1;\n          if (max \u003c min || n \u003e len) {\n               return null;\n          }\n          // 初始化给定范围的待选数组\n          int[] source = new int[len];\n          for (int i = min; i \u003c min + len; i++) {\n               source[i - min] = i;\n          }\n          int[] result = new int[n];\n          Random rd = new Random();\n          int index = 0;\n          for (int i = 0; i \u003c result.length; i++) {\n               // 待选数组0到(len-2)随机一个下标\n               index = Math.abs(rd.nextInt() % len--);\n               // 将随机到的数放入结果集\n               result[i] = source[index];\n               // 将待选数组中被随机到的数，用待选数组(len-1)下标对应的数替换\n               source[index] = source[len];\n          }\n          return result;\n     }\n}\n4）自定义二维数组\npublic class Arraytest {\n    public static void main(String[] args) {\n         //自定义二维数组\n         int[][] array = new int[3][];\n         array[0] = new int[2];\n         array[1] = new int[4];\n         array[2]= new int[3];\n         for(int i=0;i\u003c3;i++){\n         \n             for (int j = 0; j \u003c array[i].length; j++) {\n         \n                      array[i][j]=2;\n                      System.out.print(array[i][j]);\n             }\n             System.out.println(\"\");\n         \n         }\n    }\n}\n5）传值和传引用的区别\npublic static void arrayParam(char[] ch,char a){\n     \n  \n         ch[0]='1';\n         a='2';\n    }\n    public static void main(String[] args) {\n         char[] ch = new char[]{'a','b'};\n         ch[1]='b';\n         arrayParam(ch, ch[1]);\n         for(int i= 0;i\u003cch.length;i++){\n             System.out.println(ch[i]);\n         }\n     \n    }\n}\n6）比较数组\nclass ArrayAdd{\n    public static boolean arrayAdd(int[] a,int[] b){\n         //传入的引用不能为null\n         if(a==null||b==null){\n             return false;\n         }\n         //传入的长度不一样\n         if (a.length!=b.length) {\n             return false;\n         \n         }\n         //判断值是否相同\n         for(int i=0;i\u003ca.length;i++){\n             if(a[i]!=b[i]){\n                  return false;\n             }\n         \n         }\n         return true;\n     \n    }\n7）拷贝数组\npublic class ArrayCopy {\n    public static void main(String[] agrs){\n         //拷贝数组\n         int[] a = new int[]{1,2,3,4,5,6};\n         int[] b = new int[4];\n//       public static void arraycopy(Object src,\n//                int srcPos,\n//                Object dest,\n//                int destPos,\n//                int length)\n//       src - 源数组。\n//       srcPos - 源数组中的起始位置。\n//       dest - 目标数组。\n//       destPos - 目标数据中的起始位置。\n//       length - 要复制的数组元素的数量\n         System.arraycopy(a, 0, b, 0, 4);\n         for (int i = 0; i \u003c b.length; i++) {\n             System.out.println(b[i]);\n         \n         }\n    }\nArrayList 数组列表\npublic class ArrayTest {\npublic static void main(String[] args) {\n     ArrayList arrayList = new ArrayList();\n     arrayList.add(\"hello\");\n     arrayList.add(\" world\");\n     arrayList.add(\"welcome\");\n     String aString = (String) arrayList.get(0);\n     for(int i=0;i\u003carrayList.size();i++){\n         System.out.println(arrayList.get(i));\n     }\n     //判断是否为空\n     System.out.println(arrayList.isEmpty());\n     System.out.println(\"------------------\");\n     ArrayList arrayList2= new ArrayList();\n     arrayList2.add(new Integer(2));\n     arrayList2.add(new Integer(3));\n     arrayList2.add(new Integer(4));\n     arrayList2.add(new Integer(5));\n     int sum=0;\n     for(int i=0;i\u003carrayList2.size();i++){\n         //拿到arr.对象转换为Integer再转换int\n         int value = ((Integer)arrayList2.get(i)).intValue();\n         sum += value;\n     }\n     System.out.println(sum);\n     System.out.println(\"-------------\");\n     ArrayList arrayList3 = new ArrayList();\n     arrayList3.add(new Integer(1));\n     arrayList3.add(new Integer(2));\n     arrayList3.add(new Integer(3));\n     arrayList3.add(new Integer(4));\n     arrayList3.add(new Integer(5));\n     arrayList3.add(new Integer(6));\n     //转换为数组然后通过数组获得值\n     Object[] in = arrayList3.toArray();\n     for(int i=0;i\u003cin.length;i++){\n         System.out.println(((Integer)in[i]).intValue());\n     \n     }\n}\n12. 随机生成 50 个数字（整数），每个数字的范围是[10, 50]，统计每个数字出现的次数以及 出现次数最多的数字与它的个数，最后将每个数字及其出现次数打印出来，如果某个数 字出现次数为 0，则不要打印它。打印时按照数字的升序排列。\n1、通过数组方法\nimport java.util.Random;\npublic class ThreeArray\n{\npublic static void main(String[] args)\n{\n     int[] count = new int[41];\n   \n     Random random = new Random();\n     for(int i = 0; i \u003c 50; i++)\n     {\n         int number = random.nextInt(41) + 10;// [10, 50]\n         System.out.println(number);\n     \n         count[number - 10]++;\n     }\n     for(int i = 0; i \u003c count.length; i++)\n     {\n         if(0 == count[i])\n         {\n              continue;  \n         }\n         System.out.println((10 + i) + \"出现次数：\" + count[i]);\n     }\n     int max = count[0];\n     for(int i = 0; i \u003c count.length; i++)\n     {\n         if(max \u003c count[i])\n         {\n              max = count[i];\n         }\n     }\n     System.out.println(\"出现的最大次数为：\" +  max + \"次\");\n     for(int i = 0; i \u003c count.length; i++)\n     {\n         if(max == count[i])\n         {\n              System.out.println(i + 10);  \n         }\n     }\n}\n通过TreeMap集合方法\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Random;\nimport java.util.Set;\nimport java.util.TreeMap;\npublic class ArrayListHomeWork {\n    public static void main(String[] args) {\n         Map hashMap = new TreeMap();\n         Random random = new Random();\n         for(int i = 0;i\u003c50;i++){\n             int ran = random.nextInt(41)+10;\n//           System.out.println(ran);\n         //把int型转化为对象（Integer）型\n             Integer integer =new Integer(ran);\n             //如果在TreeMap中get（integer）没有这个数\n             //则在TreeMap中增加\n             if (hashMap.get(integer)==null) {\n                  hashMap.put(integer, new Integer(1));\n             }else {\n                  //如果存在值，则通过key获取value在加1\n                  int value=((Integer)hashMap.get(integer)).intValue();\n                  hashMap.put(integer, value+1);\n             }\n         }\n         //获取所有映射对象的Set集合\n         Set set = hashMap.entrySet();\n         //通过Map.Entry对象Map中的键值对，形成迭代set集合，在通过对象的映射（getKey）（getValue）获取键和值、\n         Iterator iterator = set.iterator();\n         while(iterator.hasNext()){\n             Map.Entry entry = (Map.Entry) iterator.next();\n             Object in=entry.getKey();\n             Object va=entry.getValue();\n             System.out.println(in+\" : \"+va);\n         \n         }\n     \n     \n     \n    }\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}