{
	"ID": "20220113142823-b534f2m",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20220113142823-b534f2m",
		"title": "4、Java【List集合remove()时存在问题】",
		"updated": "20220113142838"
	},
	"Children": [
		{
			"ID": "20220113142823-mjdhqwm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220113142823-mjdhqwm",
				"updated": "20220113142838"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package com.sort;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\n\n/**\n * List集合remove()时存在问题。 解决remove问题：三种方式\n *\n * @author JCS create by 2018-10-21\n */\npublic class BubblingSort {\n     public static void main(String[] args) {\n          ArrayList\u003cInteger\u003e list = new ArrayList\u003c\u003e();\n          for (int i = 0; i \u003c 15; i++) {\n              list.add(i);\n          }\n          System.out.println(list.toString());\n          // 1、method\n          for (int i = 0; i \u003c list.size(); i++) {\n              if (list.get(i) \u003c 10) {\n                   list.remove(i);\n                   // 当remove一个元素时，后面的元素就会向前移动,如果在执行i=i+1时，刚刚过来的元素就没有读取到了！\n                   i--;\n              }\n          }\n          // 2、method\n          // 从后面遍历回来可以避免remove后移动问题\n          for (int i = list.size() - 1; i \u003e= 0; i--) {\n              if (list.get(i) \u003c 10) {\n                   list.remove(i);\n              }\n          }\n          // 3、method()\n          /*\n           * 下面是网上的其他解释，更能从本质上解释原因：\n           * Iterator 是工作在一个独立的线程中，并且拥有一个 mutex 锁。 Iterator\n           * 被创建之后会建立一个指向原来对象的单链索引表，当原来的对象数量发生变化时，这个索引表的内容不会同步改变，\n           * 所以当索引指针往后移动的时候就找不到要迭代的对象，所以按照 fail-fast 原则 Iterator 会马上抛出\n           * java.util.ConcurrentModificationException 异常。\n           * 所以 Iterator 在工作的时候是不允许被迭代的对象被改变的。但你可以使用 Iterator 本身的方法 remove()\n           * 来删除对象， Iterator.remove() 方法会在删除当前迭代对象的同时维护索引的一致性。\n           */\n          for (Iterator\u003cInteger\u003e it = list.iterator(); it.hasNext();) {\n              int i = (int) it.next();\n              if (i \u003c 10) {\n                   it.remove();\n              }\n          }\n          System.out.println(list.toString());\n     }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}