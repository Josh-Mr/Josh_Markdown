{
	"ID": "20220112161126-3gsv820",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20220112161126-3gsv820",
		"title": "JVM【内存泄露的几种可能】",
		"updated": "20220112161135"
	},
	"Children": [
		{
			"ID": "20220112161135-7t9e1de",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220112161135-7t9e1de",
				"updated": "20220112161135"
			},
			"Children": [
				{
					"Type": "NodeLink",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Java中的内存泄露的几种可能"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://www.cnblogs.com/yl-saber/p/6907517.html"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220112161135-k77a4d9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220112161135-k77a4d9",
				"updated": "20220112161135"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java内存泄漏引起的原因："
				}
			]
		},
		{
			"ID": "20220112161135-rkm8u4u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220112161135-rkm8u4u",
				"updated": "20220112161135"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "　　内存泄漏是指无用对象（不再使用的对象）持续占有内存或无用对象的内存得不到及时释放，从而造成内存空间的浪费称为内存泄漏。"
				}
			]
		},
		{
			"ID": "20220112161135-r44ux2z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220112161135-r44ux2z",
				"updated": "20220112161135"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "　　长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄漏，尽管短生命周期对象已经不再需要，但是因为长生命周期持有它的引用而导致不能被回收，这就是Java中内存泄漏的发生场景。"
				}
			]
		},
		{
			"ID": "20220112161135-ghc0c5y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220112161135-ghc0c5y",
				"updated": "20220112161135"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "造成内存泄漏的几种情况："
				}
			]
		},
		{
			"ID": "20220112161135-8yfs5qe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220112161135-8yfs5qe",
				"updated": "20220112161135"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1、静态集合类引起内存泄漏"
				}
			]
		},
		{
			"ID": "20220112161135-lgxzlej",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220112161135-lgxzlej",
				"updated": "20220112161135"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "　　像HashMap、Vector等的使用最容易出现内存泄露，这些静态变量的生命周期和应用程序一致，他们所引用的所有的对象Object也不能被释放，因为他们也将一直被Vector等引用着。"
				}
			]
		},
		{
			"ID": "20220112161135-xqrsanb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220112161135-xqrsanb",
				"updated": "20220112161135"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2、当集合里面的对象属性被修改后，再调用remove()方法时不起作用。"
				}
			]
		},
		{
			"ID": "20220112161135-mstngsp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220112161135-mstngsp",
				"updated": "20220112161135"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3、监听器"
				}
			]
		},
		{
			"ID": "20220112161135-bz5d3s1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220112161135-bz5d3s1",
				"updated": "20220112161135"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "　　在释放对象的时候却没有去删除这些监听器，增加了内存泄漏的机会。"
				}
			]
		},
		{
			"ID": "20220112161135-ayquyyg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220112161135-ayquyyg",
				"updated": "20220112161135"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4、各种连接"
				}
			]
		},
		{
			"ID": "20220112161135-7he1muu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220112161135-7he1muu",
				"updated": "20220112161135"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "　　比如数据库连接（dataSourse.getConnection()），网络连接(socket)和io连接，除非其显式的调用了其close（）方法将其连接关闭，否则是不会自动被GC 回收的。"
				}
			]
		},
		{
			"ID": "20220112161135-q0sc4is",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220112161135-q0sc4is",
				"updated": "20220112161135"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5、内部类和外部模块的引用"
				}
			]
		},
		{
			"ID": "20220112161135-i3lqlrp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220112161135-i3lqlrp",
				"updated": "20220112161135"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "　　内部类的引用是比较容易遗忘的一种，而且一旦没释放可能导致一系列的后继类对象没有释放。此外程序员还要小心外部模块不经意的引用，例如程序员A 负责A 模块，调用了B 模块的一个方法如： public void registerMsg(Object b); 这种调用就要非常小心了，传入了一个对象，很可能模块B就保持了对该对象的引用，这时候就需要注意模块B 是否提供相应的操作去除引用。"
				}
			]
		},
		{
			"ID": "20220112161135-7p1r48k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220112161135-7p1r48k",
				"updated": "20220112161135"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "6、单例模式"
				}
			]
		},
		{
			"ID": "20220112161135-6kvsk1x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220112161135-6kvsk1x",
				"updated": "20220112161135"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "　　不正确使用单例模式是引起内存泄漏的一个常见问题，单例对象在初始化后将在JVM的整个生命周期中存在（以静态变量的方式），如果单例对象持有外部的引用，那么这个对象将不能被JVM正常回收，导致内存泄漏。"
				}
			]
		}
	]
}