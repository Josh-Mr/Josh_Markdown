{
	"ID": "20220112165628-rvq1ton",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20220112165628-rvq1ton",
		"title": "Java之二分排序\u0026amp;冒泡排序",
		"updated": "20220112165641"
	},
	"Children": [
		{
			"ID": "20220112165628-hbzwkto",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220112165628-hbzwkto",
				"updated": "20220112165641"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "二分排序：\npublic class ArraySearchTest\n{\n//  public static int search(int[] array, int value)\n//  {\n//       for(int i = 0; i \u003c array.length; i++)\n//       {\n//           if(value == array[i])\n//           {\n//                return i;\n//           }\n//       }\n//\n//       return -1;\n//  }\n    public static int binarySearch(int[] array, int value)\n    {\n         int low = 0;//开始数组的下标\n         int high = array.length - 1;//数组的长度\n         int middle;//数组一半的游标\n         //当数组有长度是判断\n         while(low \u003c= high)\n         {\n             //数组游标的一半\n             middle = (low + high) / 2;\n             //标出中间值\n             for(int i = 0; i \u003c array.length; i++)\n             {\n                  System.out.print(array[i]);\n                  if(i == middle)\n                  {\n                      System.out.print(\"#\");\n                  }\n                  System.out.print(\" \");\n             }\n         \n             System.out.println();\n             //刚好相等时返回下标\n             if(array[middle] == value)\n             {\n                  return middle;\n             }\n             //当value的值小于数组的一半时；去掉数组的右边\n             if(value \u003c array[middle])\n             {\n                  //向左退一下标\n                  high = middle - 1;\n             }\n             //当value的值大于数组的一半时，去掉左边的\n             if(value \u003e array[middle])\n             {\n                  //开始的长度向右前进一格\n                  low = middle + 1;\n             }\n         }\n         return -1;\n    }\n    public static void main(String[] args)\n    {\n         //前提一定要有序排列\n//       int[] a = new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9};\n//\n//       int value = 11;\n//\n//       int index = search(a, value);\n//\n//       System.out.println(index);\n         System.out.println(\"-----------------\");\n         //前提一定要有序排列\n         int[] b = new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9};\n         int index2 = binarySearch(b , 10);\n         System.out.println(index2);\n    }\n}\n冒泡排序法：\npublic class BubbleSort{\n       public static void main(String[] args){\n           int score[] = {67, 69, 75, 87, 89, 90, 99, 100};\n           for (int i = 0; i \u003c score.length -1; i++){    //最多做n-1趟排序\n               for(int j = 0 ;j \u003c score.length - i - 1; j++){    //对当前无序区间score[0......length-i-1]进行排序(j的范围很关键，这个范围是在逐步缩小的)\n                   if(score[j] \u003c score[j + 1]){    //把小的值交换到后面\n                      int temp = score[j];\n                       score[j] = score[j + 1];\n                       score[j + 1] = temp;\n                  }\n              }       \n             System.out.print(\"第\" + (i + 1) + \"次排序结果：\");\n              for(int a = 0; a \u003c score.length; a++){\n                  System.out.print(score[a] + \"\\t\");\n             }\n              System.out.println(\"\");\n          }\n              System.out.print(\"最终排序结果：\");\n              for(int a = 0; a \u003c score.length; a++){\n                  System.out.print(score[a] + \"\\t\");\n         }\n      }\n  }\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}