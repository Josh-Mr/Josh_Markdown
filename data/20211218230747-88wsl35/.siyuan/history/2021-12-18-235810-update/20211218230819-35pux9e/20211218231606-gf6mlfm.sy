{
	"ID": "20211218231606-gf6mlfm",
	"Type": "NodeDocument",
	"Properties": {
		"icon": "1f4dd",
		"id": "20211218231606-gf6mlfm",
		"title": "Mybaits入门",
		"updated": "20211218235805"
	},
	"Children": [
		{
			"ID": "20211218235805-32qywzt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218235805-32qywzt",
				"updated": "20211218235805"
			}
		},
		{
			"ID": "20211218234012-2miy7ke",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-2miy7ke",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "File getResourceAsFile(ClassLoader loader, String resource)"
				}
			]
		},
		{
			"ID": "20211218234012-6co0w4q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-6co0w4q",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "InputStream getUrlAsStream(String urlString)"
				}
			]
		},
		{
			"ID": "20211218234012-y8evcep",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-y8evcep",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Reader getUrlAsReader(String urlString)"
				}
			]
		},
		{
			"ID": "20211218234012-xvecs63",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-xvecs63",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Properties getUrlAsProperties(String urlString)"
				}
			]
		},
		{
			"ID": "20211218234012-7pz2i7j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-7pz2i7j",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Class classForName(String className)"
				}
			]
		},
		{
			"ID": "20211218234012-qtns986",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-qtns986",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "最后一个 build 方法接受一个 Configuration 实例。Configuration 类包含了对一个 SqlSessionFactory 实例你可能关心的所有内容。在检查配置时，Configuration 类很有用，它允许你查找和操纵 SQL 映射（但当应用开始接收请求时不推荐使用）。你之前学习过的所有配置开关都存在于 Configuration 类，只不过它们是以 Java API 形式暴露的。以下是一个简单的示例，演示如何手动配置 Configuration 实例，然后将它传递给 build() 方法来创建 SqlSessionFactory。"
				}
			]
		},
		{
			"ID": "20211218234012-bb39fdv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-bb39fdv",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "DataSource dataSource = BaseDataTest.createBlogDataSource();"
				}
			]
		},
		{
			"ID": "20211218234012-0objqzk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-0objqzk",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "TransactionFactory transactionFactory = new JdbcTransactionFactory();"
				}
			]
		},
		{
			"ID": "20211218234012-w1qzj3h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-w1qzj3h",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Environment environment = new Environment(\"development\", transactionFactory, dataSource);"
				}
			]
		},
		{
			"ID": "20211218234012-cd2parw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-cd2parw",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Configuration configuration = new Configuration(environment);"
				}
			]
		},
		{
			"ID": "20211218234012-k8spngj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-k8spngj",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "configuration.setLazyLoadingEnabled(true);"
				}
			]
		},
		{
			"ID": "20211218234012-8qig38c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-8qig38c",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "configuration.setEnhancementEnabled(true);"
				}
			]
		},
		{
			"ID": "20211218234012-laisk97",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-laisk97",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "configuration.getTypeAliasRegistry().registerAlias(Blog.class);"
				}
			]
		},
		{
			"ID": "20211218234012-y0ujk79",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-y0ujk79",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "configuration.getTypeAliasRegistry().registerAlias(Post.class);"
				}
			]
		},
		{
			"ID": "20211218234012-9ulf77d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-9ulf77d",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "configuration.getTypeAliasRegistry().registerAlias(Author.class);"
				}
			]
		},
		{
			"ID": "20211218234012-22bmn7s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-22bmn7s",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "configuration.addMapper(BoundBlogMapper.class);"
				}
			]
		},
		{
			"ID": "20211218234012-nt6n6pf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-nt6n6pf",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "configuration.addMapper(BoundAuthorMapper.class);"
				}
			]
		},
		{
			"ID": "20211218234012-idwwvi4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-idwwvi4",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder();"
				}
			]
		},
		{
			"ID": "20211218234012-chtw7bx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-chtw7bx",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SqlSessionFactory factory = builder.build(configuration);"
				}
			]
		},
		{
			"ID": "20211218234012-9dlv7x9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-9dlv7x9",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "现在你就获得一个可以用来创建 SqlSession 实例的 SqlSessionFactory 了。"
				}
			]
		},
		{
			"ID": "20211218234012-34avurx",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20211218234012-34avurx",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SqlSessionFactory"
				}
			]
		},
		{
			"ID": "20211218234012-1trjwlo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-1trjwlo",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SqlSessionFactory 有六个方法创建 SqlSession 实例。通常来说，当你选择其中一个方法时，你需要考虑以下几点："
				}
			]
		},
		{
			"ID": "20211218234012-ire6o04",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20211218234012-ire6o04",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"ID": "20211218234012-qi8jgtc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211218234012-qi8jgtc"
					},
					"Children": [
						{
							"ID": "20211218234012-4ew4rh9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211218234012-4ew4rh9"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "事务处理：你希望在 session 作用域中使用事务作用域，还是使用自动提交（auto-commit）？（对很多数据库和/或 JDBC 驱动来说，等同于关闭事务支持）"
								}
							]
						}
					]
				},
				{
					"ID": "20211218234012-osxjzhg",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211218234012-osxjzhg"
					},
					"Children": [
						{
							"ID": "20211218234012-6gsjfvr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211218234012-6gsjfvr"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "数据库连接：你希望 MyBatis 帮你从已配置的数据源获取连接，还是使用自己提供的连接？"
								}
							]
						}
					]
				},
				{
					"ID": "20211218234012-hzhzhpb",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211218234012-hzhzhpb"
					},
					"Children": [
						{
							"ID": "20211218234012-blogdh2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211218234012-blogdh2"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "语句执行：你希望 MyBatis 复用 PreparedStatement 和/或批量更新语句（包括插入语句和删除语句）吗？"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211218234012-v2dw7xa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-v2dw7xa",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基于以上需求，有下列已重载的多个 openSession() 方法供使用。"
				}
			]
		},
		{
			"ID": "20211218234012-dzvf2dr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-dzvf2dr",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SqlSession openSession()"
				}
			]
		},
		{
			"ID": "20211218234012-dehfty6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-dehfty6",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SqlSession openSession(boolean autoCommit)"
				}
			]
		},
		{
			"ID": "20211218234012-9jbcua1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-9jbcua1",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SqlSession openSession(Connection connection)"
				}
			]
		},
		{
			"ID": "20211218234012-egovvv6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-egovvv6",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SqlSession openSession(TransactionIsolationLevel level)"
				}
			]
		},
		{
			"ID": "20211218234012-49vovpf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-49vovpf",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SqlSession openSession(ExecutorType execType, TransactionIsolationLevel level)"
				}
			]
		},
		{
			"ID": "20211218234012-mq1jwxe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-mq1jwxe",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SqlSession openSession(ExecutorType execType)"
				}
			]
		},
		{
			"ID": "20211218234012-fy1ngwk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-fy1ngwk",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SqlSession openSession(ExecutorType execType, boolean autoCommit)"
				}
			]
		},
		{
			"ID": "20211218234012-d9mal69",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-d9mal69",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SqlSession openSession(ExecutorType execType, Connection connection)"
				}
			]
		},
		{
			"ID": "20211218234012-ci0uml0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-ci0uml0",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Configuration getConfiguration();"
				}
			]
		},
		{
			"ID": "20211218234012-dp18z6m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-dp18z6m",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "默认的 openSession() 方法没有参数，它会创建具备如下特性的 SqlSession："
				}
			]
		},
		{
			"ID": "20211218234012-rxqvlwt",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20211218234012-rxqvlwt",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"ID": "20211218234012-3lnsass",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211218234012-3lnsass"
					},
					"Children": [
						{
							"ID": "20211218234012-s71egcz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211218234012-s71egcz"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "事务作用域将会开启（也就是不自动提交）。"
								}
							]
						}
					]
				},
				{
					"ID": "20211218234012-9i48f1p",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211218234012-9i48f1p"
					},
					"Children": [
						{
							"ID": "20211218234012-vu1xcix",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211218234012-vu1xcix"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "将由当前环境配置的 DataSource 实例中获取 Connection 对象。"
								}
							]
						}
					]
				},
				{
					"ID": "20211218234012-0zivnwx",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211218234012-0zivnwx"
					},
					"Children": [
						{
							"ID": "20211218234012-dzy1roh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211218234012-dzy1roh"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "事务隔离级别将会使用驱动或数据源的默认设置。"
								}
							]
						}
					]
				},
				{
					"ID": "20211218234012-qer2yer",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211218234012-qer2yer"
					},
					"Children": [
						{
							"ID": "20211218234012-5kcp33k",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211218234012-5kcp33k"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "预处理语句不会被复用，也不会批量处理更新。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211218234012-80zmrvh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-80zmrvh",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "相信你已经能从方法签名中知道这些方法的区别。向 autoCommit 可选参数传递 true 值即可开启自动提交功能。若要使用自己的 Connection 实例，传递一个 Connection 实例给 connection 参数即可。注意，我们没有提供同时设置 Connection 和 autoCommit 的方法，这是因为 MyBatis 会依据传入的 Connection 来决定是否启用 autoCommit。对于事务隔离级别，MyBatis 使用了一个 Java 枚举包装器来表示，称为 TransactionIsolationLevel，事务隔离级别支持 JDBC 的五个隔离级别（NONE、READ_UNCOMMITTED、READ_COMMITTED、REPEATABLE_READ 和 SERIALIZABLE），并且与预期的行为一致。"
				}
			]
		},
		{
			"ID": "20211218234012-bqp99wm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-bqp99wm",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "你可能对 ExecutorType 参数感到陌生。这个枚举类型定义了三个值:"
				}
			]
		},
		{
			"ID": "20211218234012-lclq6da",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20211218234012-lclq6da",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"ID": "20211218234012-atzbi7k",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211218234012-atzbi7k"
					},
					"Children": [
						{
							"ID": "20211218234012-0gy9unj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211218234012-0gy9unj"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ExecutorType.SIMPLE：该类型的执行器没有特别的行为。它为每个语句的执行创建一个新的预处理语句。"
								}
							]
						}
					]
				},
				{
					"ID": "20211218234012-hym97lz",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211218234012-hym97lz"
					},
					"Children": [
						{
							"ID": "20211218234012-pv7squ6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211218234012-pv7squ6"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ExecutorType.REUSE：该类型的执行器会复用预处理语句。"
								}
							]
						}
					]
				},
				{
					"ID": "20211218234012-gx1cjnx",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211218234012-gx1cjnx"
					},
					"Children": [
						{
							"ID": "20211218234012-8gb9cwy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211218234012-8gb9cwy"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ExecutorType.BATCH：该类型的执行器会批量执行所有更新语句，如果 SELECT 在多个更新中间执行，将在必要时将多条更新语句分隔开来，以方便理解。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211218234012-vavgb1t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-vavgb1t",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "提示 在 SqlSessionFactory 中还有一个方法我们没有提及，就是 getConfiguration()。这个方法会返回一个 Configuration 实例，你可以在运行时使用它来检查 MyBatis 的配置。"
				}
			]
		},
		{
			"ID": "20211218234012-7p1mglv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-7p1mglv",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "提示 如果你使用过 MyBatis 的旧版本，可能还记得 session、事务和批量操作是相互独立的。在新版本中则不是这样。上述三者都包含在 session 作用域内。你不必分别处理事务或批量操作就能得到想要的全部效果。"
				}
			]
		},
		{
			"ID": "20211218234012-07ftzqu",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20211218234012-07ftzqu",
				"updated": "20211218234012"
			}
		},
		{
			"ID": "20211218234012-qz6x3zc",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20211218234012-qz6x3zc",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SqlSession"
				}
			]
		},
		{
			"ID": "20211218234012-wnapixb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-wnapixb",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "正如之前所提到的，SqlSession 在 MyBatis 中是非常强大的一个类。它包含了所有执行语句、提交或回滚事务以及获取映射器实例的方法。"
				}
			]
		},
		{
			"ID": "20211218234012-kds9kfb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-kds9kfb",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SqlSession 类的方法超过了 20 个，为了方便理解，我们将它们分成几种组别。"
				}
			]
		},
		{
			"ID": "20211218234012-50sxymz",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20211218234012-50sxymz",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "语句执行方法"
				}
			]
		},
		{
			"ID": "20211218234012-q9flg85",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-q9flg85",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这些方法被用来执行定义在 SQL 映射 XML 文件中的 SELECT、INSERT、UPDATE 和 DELETE 语句。你可以通过名字快速了解它们的作用，每一方法都接受语句的 ID 以及参数对象，参数可以是原始类型（支持自动装箱或包装类）、JavaBean、POJO 或 Map。"
				}
			]
		},
		{
			"ID": "20211218234012-uyeqhtj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-uyeqhtj",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cT\u003e T selectOne(String statement, Object parameter)"
				}
			]
		},
		{
			"ID": "20211218234012-mz3jk25",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-mz3jk25",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cE\u003e List\u003cE\u003e selectList(String statement, Object parameter)"
				}
			]
		},
		{
			"ID": "20211218234012-ae13iwp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-ae13iwp",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cT\u003e Cursor\u003cT\u003e selectCursor(String statement, Object parameter)"
				}
			]
		},
		{
			"ID": "20211218234012-b36pztq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-b36pztq",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cK,V\u003e Map\u003cK,V\u003e selectMap(String statement, Object parameter, String mapKey)"
				}
			]
		},
		{
			"ID": "20211218234012-v4zhpgx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-v4zhpgx",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "int insert(String statement, Object parameter)"
				}
			]
		},
		{
			"ID": "20211218234012-2hthth6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-2hthth6",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "int update(String statement, Object parameter)"
				}
			]
		},
		{
			"ID": "20211218234012-9p2y04b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-9p2y04b",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "int delete(String statement, Object parameter)"
				}
			]
		},
		{
			"ID": "20211218234012-goxcvmg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-goxcvmg",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "selectOne 和 selectList 的不同仅仅是 selectOne 必须返回一个对象或 null 值。如果返回值多于一个，就会抛出异常。如果你不知道返回对象会有多少，请使用 selectList。如果需要查看某个对象是否存在，最好的办法是查询一个 count 值（0 或 1）。selectMap 稍微特殊一点，它会将返回对象的其中一个属性作为 key 值，将对象作为 value 值，从而将多个结果集转为 Map 类型值。由于并不是所有语句都需要参数，所以这些方法都具有一个不需要参数的重载形式。"
				}
			]
		},
		{
			"ID": "20211218234012-bkq2mmv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-bkq2mmv",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "游标（Cursor）与列表（List）返回的结果相同，不同的是，游标借助迭代器实现了数据的惰性加载。"
				}
			]
		},
		{
			"ID": "20211218234012-flgwdn4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-flgwdn4",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "try (Cursor\u003cMyEntity\u003e entities = session.selectCursor(statement, param)) {"
				}
			]
		},
		{
			"ID": "20211218234012-d1bfzni",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-d1bfzni",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "for (MyEntity entity:entities) {"
				}
			]
		},
		{
			"ID": "20211218234012-l58uh9q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-l58uh9q",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "// 处理单个实体"
				}
			]
		},
		{
			"ID": "20211218234012-pnotn00",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-pnotn00",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "}}"
				}
			]
		},
		{
			"ID": "20211218234012-gx2l797",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-gx2l797",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "insert、update 以及 delete 方法返回的值表示受该语句影响的行数。"
				}
			]
		},
		{
			"ID": "20211218234012-p2gyhlu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-p2gyhlu",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cT\u003e T selectOne(String statement)"
				}
			]
		},
		{
			"ID": "20211218234012-20gcd6r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-20gcd6r",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cE\u003e List\u003cE\u003e selectList(String statement)"
				}
			]
		},
		{
			"ID": "20211218234012-8001oq6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-8001oq6",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cT\u003e Cursor\u003cT\u003e selectCursor(String statement)"
				}
			]
		},
		{
			"ID": "20211218234012-40op3vj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-40op3vj",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cK,V\u003e Map\u003cK,V\u003e selectMap(String statement, String mapKey)"
				}
			]
		},
		{
			"ID": "20211218234012-vmgheur",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-vmgheur",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "int insert(String statement)"
				}
			]
		},
		{
			"ID": "20211218234012-9nul71l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-9nul71l",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "int update(String statement)"
				}
			]
		},
		{
			"ID": "20211218234012-lg23cea",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-lg23cea",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "int delete(String statement)"
				}
			]
		},
		{
			"ID": "20211218234012-ll4ens3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-ll4ens3",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "最后，还有 select 方法的三个高级版本，它们允许你限制返回行数的范围，或是提供自定义结果处理逻辑，通常在数据集非常庞大的情形下使用。"
				}
			]
		},
		{
			"ID": "20211218234012-lisak1h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-lisak1h",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cE\u003e List\u003cE\u003e selectList (String statement, Object parameter, RowBounds rowBounds)"
				}
			]
		},
		{
			"ID": "20211218234012-12uat8u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-12uat8u",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cT\u003e Cursor\u003cT\u003e selectCursor(String statement, Object parameter, RowBounds rowBounds)"
				}
			]
		},
		{
			"ID": "20211218234012-7gbrycm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-7gbrycm",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cK,V\u003e Map\u003cK,V\u003e selectMap(String statement, Object parameter, String mapKey, RowBounds rowbounds)"
				}
			]
		},
		{
			"ID": "20211218234012-73aa3mg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-73aa3mg",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "void select (String statement, Object parameter, ResultHandler\u003cT\u003e handler)"
				}
			]
		},
		{
			"ID": "20211218234012-n5v71ms",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-n5v71ms",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "void select (String statement, Object parameter, RowBounds rowBounds, ResultHandler\u003cT\u003e handler)"
				}
			]
		},
		{
			"ID": "20211218234012-a22kfox",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-a22kfox",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "RowBounds 参数会告诉 MyBatis 略过指定数量的记录，并限制返回结果的数量。RowBounds 类的 offset 和 limit 值只有在构造函数时才能传入，其它时候是不能修改的。"
				}
			]
		},
		{
			"ID": "20211218234012-wp3my8a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-wp3my8a",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "int offset = 100;"
				}
			]
		},
		{
			"ID": "20211218234012-i8ukyf7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-i8ukyf7",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "int limit = 25;"
				}
			]
		},
		{
			"ID": "20211218234012-vznjw4a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-vznjw4a",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "RowBounds rowBounds = new RowBounds(offset, limit);"
				}
			]
		},
		{
			"ID": "20211218234012-3esrvev",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-3esrvev",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数据库驱动决定了略过记录时的查询效率。为了获得最佳的性能，建议将 ResultSet 类型设置为 SCROLL_SENSITIVE 或 SCROLL_INSENSITIVE（换句话说：不要使用 FORWARD_ONLY）。"
				}
			]
		},
		{
			"ID": "20211218234012-lfoxcqa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-lfoxcqa",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ResultHandler 参数允许自定义每行结果的处理过程。你可以将它添加到 List 中、创建 Map 和 Set，甚至丢弃每个返回值，只保留计算后的统计结果。你可以使用 ResultHandler 做很多事，这其实就是 MyBatis 构建 结果列表的内部实现办法。"
				}
			]
		},
		{
			"ID": "20211218234012-l8ixfdf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-l8ixfdf",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从版本 3.4.6 开始，ResultHandler 会在存储过程的 REFCURSOR 输出参数中传递使用的 CALLABLE 语句。"
				}
			]
		},
		{
			"ID": "20211218234012-u1oudwr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-u1oudwr",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "它的接口很简单："
				}
			]
		},
		{
			"ID": "20211218234012-lgi2rtb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-lgi2rtb",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "package org.apache.ibatis.session;public interface ResultHandler\u003cT\u003e {"
				}
			]
		},
		{
			"ID": "20211218234012-dws7whc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-dws7whc",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "void handleResult(ResultContext\u003c? extends T\u003e context);}"
				}
			]
		},
		{
			"ID": "20211218234012-egyhjte",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-egyhjte",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ResultContext 参数允许你访问结果对象和当前已被创建的对象数目，另外还提供了一个返回值为 Boolean 的 stop 方法，你可以使用此 stop 方法来停止 MyBatis 加载更多的结果。"
				}
			]
		},
		{
			"ID": "20211218234012-8icr7vw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-8icr7vw",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用 ResultHandler 的时候需要注意以下两个限制："
				}
			]
		},
		{
			"ID": "20211218234012-r34zpb3",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20211218234012-r34zpb3",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"ID": "20211218234012-ui6dm15",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211218234012-ui6dm15"
					},
					"Children": [
						{
							"ID": "20211218234012-vf316tk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211218234012-vf316tk"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用带 ResultHandler 参数的方法时，收到的数据不会被缓存。"
								}
							]
						}
					]
				},
				{
					"ID": "20211218234012-97naavf",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211218234012-97naavf"
					},
					"Children": [
						{
							"ID": "20211218234012-9ue9sum",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211218234012-9ue9sum"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当使用高级的结果映射集（resultMap）时，MyBatis 很可能需要数行结果来构造一个对象。如果你使用了 ResultHandler，你可能会接收到关联（association）或者集合（collection）中尚未被完整填充的对象。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211218234012-ja0nh56",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20211218234012-ja0nh56",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "立即批量更新方法"
				}
			]
		},
		{
			"ID": "20211218234012-43ph2lo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-43ph2lo",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当你将 ExecutorType 设置为 ExecutorType.BATCH 时，可以使用这个方法清除（执行）缓存在 JDBC 驱动类中的批量更新语句。"
				}
			]
		},
		{
			"ID": "20211218234012-2rjetw6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-2rjetw6",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "List\u003cBatchResult\u003e flushStatements()"
				}
			]
		},
		{
			"ID": "20211218234012-kagw4wj",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20211218234012-kagw4wj",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "事务控制方法"
				}
			]
		},
		{
			"ID": "20211218234012-igqatf0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-igqatf0",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "有四个方法用来控制事务作用域。当然，如果你已经设置了自动提交或你使用了外部事务管理器，这些方法就没什么作用了。然而，如果你正在使用由 Connection 实例控制的 JDBC 事务管理器，那么这四个方法就会派上用场："
				}
			]
		},
		{
			"ID": "20211218234012-ny3x7uz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-ny3x7uz",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "void commit()"
				}
			]
		},
		{
			"ID": "20211218234012-inhloqs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-inhloqs",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "void commit(boolean force)"
				}
			]
		},
		{
			"ID": "20211218234012-wnpgn3l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-wnpgn3l",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "void rollback()"
				}
			]
		},
		{
			"ID": "20211218234012-dqmhx31",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-dqmhx31",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "void rollback(boolean force)"
				}
			]
		},
		{
			"ID": "20211218234012-poobark",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-poobark",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "默认情况下 MyBatis 不会自动提交事务，除非它侦测到调用了插入、更新或删除方法改变了数据库。如果你没有使用这些方法提交修改，那么你可以在 commit 和 rollback 方法参数中传入 true 值，来保证事务被正常提交（注意，在自动提交模式或者使用了外部事务管理器的情况下，设置 force 值对 session 无效）。大部分情况下你无需调用 rollback()，因为 MyBatis 会在你没有调用 commit 时替你完成回滚操作。不过，当你要在一个可能多次提交或回滚的 session 中详细控制事务，回滚操作就派上用场了。"
				}
			]
		},
		{
			"ID": "20211218234012-y75w1yp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-y75w1yp",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "提示 MyBatis-Spring 和 MyBatis-Guice 提供了声明式事务处理，所以如果你在使用 Mybatis 的同时使用了 Spring 或者 Guice，请参考它们的手册以获取更多的内容。"
				}
			]
		},
		{
			"ID": "20211218234012-uyaosgz",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20211218234012-uyaosgz",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本地缓存"
				}
			]
		},
		{
			"ID": "20211218234012-pbd0d3d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-pbd0d3d",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Mybatis 使用到了两种缓存：本地缓存（local cache）和二级缓存（second level cache）。"
				}
			]
		},
		{
			"ID": "20211218234012-ra6m6sx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-ra6m6sx",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "每当一个新 session 被创建，MyBatis 就会创建一个与之相关联的本地缓存。任何在 session 执行过的查询结果都会被保存在本地缓存中，所以，当再次执行参数相同的相同查询时，就不需要实际查询数据库了。本地缓存将会在做出修改、事务提交或回滚，以及关闭 session 时清空。"
				}
			]
		},
		{
			"ID": "20211218234012-z7rdcgr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-z7rdcgr",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "默认情况下，本地缓存数据的生命周期等同于整个 session 的周期。由于缓存会被用来解决循环引用问题和加快重复嵌套查询的速度，所以无法将其完全禁用。但是你可以通过设置 localCacheScope=STATEMENT 来只在语句执行时使用缓存。"
				}
			]
		},
		{
			"ID": "20211218234012-yotlvdx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-yotlvdx",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意，如果 localCacheScope 被设置为 SESSION，对于某个对象，MyBatis 将返回在本地缓存中唯一对象的引用。对返回的对象（例如 list）做出的任何修改将会影响本地缓存的内容，进而将会影响到在本次 session 中从缓存返回的值。因此，不要对 MyBatis 所返回的对象作出更改，以防后患。"
				}
			]
		},
		{
			"ID": "20211218234012-atm44lp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-atm44lp",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "你可以随时调用以下方法来清空本地缓存："
				}
			]
		},
		{
			"ID": "20211218234012-tllrptz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-tllrptz",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "void clearCache()"
				}
			]
		},
		{
			"ID": "20211218234012-n45vvca",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20211218234012-n45vvca",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "确保 SqlSession 被关闭"
				}
			]
		},
		{
			"ID": "20211218234012-z3ebgwx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-z3ebgwx",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "void close()"
				}
			]
		},
		{
			"ID": "20211218234012-mxgpzlq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-mxgpzlq",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于你打开的任何 session，你都要保证它们被妥善关闭，这很重要。保证妥善关闭的最佳代码模式是这样的："
				}
			]
		},
		{
			"ID": "20211218234012-e6dejxq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-e6dejxq",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SqlSession session = sqlSessionFactory.openSession();try (SqlSession session = sqlSessionFactory.openSession()) {"
				}
			]
		},
		{
			"ID": "20211218234012-yhxcdpg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-yhxcdpg",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "// 假设下面三行代码是你的业务逻辑"
				}
			]
		},
		{
			"ID": "20211218234012-z6n4h50",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-z6n4h50",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "session.insert(...);"
				}
			]
		},
		{
			"ID": "20211218234012-hnvwl8c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-hnvwl8c",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "session.update(...);"
				}
			]
		},
		{
			"ID": "20211218234012-notjrpe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-notjrpe",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "session.delete(...);"
				}
			]
		},
		{
			"ID": "20211218234012-eulmidk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-eulmidk",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "session.commit();}"
				}
			]
		},
		{
			"ID": "20211218234012-2j92lqv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-2j92lqv",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "提示 和 SqlSessionFactory 一样，你可以调用当前使用的 SqlSession 的 getConfiguration 方法来获得 Configuration 实例。"
				}
			]
		},
		{
			"ID": "20211218234012-bhagji1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-bhagji1",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Configuration getConfiguration()"
				}
			]
		},
		{
			"ID": "20211218234012-qm5cjmk",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20211218234012-qm5cjmk",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用映射器"
				}
			]
		},
		{
			"ID": "20211218234012-34s66cm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-34s66cm",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cT\u003e T getMapper(Class\u003cT\u003e type)"
				}
			]
		},
		{
			"ID": "20211218234012-0u5vld8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-0u5vld8",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上述的各个 insert、update、delete 和 select 方法都很强大，但也有些繁琐，它们并不符合类型安全，对你的 IDE 和单元测试也不是那么友好。因此，使用映射器类来执行映射语句是更常见的做法。"
				}
			]
		},
		{
			"ID": "20211218234012-hvx5kld",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-hvx5kld",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们已经在之前的入门章节中见到过一个使用映射器的示例。一个映射器类就是一个仅需声明与 SqlSession 方法相匹配方法的接口。下面的示例展示了一些方法签名以及它们是如何映射到 SqlSession 上的。"
				}
			]
		},
		{
			"ID": "20211218234012-osorxnz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-osorxnz",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public interface AuthorMapper {"
				}
			]
		},
		{
			"ID": "20211218234012-2vjutpf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-2vjutpf",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "// (Author) selectOne(\"selectAuthor\",5);"
				}
			]
		},
		{
			"ID": "20211218234012-6h8ck92",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-6h8ck92",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Author selectAuthor(int id);"
				}
			]
		},
		{
			"ID": "20211218234012-tj61dwj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-tj61dwj",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "// (List\u003cAuthor\u003e) selectList(“selectAuthors”)"
				}
			]
		},
		{
			"ID": "20211218234012-gmk85qz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-gmk85qz",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "List\u003cAuthor\u003e selectAuthors();"
				}
			]
		},
		{
			"ID": "20211218234012-0601u1z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-0601u1z",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "// (Map\u003cInteger,Author\u003e) selectMap(\"selectAuthors\", \"id\")"
				}
			]
		},
		{
			"ID": "20211218234012-ptq41lw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-ptq41lw",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@MapKey(\"id\")"
				}
			]
		},
		{
			"ID": "20211218234012-0rjm571",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-0rjm571",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Map\u003cInteger, Author\u003e selectAuthors();"
				}
			]
		},
		{
			"ID": "20211218234012-2m7iama",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-2m7iama",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "// insert(\"insertAuthor\", author)"
				}
			]
		},
		{
			"ID": "20211218234012-j9q16rq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-j9q16rq",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "int insertAuthor(Author author);"
				}
			]
		},
		{
			"ID": "20211218234012-g4f3ybf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-g4f3ybf",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "// updateAuthor(\"updateAuthor\", author)"
				}
			]
		},
		{
			"ID": "20211218234012-tq9w3v3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-tq9w3v3",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "int updateAuthor(Author author);"
				}
			]
		},
		{
			"ID": "20211218234012-njpkyjh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-njpkyjh",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "// delete(\"deleteAuthor\",5)"
				}
			]
		},
		{
			"ID": "20211218234012-pxzpj3q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-pxzpj3q",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "int deleteAuthor(int id);}"
				}
			]
		},
		{
			"ID": "20211218234012-4kvkd4u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-4kvkd4u",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "总之，每个映射器方法签名应该匹配相关联的 SqlSession 方法，字符串参数 ID 无需匹配。而是由方法名匹配映射语句的 ID。"
				}
			]
		},
		{
			"ID": "20211218234012-m3eu7tu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-m3eu7tu",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此外，返回类型必须匹配期望的结果类型，返回单个值时，返回类型应该是返回值的类，返回多个值时，则为数组或集合类，另外也可以是游标（Cursor）。所有常用的类型都是支持的，包括：原始类型、Map、POJO 和 JavaBean。"
				}
			]
		},
		{
			"ID": "20211218234012-nf03p7w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-nf03p7w",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "提示 映射器接口不需要去实现任何接口或继承自任何类。只要方法签名可以被用来唯一识别对应的映射语句就可以了。"
				}
			]
		},
		{
			"ID": "20211218234012-d5ub4vu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-d5ub4vu",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "提示 映射器接口可以继承自其他接口。在使用 XML 来绑定映射器接口时，保证语句处于合适的命名空间中即可。唯一的限制是，不能在两个具有继承关系的接口中拥有相同的方法签名（这是潜在的危险做法，不可取）。"
				}
			]
		},
		{
			"ID": "20211218234012-hzkuuas",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-hzkuuas",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "你可以传递多个参数给一个映射器方法。在多个参数的情况下，默认它们将会以 param 加上它们在参数列表中的位置来命名，比如："
				},
				{
					"Type": "NodeTag",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeTagOpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "{param1}、"
						},
						{
							"Type": "NodeTagCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "{param2}等。如果你想（在有多个参数时）自定义参数的名称，那么你可以在参数上使用 @Param(\"paramName\") 注解。"
				}
			]
		},
		{
			"ID": "20211218234012-uc7eda8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-uc7eda8",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "你也可以给方法传递一个 RowBounds 实例来限制查询结果。"
				}
			]
		},
		{
			"ID": "20211218234012-wf3px2i",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20211218234012-wf3px2i",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "映射器注解"
				}
			]
		},
		{
			"ID": "20211218234012-krdy5go",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-krdy5go",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "设计初期的 MyBatis 是一个 XML 驱动的框架。配置信息是基于 XML 的，映射语句也是定义在 XML 中的。而在 MyBatis 3 中，我们提供了其它的配置方式。MyBatis 3 构建在全面且强大的基于 Java 语言的配置 API 之上。它是 XML 和注解配置的基础。注解提供了一种简单且低成本的方式来实现简单的映射语句。"
				}
			]
		},
		{
			"ID": "20211218234012-cesydw1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-cesydw1",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "提示 不幸的是，Java 注解的表达能力和灵活性十分有限。尽管我们花了很多时间在调查、设计和试验上，但最强大的 MyBatis 映射并不能用注解来构建——我们真没开玩笑。而 C# 属性就没有这些限制，因此 "
				},
				{
					"Type": "NodeLink",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "MyBatis.NET"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "http://mybatis.net/"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 的配置会比 XML 有更大的选择余地。虽说如此，基于 Java 注解的配置还是有它的好处的。"
				}
			]
		},
		{
			"ID": "20211218234012-7m9r58d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-7m9r58d",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注解如下表所示："
				}
			]
		},
		{
			"ID": "20211218234012-i4jl1yx",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0,
				0,
				0
			],
			"Properties": {
				"id": "20211218234012-i4jl1yx",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 70,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "注解"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 10,
									"TableCellContentMaxWidth": 10,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "使用对象"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 14,
									"TableCellContentMaxWidth": 42,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "XML 等价形式"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 730,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "描述"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 17,
							"TableCellContentMaxWidth": 70,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@CacheNamespace"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 4,
							"TableCellContentMaxWidth": 10,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "类"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 9,
							"TableCellContentMaxWidth": 42,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "\u003ccache\u003e"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 123,
							"TableCellContentMaxWidth": 730,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "为给定的命名空间（比如类）配置缓存。属性：implemetation、eviction、flushInterval、size、readWrite、blocking、properties。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 11,
							"TableCellContentMaxWidth": 70,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@Property"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 5,
							"TableCellContentMaxWidth": 10,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "N/A"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 12,
							"TableCellContentMaxWidth": 42,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "\u003cproperty\u003e"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 137,
							"TableCellContentMaxWidth": 730,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "指定参数值或占位符（placeholder）（该占位符能被mybatis-config.xml内的配置属性替换）。属性：name、value。（仅在 MyBatis 3.4.2 以上可用）"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 20,
							"TableCellContentMaxWidth": 70,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@CacheNamespaceRef"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 4,
							"TableCellContentMaxWidth": 10,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "类"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 12,
							"TableCellContentMaxWidth": 42,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "\u003ccacheRef\u003e"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 371,
							"TableCellContentMaxWidth": 730,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "引用另外一个命名空间的缓存以供使用。注意，即使共享相同的全限定类名，在 XML 映射文件中声明的缓存仍被识别为一个独立的命名空间。属性：value、name。如果你使用了这个注解，你应设置value或者name属性的其中一个。value属性用于指定能够表示该命名空间的 Java 类型（命名空间名就是该 Java 类型的全限定类名），name属性（这个属性仅在 MyBatis 3.4.2 以上可用）则直接指定了命名空间的名字。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 18,
							"TableCellContentMaxWidth": 70,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@ConstructorArgs"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 10,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "方法"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 15,
							"TableCellContentMaxWidth": 42,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "\u003cconstructor\u003e"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 76,
							"TableCellContentMaxWidth": 730,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "收集一组结果以传递给一个结果对象的构造方法。属性：value，它是一个Arg数组。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 70,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@Arg"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 5,
							"TableCellContentMaxWidth": 10,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "N/A"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 18,
							"TableCellContentMaxWidth": 42,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "* \u003carg\u003e* \u003cidArg\u003e"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 250,
							"TableCellContentMaxWidth": 730,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ConstructorArgs 集合的一部分，代表一个构造方法参数。属性：id、column、javaType、jdbcType、typeHandler、select、resultMap。id 属性和 XML 元素\u003cidArg\u003e相似，它是一个布尔值，表示该属性是否用于唯一标识和比较对象。从版本 3.5.4 开始，该注解变为可重复注解。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 20,
							"TableCellContentMaxWidth": 70,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@TypeDiscriminator"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 10,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "方法"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 17,
							"TableCellContentMaxWidth": 42,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "\u003cdiscriminator\u003e"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 124,
							"TableCellContentMaxWidth": 730,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "决定使用何种结果映射的一组取值（case）。属性：column、javaType、jdbcType、typeHandler、cases。cases 属性是一个Case的数组。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 7,
							"TableCellContentMaxWidth": 70,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@Case"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 5,
							"TableCellContentMaxWidth": 10,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "N/A"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 8,
							"TableCellContentMaxWidth": 42,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "\u003ccase\u003e"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 167,
							"TableCellContentMaxWidth": 730,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "表示某个值的一个取值以及该取值对应的映射。属性：value、type、results。results 属性是一个Results的数组，因此这个注解实际上和ResultMap很相似，由下面的Results注解指定。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 10,
							"TableCellContentMaxWidth": 70,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@Results"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 10,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "方法"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 13,
							"TableCellContentMaxWidth": 42,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "\u003cresultMap\u003e"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 190,
							"TableCellContentMaxWidth": 730,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一组结果映射，指定了对某个特定结果列，映射到某个属性或字段的方式。属性：value、id。value 属性是一个Result注解的数组。而 id 属性则是结果映射的名称。从版本 3.5.4 开始，该注解变为可重复注解。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 9,
							"TableCellContentMaxWidth": 70,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@Result"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 5,
							"TableCellContentMaxWidth": 10,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "N/A"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 18,
							"TableCellContentMaxWidth": 42,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "* \u003cresult\u003e* \u003cid\u003e"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 301,
							"TableCellContentMaxWidth": 730,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在列和属性或字段之间的单个结果映射。属性：id、column、javaType、jdbcType、typeHandler、one、many。id 属性和 XML 元素\u003cid\u003e相似，它是一个布尔值，表示该属性是否用于唯一标识和比较对象。one 属性是一个关联，和\u003cassociation\u003e类似，而 many 属性则是集合关联，和\u003ccollection\u003e类似。这样命名是为了避免产生名称冲突。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 70,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@One"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 5,
							"TableCellContentMaxWidth": 10,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "N/A"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 15,
							"TableCellContentMaxWidth": 42,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "\u003cassociation\u003e"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 230,
							"TableCellContentMaxWidth": 730,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "复杂类型的单个属性映射。属性：select，指定可加载合适类型实例的映射语句（也就是映射器方法）全限定名；fetchType，指定在该映射中覆盖全局配置参数lazyLoadingEnabled。提示注解 API 不支持联合映射。这是由于 Java 注解不允许产生循环引用。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 7,
							"TableCellContentMaxWidth": 70,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@Many"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 5,
							"TableCellContentMaxWidth": 10,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "N/A"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 14,
							"TableCellContentMaxWidth": 42,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "\u003ccollection\u003e"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 234,
							"TableCellContentMaxWidth": 730,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "复杂类型的集合属性映射。属性：select，指定可加载合适类型实例集合的映射语句（也就是映射器方法）全限定名；fetchType，指定在该映射中覆盖全局配置参数lazyLoadingEnabled。提示注解 API 不支持联合映射。这是由于 Java 注解不允许产生循环引用。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 9,
							"TableCellContentMaxWidth": 70,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@MapKey"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 10,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "方法"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 4,
							"TableCellContentMaxWidth": 42,
							"Children": [
								{
									"Type": "NodeBr",
									"Data": "br"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 138,
							"TableCellContentMaxWidth": 730,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "供返回值为 Map 的方法使用的注解。它使用对象的某个属性作为 key，将对象 List 转化为 Map。属性：value，指定作为 Map 的 key 值的对象属性名。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 10,
							"TableCellContentMaxWidth": 70,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@Options"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 10,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "方法"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 16,
							"TableCellContentMaxWidth": 42,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "映射语句的属性"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 642,
							"TableCellContentMaxWidth": 730,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "该注解允许你指定大部分开关和配置选项，它们通常在映射语句上作为属性出现。与在注解上提供大量的属性相比，Options注解提供了一致、清晰的方式来指定选项。属性：useCache=true、flushCache=FlushCachePolicy.DEFAULT、resultSetType=DEFAULT、statementType=PREPARED、fetchSize=-1、timeout=-1、useGeneratedKeys=false、keyProperty=\"\"、keyColumn=\"\"、resultSets=\"\"。注意，Java 注解无法指定null值。因此，一旦你使用了Options注解，你的语句就会被上述属性的默认值所影响。要注意避免默认值带来的非预期行为。"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "注意：keyColumn属性只在某些数据库中有效（如 Oracle、PostgreSQL 等）。要了解更多关于keyColumn和keyProperty可选值信息，请查看“insert, update 和 delete”一节。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 38,
							"TableCellContentMaxWidth": 70,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "* @Insert* @Update* @Delete* @Select"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 10,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "方法"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 42,
							"TableCellContentMaxWidth": 42,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "* \u003cinsert\u003e* \u003cupdate\u003e* \u003cdelete\u003e* \u003cselect\u003e"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 326,
							"TableCellContentMaxWidth": 730,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "每个注解分别代表将会被执行的 SQL 语句。它们用字符串数组（或单个字符串）作为参数。如果传递的是字符串数组，字符串数组会被连接成单个完整的字符串，每个字符串之间加入一个空格。这有效地避免了用 Java 代码构建 SQL 语句时产生的“丢失空格”问题。当然，你也可以提前手动连接好字符串。属性：value，指定用来组成单个 SQL 语句的字符串数组。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 70,
							"TableCellContentMaxWidth": 70,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "* @InsertProvider* @UpdateProvider* @DeleteProvider* @SelectProvider"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 10,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "方法"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 42,
							"TableCellContentMaxWidth": 42,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "* \u003cinsert\u003e* \u003cupdate\u003e* \u003cdelete\u003e* \u003cselect\u003e"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 730,
							"TableCellContentMaxWidth": 730,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "允许构建动态 SQL。这些备选的 SQL 注解允许你指定返回 SQL 语句的类和方法，以供运行时执行。（从 MyBatis 3.4.6 开始，可以使用CharSequence代替String来作为返回类型）。当执行映射语句时，MyBatis 会实例化注解指定的类，并调用注解指定的方法。你可以通过ProviderContext传递映射方法接收到的参数、\"Mapper interface type\" 和 \"Mapper method\"（仅在 MyBatis 3.4.5 以上支持）作为参数。（MyBatis 3.4 以上支持传入多个参数）属性：type、method。type属性用于指定类名。method用于指定该类的方法名（从版本 3.5.1 开始，可以省略method属性，MyBatis 将会使用ProviderMethodResolver接口解析方法的具体实现。如果解析失败，MyBatis 将会使用名为provideSql的降级实现）。提示接下来的“SQL 语句构建器”一章将会讨论该话题，以帮助你以更清晰、更便于阅读的方式构建动态 SQL。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 8,
							"TableCellContentMaxWidth": 70,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@Param"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 10,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "参数"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 5,
							"TableCellContentMaxWidth": 42,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "N/A"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 224,
							"TableCellContentMaxWidth": 730,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果你的映射方法接受多个参数，就可以使用这个注解自定义每个参数的名字。否则在默认情况下，除RowBounds以外的参数会以 \"param\" 加参数位置被命名。例如"
								},
								{
									"Type": "NodeTag",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeTagOpenMarker"
										},
										{
											"Type": "NodeText",
											"Data": "{param1},"
										},
										{
											"Type": "NodeTagCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "{param2}。如果使用了@Param(\"person\")，参数就会被命名为#{person}。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 12,
							"TableCellContentMaxWidth": 70,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@SelectKey"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 10,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "方法"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 13,
							"TableCellContentMaxWidth": 42,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "\u003cselectKey\u003e"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 647,
							"TableCellContentMaxWidth": 730,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "这个注解的功能与\u003cselectKey\u003e标签完全一致。该注解只能在@Insert或@InsertProvider或@Update或@UpdateProvider标注的方法上使用，否则将会被忽略。如果标注了@SelectKey注解，MyBatis 将会忽略掉由@Options注解所设置的生成主键或设置（configuration）属性。属性：statement以字符串数组形式指定将会被执行的 SQL 语句，keyProperty指定作为参数传入的对象对应属性的名称，该属性将会更新成新的值，before可以指定为true或false以指明 SQL 语句应被在插入语句的之前还是之后执行。resultType则指定keyProperty的 Java 类型。statementType则用于选择语句类型，可以选择STATEMENT、PREPARED或CALLABLE之一，它们分别对应于Statement、PreparedStatement和CallableStatement。默认值是PREPARED。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 12,
							"TableCellContentMaxWidth": 70,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@ResultMap"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 10,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "方法"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 5,
							"TableCellContentMaxWidth": 42,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "N/A"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 224,
							"TableCellContentMaxWidth": 730,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "这个注解为@Select或者@SelectProvider注解指定 XML 映射中\u003cresultMap\u003e元素的 id。这使得注解的 select 可以复用已在 XML 中定义的 ResultMap。如果标注的 select 注解中存在@Results或者@ConstructorArgs注解，这两个注解将被此注解覆盖。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 13,
							"TableCellContentMaxWidth": 70,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@ResultType"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 10,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "方法"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 5,
							"TableCellContentMaxWidth": 42,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "N/A"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 439,
							"TableCellContentMaxWidth": 730,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在使用了结果处理器的情况下，需要使用此注解。由于此时的返回类型为 void，所以 Mybatis 需要有一种方法来判断每一行返回的对象类型。如果在 XML 有对应的结果映射，请使用@ResultMap注解。如果结果类型在 XML 的\u003cselect\u003e元素中指定了，就不需要使用其它注解了。否则就需要使用此注解。比如，如果一个标注了 @Select 的方法想要使用结果处理器，那么它的返回类型必须是 void，并且必须使用这个注解（或者 @ResultMap）。这个注解仅在方法返回类型是 void 的情况下生效。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 8,
							"TableCellContentMaxWidth": 70,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@Flush"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 10,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "方法"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 5,
							"TableCellContentMaxWidth": 42,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "N/A"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 116,
							"TableCellContentMaxWidth": 730,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果使用了这个注解，定义在 Mapper 接口中的方法就能够调用SqlSession#flushStatements()方法。（Mybatis 3.3 以上可用）"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211218234012-7frrubp",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20211218234012-7frrubp",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "映射注解示例"
				}
			]
		},
		{
			"ID": "20211218234012-8m3hzdx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-8m3hzdx",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个例子展示了如何使用 @SelectKey 注解来在插入前读取数据库序列的值："
				}
			]
		},
		{
			"ID": "20211218234012-k9wb0wh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-k9wb0wh",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@Insert(\"insert into table3 (id, name) values(#{nameId}, #{name})\")"
				}
			]
		},
		{
			"ID": "20211218234012-58cta0m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-58cta0m",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@SelectKey(statement=\"call next value for TestSequence\", keyProperty=\"nameId\", before=true,resultType=int.class)"
				}
			]
		},
		{
			"ID": "20211218234012-e1gpqqs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-e1gpqqs",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "int insertTable3(Name name);"
				}
			]
		},
		{
			"ID": "20211218234012-na0g376",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-na0g376",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个例子展示了如何使用 @SelectKey 注解来在插入后读取数据库自增列的值："
				}
			]
		},
		{
			"ID": "20211218234012-of6q21k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-of6q21k",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@Insert(\"insert into table2 (name) values(#{name})\")@SelectKey(statement=\"call identity()\",keyProperty=\"nameId\", before=false, resultType=int.class)"
				}
			]
		},
		{
			"ID": "20211218234012-7norypc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-7norypc",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "int insertTable2(Name name);"
				}
			]
		},
		{
			"ID": "20211218234012-c430fh3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-c430fh3",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个例子展示了如何使用 @Flush 注解来调用 SqlSession#flushStatements()："
				}
			]
		},
		{
			"ID": "20211218234012-til779a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-til779a",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@FlushList\u003cBatchResult\u003e flush();"
				}
			]
		},
		{
			"ID": "20211218234012-anprkj7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-anprkj7",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这些例子展示了如何通过指定 @Result 的 id 属性来命名结果集："
				}
			]
		},
		{
			"ID": "20211218234012-4mg9ipg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-4mg9ipg",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@Results(id = \"userResult\", value = {"
				}
			]
		},
		{
			"ID": "20211218234012-0uz7sr3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-0uz7sr3",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@Result(property = \"id\", column = \"uid\", id = true),"
				}
			]
		},
		{
			"ID": "20211218234012-3tpy2mm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-3tpy2mm",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@Result(property = \"firstName\", column = \"first_name\"),"
				}
			]
		},
		{
			"ID": "20211218234012-h39mk9e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-h39mk9e",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@Result(property = \"lastName\", column = \"last_name\")})@Select(\"select * from users where id = #{id}\")User getUserById(Integer id);"
				}
			]
		},
		{
			"ID": "20211218234012-w8n99xe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-w8n99xe",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@Results(id = \"companyResults\")@ConstructorArgs({"
				}
			]
		},
		{
			"ID": "20211218234012-6rxxxb8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-6rxxxb8",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@Arg(column = \"cid\", javaType = Integer.class, id = true),"
				}
			]
		},
		{
			"ID": "20211218234012-699cuqo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-699cuqo",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@Arg(column = \"name\", javaType = String.class)})@Select(\"select * from company where id = #{id}\")Company getCompanyById(Integer id);"
				}
			]
		},
		{
			"ID": "20211218234012-ej6drik",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-ej6drik",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个例子展示了如何使用单个参数的 @SqlProvider 注解："
				}
			]
		},
		{
			"ID": "20211218234012-uu3hvce",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-uu3hvce",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@SelectProvider(type = UserSqlBuilder.class, method = \"buildGetUsersByName\")List\u003cUser\u003e getUsersByName(String name);"
				}
			]
		},
		{
			"ID": "20211218234012-dxbo7m4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-dxbo7m4",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "class UserSqlBuilder {"
				}
			]
		},
		{
			"ID": "20211218234012-vrno3zn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-vrno3zn",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public static String buildGetUsersByName(final String name) {"
				}
			]
		},
		{
			"ID": "20211218234012-rvpicpc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-rvpicpc",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "return new SQL(){{"
				}
			]
		},
		{
			"ID": "20211218234012-1ndopwc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-1ndopwc",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SELECT(\"*\");"
				}
			]
		},
		{
			"ID": "20211218234012-5bpm3ao",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-5bpm3ao",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "FROM(\"users\");"
				}
			]
		},
		{
			"ID": "20211218234012-v8ny5dx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-v8ny5dx",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "if (name != null) {"
				}
			]
		},
		{
			"ID": "20211218234012-h9lm84n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-h9lm84n",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "WHERE(\"name like #{value} || '%'\");"
				}
			]
		},
		{
			"ID": "20211218234012-yocoa2a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-yocoa2a",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "}"
				}
			]
		},
		{
			"ID": "20211218234012-90t5pub",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-90t5pub",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ORDER_BY(\"id\");"
				}
			]
		},
		{
			"ID": "20211218234012-shm54oo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-shm54oo",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "}}.toString();"
				}
			]
		},
		{
			"ID": "20211218234012-j2tf3zt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-j2tf3zt",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "}}"
				}
			]
		},
		{
			"ID": "20211218234012-2qde1mv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-2qde1mv",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个例子展示了如何使用多个参数的 @SqlProvider 注解："
				}
			]
		},
		{
			"ID": "20211218234012-o2fh3yz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-o2fh3yz",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@SelectProvider(type = UserSqlBuilder.class, method = \"buildGetUsersByName\")List\u003cUser\u003e getUsersByName("
				}
			]
		},
		{
			"ID": "20211218234012-bd6jjoc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-bd6jjoc",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@Param(\"name\") String name, @Param(\"orderByColumn\") String orderByColumn);"
				}
			]
		},
		{
			"ID": "20211218234012-p3hqmac",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-p3hqmac",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "class UserSqlBuilder {"
				}
			]
		},
		{
			"ID": "20211218234012-sirenji",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-sirenji",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "// 如果不使用 @Param，就应该定义与 mapper 方法相同的参数"
				}
			]
		},
		{
			"ID": "20211218234012-716r50h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-716r50h",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public static String buildGetUsersByName("
				}
			]
		},
		{
			"ID": "20211218234012-kaxlc4s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-kaxlc4s",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "final String name, final String orderByColumn) {"
				}
			]
		},
		{
			"ID": "20211218234012-x5zjb3b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-x5zjb3b",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "return new SQL(){{"
				}
			]
		},
		{
			"ID": "20211218234012-22jg9ve",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-22jg9ve",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SELECT(\"*\");"
				}
			]
		},
		{
			"ID": "20211218234012-9gl4pse",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-9gl4pse",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "FROM(\"users\");"
				}
			]
		},
		{
			"ID": "20211218234012-4ff54th",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-4ff54th",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "WHERE(\"name like #{name} || '%'\");"
				}
			]
		},
		{
			"ID": "20211218234012-1k8syq0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-1k8syq0",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ORDER_BY(orderByColumn);"
				}
			]
		},
		{
			"ID": "20211218234012-vkjcou7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-vkjcou7",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "}}.toString();"
				}
			]
		},
		{
			"ID": "20211218234012-mm10676",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-mm10676",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "}"
				}
			]
		},
		{
			"ID": "20211218234012-0q1iy0c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-0q1iy0c",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "// 如果使用 @Param，就可以只定义需要使用的参数"
				}
			]
		},
		{
			"ID": "20211218234012-jljqnjm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-jljqnjm",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public static String buildGetUsersByName(@Param(\"orderByColumn\") final String orderByColumn) {"
				}
			]
		},
		{
			"ID": "20211218234012-7pp3vmd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-7pp3vmd",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "return new SQL(){{"
				}
			]
		},
		{
			"ID": "20211218234012-y07auly",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-y07auly",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SELECT(\"*\");"
				}
			]
		},
		{
			"ID": "20211218234012-xju2044",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-xju2044",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "FROM(\"users\");"
				}
			]
		},
		{
			"ID": "20211218234012-oqqceun",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-oqqceun",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "WHERE(\"name like #{name} || '%'\");"
				}
			]
		},
		{
			"ID": "20211218234012-3dj3egf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-3dj3egf",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ORDER_BY(orderByColumn);"
				}
			]
		},
		{
			"ID": "20211218234012-h4x98tz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-h4x98tz",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "}}.toString();"
				}
			]
		},
		{
			"ID": "20211218234012-25lk338",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-25lk338",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "}}"
				}
			]
		},
		{
			"ID": "20211218234012-vx4peie",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-vx4peie",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以下例子展示了 ProviderMethodResolver（3.5.1 后可用）的默认实现使用方法："
				}
			]
		},
		{
			"ID": "20211218234012-i4l1o3x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-i4l1o3x",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@SelectProvider(UserSqlProvider.class)List\u003cUser\u003e getUsersByName(String name);"
				}
			]
		},
		{
			"ID": "20211218234012-62k9w7w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-62k9w7w",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "// 在你的 provider 类中实现 ProviderMethodResolver 接口class UserSqlProvider implements ProviderMethodResolver {"
				}
			]
		},
		{
			"ID": "20211218234012-fqvlzyx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-fqvlzyx",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "// 默认实现中，会将映射器方法的调用解析到实现的同名方法上"
				}
			]
		},
		{
			"ID": "20211218234012-6ddum68",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-6ddum68",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public static String getUsersByName(final String name) {"
				}
			]
		},
		{
			"ID": "20211218234012-van6kdo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-van6kdo",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "return new SQL(){{"
				}
			]
		},
		{
			"ID": "20211218234012-qdfsh69",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-qdfsh69",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SELECT(\"*\");"
				}
			]
		},
		{
			"ID": "20211218234012-frfuwku",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-frfuwku",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "FROM(\"users\");"
				}
			]
		},
		{
			"ID": "20211218234012-vlg2upy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-vlg2upy",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "if (name != null) {"
				}
			]
		},
		{
			"ID": "20211218234012-uco186b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-uco186b",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "WHERE(\"name like #{value} || '%'\");"
				}
			]
		},
		{
			"ID": "20211218234012-aqdxewn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-aqdxewn",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "}"
				}
			]
		},
		{
			"ID": "20211218234012-uh58iqf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-uh58iqf",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ORDER_BY(\"id\");"
				}
			]
		},
		{
			"ID": "20211218234012-pn8lz9n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-pn8lz9n",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "}}.toString();"
				}
			]
		},
		{
			"ID": "20211218234012-07ewvpb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211218234012-07ewvpb",
				"updated": "20211218234012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "}}"
				}
			]
		}
	]
}