{
	"ID": "20211219124334-z658n73",
	"Type": "NodeDocument",
	"Properties": {
		"icon": "1f4c4",
		"id": "20211219124334-z658n73",
		"title": "\u0026lt;resultMap\u0026gt;_映射关系",
		"updated": "20211219131816"
	},
	"Children": [
		{
			"ID": "20211219124633-07c40pr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219124633-07c40pr",
				"updated": "20211219125920"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003c!-- 非常复杂的结果映射 --\u003e\n\u003cresultMap id=\"detailedBlogResultMap\" type=\"Blog\"\u003e\n\t\u003cconstructor\u003e\n\t\t\u003cidArg column=\"blog_id\" javaType=\"int\"/\u003e\n\t\u003c/constructor\u003e\n\t\u003cresult property=\"title\" column=\"blog_title\"/\u003e\n\t\u003cassociation property=\"author\" javaType=\"Author\"\u003e\n\t\t\u003cid property=\"id\" column=\"author_id\"/\u003e\n\t\t\u003cresult property=\"username\" column=\"author_username\"/\u003e\n\t\t\u003cresult property=\"password\" column=\"author_password\"/\u003e\n\t\t\u003cresult property=\"email\" column=\"author_email\"/\u003e\n\t\t\u003cresult property=\"bio\" column=\"author_bio\"/\u003e\n\t\t\u003cresult property=\"favouriteSection\" column=\"author_favourite_section\"/\u003e\n\t\u003c/association\u003e\n\t\u003ccollection property=\"posts\" ofType=\"Post\"\u003e\n\t\t\u003cid property=\"id\" column=\"post_id\"/\u003e\n\t\t\u003cresult property=\"subject\" column=\"post_subject\"/\u003e\n\t\t\u003cassociation property=\"author\" javaType=\"Author\"/\u003e\n\t\t\u003ccollection property=\"comments\" ofType=\"Comment\"\u003e\n\t\t\u003cid property=\"id\" column=\"comment_id\"/\u003e\n\t\u003c/collection\u003e\n\t\u003ccollection property=\"tags\" ofType=\"Tag\" \u003e\n\t\t\u003cid property=\"id\" column=\"tag_id\"/\u003e\n\t\u003c/collection\u003e\n\t\u003cdiscriminator javaType=\"int\" column=\"draft\"\u003e\n\t\t\u003ccase value=\"1\" resultType=\"DraftPost\"/\u003e\n\t\u003c/discriminator\u003e\n\u003c/resultMap\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-d13x0rv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-d13x0rv",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "resultMap 元素有很多子元素和一个值得深入探讨的结构。 下面是resultMap 元素的概念视图。"
				}
			]
		},
		{
			"ID": "20211219124633-7hhsu6g",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20211219124633-7hhsu6g",
				"updated": "20211219125955"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "结果映射（resultMap）"
				}
			]
		},
		{
			"ID": "20211219124633-xr758gz",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20211219124633-xr758gz",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"ID": "20211219124633-d4xevnm",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219124633-d4xevnm"
					},
					"Children": [
						{
							"ID": "20211219124633-ft54id1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219124633-ft54id1"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "constructor - 用于在实例化类时，注入结果到构造方法中"
								}
							]
						},
						{
							"ID": "20211219124633-a87yxui",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20211219124633-a87yxui"
							},
							"Children": [
								{
									"ID": "20211219124633-e7hrpy4",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20211219124633-e7hrpy4"
									},
									"Children": [
										{
											"ID": "20211219124633-o57rbgl",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20211219124633-o57rbgl"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "idArg - ID 参数；标记出作为 ID 的结果可以帮助提高整体性能"
												}
											]
										}
									]
								},
								{
									"ID": "20211219124633-wfzvkww",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20211219124633-wfzvkww"
									},
									"Children": [
										{
											"ID": "20211219124633-6e5zqcw",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20211219124633-6e5zqcw"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "arg - 将被注入到构造方法的一个普通结果"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20211219124633-wh1w1zy",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219124633-wh1w1zy"
					},
					"Children": [
						{
							"ID": "20211219124633-khky09y",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219124633-khky09y"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "id – 一个 ID 结果；标记出作为 ID 的结果可以帮助提高整体性能"
								}
							]
						}
					]
				},
				{
					"ID": "20211219124633-gwjrr1b",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219124633-gwjrr1b"
					},
					"Children": [
						{
							"ID": "20211219124633-kjctufj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219124633-kjctufj"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "result – 注入到字段或 JavaBean 属性的普通结果"
								}
							]
						}
					]
				},
				{
					"ID": "20211219124633-v2gh6kq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219124633-v2gh6kq"
					},
					"Children": [
						{
							"ID": "20211219124633-rnhawwf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219124633-rnhawwf"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "association – 一个复杂类型的关联；许多结果将包装成这种类型"
								}
							]
						}
					]
				},
				{
					"ID": "20211219124633-jbnroi1",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219124633-jbnroi1"
					},
					"Children": [
						{
							"ID": "20211219124633-5yvt3ta",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219124633-5yvt3ta"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "嵌套结果映射 – 关联可以是 resultMap 元素，或是对其它结果映射的引用"
								}
							]
						}
					]
				},
				{
					"ID": "20211219124633-3bzub2f",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219124633-3bzub2f"
					},
					"Children": [
						{
							"ID": "20211219124633-37f1tui",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219124633-37f1tui"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "collection – 一个复杂类型的集合"
								}
							]
						}
					]
				},
				{
					"ID": "20211219124633-pkyd1dr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219124633-pkyd1dr"
					},
					"Children": [
						{
							"ID": "20211219124633-cpsu6mb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219124633-cpsu6mb"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "嵌套结果映射 – 集合可以是 resultMap 元素，或是对其它结果映射的引用"
								}
							]
						}
					]
				},
				{
					"ID": "20211219124633-pdoksum",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219124633-pdoksum"
					},
					"Children": [
						{
							"ID": "20211219124633-6ffc6n9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219124633-6ffc6n9"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "discriminator – 使用结果值来决定使用哪个 resultMap"
								}
							]
						}
					]
				},
				{
					"ID": "20211219124633-imhmu40",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219124633-imhmu40"
					},
					"Children": [
						{
							"ID": "20211219124633-brenykv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219124633-brenykv"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "case – 基于某些值的结果映射"
								}
							]
						}
					]
				},
				{
					"ID": "20211219124633-bedkybo",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219124633-bedkybo"
					},
					"Children": [
						{
							"ID": "20211219124633-b34e42j",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219124633-b34e42j"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "嵌套结果映射 – case 也是一个结果映射，因此具有相同的结构和元素；或者引用其它的结果映射"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219124633-icggpxd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-icggpxd",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ResultMap 的属性列表"
				}
			]
		},
		{
			"ID": "20211219124633-fizn0ae",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0
			],
			"Properties": {
				"id": "20211219124633-fizn0ae",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 13,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "属性"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 138,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "描述"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 4,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "id"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 54,
							"TableCellContentMaxWidth": 138,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当前命名空间中的一个唯一标识，用于标识一个结果映射。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "type"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 78,
							"TableCellContentMaxWidth": 138,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "类的完全限定名, 或者一个类型别名（关于内置的类型别名，可以参考上面的表格）。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 13,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "autoMapping"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 138,
							"TableCellContentMaxWidth": 138,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果设置这个属性，MyBatis 将会为本结果映射开启或者关闭自动映射。 这个属性会覆盖全局的属性 autoMappingBehavior。默认值：未设置（unset）。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219124633-fkh3ikv",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20211219124633-fkh3ikv",
				"updated": "20211219130003"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "id \u0026 result"
				}
			]
		},
		{
			"ID": "20211219130009-e6rw0ge",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219130009-e6rw0ge",
				"updated": "20211219130020"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cid property=\"id\" column=\"post_id\"/\u003e\n\u003cresult property=\"subject\" column=\"post_subject\"/\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219131414-eq0s42p",
			"Type": "NodeSuperBlock",
			"Properties": {
				"id": "20211219131414-eq0s42p",
				"updated": "20211219131458"
			},
			"Children": [
				{
					"Type": "NodeSuperBlockOpenMarker"
				},
				{
					"Type": "NodeSuperBlockLayoutMarker",
					"Data": "row"
				},
				{
					"ID": "20211219124633-cnrumlv",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20211219124633-cnrumlv",
						"updated": "20211219131352"
					},
					"Children": [
						{
							"ID": "20211219131352-jtqf3dj",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20211219131352-jtqf3dj"
							},
							"Children": [
								{
									"ID": "20211219131352-m5faqy0",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20211219131352-m5faqy0"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "这些元素是结果映射的基础。id 和 result 元素都将一个列的值映射到一个简单数据类型（String, int, double, Date 等）的属性或字段。"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20211219124633-rpxtimx",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20211219124633-rpxtimx",
						"updated": "20211219131458"
					},
					"Children": [
						{
							"ID": "20211219131357-xlat69y",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20211219131357-xlat69y",
								"updated": "20211219131458"
							},
							"Children": [
								{
									"ID": "20211219131357-88p4row",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20211219131357-88p4row",
										"updated": "20211219131458"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "这两者之间的唯一不同是，id 元素对应的属性会被"
										},
										{
											"Type": "NodeStrong",
											"Data": "strong",
											"Children": [
												{
													"Type": "NodeStrongA6kOpenMarker",
													"Data": "**"
												},
												{
													"Type": "NodeText",
													"Data": "标记为对象的标识符"
												},
												{
													"Type": "NodeStrongA6kCloseMarker",
													"Data": "**"
												}
											]
										},
										{
											"Type": "NodeText",
											"Data": "，在比较对象实例时使用。 这样可以提高整体的性能，尤其是"
										},
										{
											"Type": "NodeStrong",
											"Data": "strong",
											"Children": [
												{
													"Type": "NodeStrongA6kOpenMarker",
													"Data": "**"
												},
												{
													"Type": "NodeText",
													"Data": "进行缓存"
												},
												{
													"Type": "NodeStrongA6kCloseMarker",
													"Data": "**"
												}
											]
										},
										{
											"Type": "NodeText",
											"Data": "和"
										},
										{
											"Type": "NodeStrong",
											"Data": "strong",
											"Children": [
												{
													"Type": "NodeStrongA6kOpenMarker",
													"Data": "**"
												},
												{
													"Type": "NodeText",
													"Data": "嵌套结果映射（也就是连接映射）"
												},
												{
													"Type": "NodeStrongA6kCloseMarker",
													"Data": "**"
												}
											]
										},
										{
											"Type": "NodeText",
											"Data": "的时候。"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeSuperBlockCloseMarker"
				}
			]
		},
		{
			"ID": "20211219124633-pt4hg81",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20211219124633-pt4hg81",
				"updated": "20211219131431"
			},
			"Children": [
				{
					"ID": "20211219131431-kjw2put",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219131431-kjw2put"
					},
					"Children": [
						{
							"ID": "20211219131431-u721cma",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219131431-u721cma"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "两个元素都有一些属性："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219124633-x6kxl4s",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0
			],
			"Properties": {
				"id": "20211219124633-x6kxl4s",
				"updated": "20211219131721"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 13,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "属性"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 307,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "描述"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 10,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "property"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 307,
							"TableCellContentMaxWidth": 307,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "映射到列结果的字段或属性。如果 JavaBean 有这个名字的属性（property），会先使用该属性。否则 MyBatis 将会寻找给定名称的字段（field）。 无论是哪一种情形，你都可以使用常见的点式分隔形式进行复杂属性导航。 比如，你可以这样映射一些简单的东西：“username”，或者映射到一些复杂的东西上：“address.street.number”。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 8,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "column"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 103,
							"TableCellContentMaxWidth": 307,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "数据库中的列名，或者是列的别名。一般情况下，这和传递给resultSet.getString(columnName)方法的参数一样。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 10,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "javaType"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 226,
							"TableCellContentMaxWidth": 307,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一个 Java 类的全限定名，或一个类型别名（关于内置的类型别名，可以参考上面的表格）。 如果你映射到一个 JavaBean，MyBatis 通常可以推断类型。然而，如果你映射到的是 HashMap，那么你应该明确地指定 javaType 来保证行为与期望的相一致。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 10,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "jdbcType"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 267,
							"TableCellContentMaxWidth": 307,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "JDBC 类型，所支持的 JDBC 类型参见这个表格之后的“支持的 JDBC 类型”。 只需要在可能执行插入、更新和删除的且"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "允许空值"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "的列上"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "指定 JDBC 类型"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "。"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "这是 JDBC 的要求而非 MyBatis 的要求。如果你直接面向 JDBC 编程，你需要对可以为空值的列指定这个类型。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 13,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "typeHandler"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 149,
							"TableCellContentMaxWidth": 307,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "我们在前面讨论过默认的"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "类型处理器"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "。使用这个属性，你可以覆盖默认的类型处理器。 这个属性值是一个类型处理器实现类的全限定名，或者是类型别名。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219124633-zvt8mja",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20211219124633-zvt8mja",
				"updated": "20211219131816"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "支持的 JDBC 类型"
				}
			]
		},
		{
			"ID": "20211219124633-89d1fks",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-89d1fks",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为了以后可能的使用场景，MyBatis 通过内置的 jdbcType 枚举类型支持下面的 JDBC 类型。"
				}
			]
		},
		{
			"ID": "20211219124633-bkrdw3l",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0,
				0,
				0,
				0,
				0
			],
			"Properties": {
				"id": "20211219124633-bkrdw3l",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 5,
									"TableCellContentMaxWidth": 10,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "BIT"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 7,
									"TableCellContentMaxWidth": 9,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "FLOAT"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 13,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "CHAR"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 11,
									"TableCellContentMaxWidth": 15,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "TIMESTAMP"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 7,
									"TableCellContentMaxWidth": 9,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "OTHER"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 11,
									"TableCellContentMaxWidth": 11,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "UNDEFINED"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 9,
							"TableCellContentMaxWidth": 10,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "TINYINT"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 9,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "REAL"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 9,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "VARCHAR"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 8,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "BINARY"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 9,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "BLOB"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 10,
							"TableCellContentMaxWidth": 11,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "NVARCHAR"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 10,
							"TableCellContentMaxWidth": 10,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "SMALLINT"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 8,
							"TableCellContentMaxWidth": 9,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "DOUBLE"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 13,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "LONGVARCHAR"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 11,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "VARBINARY"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 9,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "CLOB"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 7,
							"TableCellContentMaxWidth": 11,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "NCHAR"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 9,
							"TableCellContentMaxWidth": 10,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "INTEGER"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 9,
							"TableCellContentMaxWidth": 9,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "NUMERIC"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "DATE"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 15,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "LONGVARBINARY"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 9,
							"TableCellContentMaxWidth": 9,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "BOOLEAN"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 7,
							"TableCellContentMaxWidth": 11,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "NCLOB"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 8,
							"TableCellContentMaxWidth": 10,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "BIGINT"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 9,
							"TableCellContentMaxWidth": 9,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "DECIMAL"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "TIME"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "NULL"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 8,
							"TableCellContentMaxWidth": 9,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "CURSOR"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 7,
							"TableCellContentMaxWidth": 11,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ARRAY"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219124633-n0fclef",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20211219124633-n0fclef",
				"updated": "20211219130038"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "构造方法"
				}
			]
		},
		{
			"ID": "20211219124633-du4vzvv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-du4vzvv",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过修改对象属性的方式，可以满足大多数的数据传输对象（Data Transfer Object, DTO）以及绝大部分领域模型的要求。但有些情况下你想使用不可变类。 一般来说，很少改变或基本不变的包含引用或数据的表，很适合使用不可变类。 构造方法注入允许你在初始化时为类设置属性的值，而不用暴露出公有方法。MyBatis 也支持私有属性和私有 JavaBean 属性来完成注入，但有一些人更青睐于通过构造方法进行注入。 constructor 元素就是为此而生的。"
				}
			]
		},
		{
			"ID": "20211219124633-xvknhoq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-xvknhoq",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "看看下面这个构造方法:"
				}
			]
		},
		{
			"ID": "20211219130117-8oa32yp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219130117-8oa32yp",
				"updated": "20211219130127"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class User {\n//...\npublic User(Integer id, String username, int age) {\n//...\n}//...}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-27q8199",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-27q8199",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为了将结果注入构造方法，MyBatis 需要通过某种方式定位相应的构造方法。 在下面的例子中，MyBatis 搜索一个声明了三个形参的的构造方法，参数类型以 java.lang.Integer, java.lang.String 和 int 的顺序给出。"
				}
			]
		},
		{
			"ID": "20211219130131-58admwo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219130131-58admwo",
				"updated": "20211219130148"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cconstructor\u003e\n\t\u003cidArg column=\"id\" javaType=\"int\"/\u003e\n\t\u003carg column=\"username\" javaType=\"String\"/\u003e\n\t\u003carg column=\"age\" javaType=\"_int\"/\u003e\n\u003c/constructor\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-nd4y64v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-nd4y64v",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当你在处理一个带有多个形参的构造方法时，很容易搞乱 arg 元素的顺序。 从版本 3.4.3 开始，可以在指定参数名称的前提下，以任意顺序编写 arg 元素。 为了通过名称来引用构造方法参数，你可以添加 @Param 注解，或者使用 '-parameters' 编译选项并启用 useActualParamName 选项（默认开启）来编译项目。下面是一个等价的例子，尽管函数签名中第二和第三个形参的顺序与 constructor 元素中参数声明的顺序不匹配。"
				}
			]
		},
		{
			"ID": "20211219130155-o2af30a",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219130155-o2af30a",
				"updated": "20211219130205"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cconstructor\u003e\n\t\u003cidArg column=\"id\" javaType=\"int\" name=\"id\" /\u003e\n\t\u003carg column=\"age\" javaType=\"_int\" name=\"age\" /\u003e\n\t\u003carg column=\"username\" javaType=\"String\" name=\"username\" /\u003e\n\u003c/constructor\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-638lkwo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-638lkwo",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果存在名称和类型相同的属性，那么可以省略 javaType 。"
				}
			]
		},
		{
			"ID": "20211219124633-x2jbuds",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-x2jbuds",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "剩余的属性和规则和普通的 id 和 result 元素是一样的。"
				}
			]
		},
		{
			"ID": "20211219124633-kfxc6ou",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0
			],
			"Properties": {
				"id": "20211219124633-kfxc6ou",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 13,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "属性"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 347,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "描述"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 8,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "column"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 103,
							"TableCellContentMaxWidth": 347,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "数据库中的列名，或者是列的别名。一般情况下，这和传递给resultSet.getString(columnName)方法的参数一样。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 10,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "javaType"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 228,
							"TableCellContentMaxWidth": 347,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一个 Java 类的完全限定名，或一个类型别名（关于内置的类型别名，可以参考上面的表格）。 如果你映射到一个 JavaBean，MyBatis 通常可以推断类型。然而，如果你映射到的是 HashMap，那么你应该明确地指定 javaType 来保证行为与期望的相一致。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 10,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "jdbcType"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 239,
							"TableCellContentMaxWidth": 347,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "JDBC 类型，所支持的 JDBC 类型参见这个表格之前的“支持的 JDBC 类型”。 只需要在可能执行插入、更新和删除的且允许空值的列上指定 JDBC 类型。这是 JDBC 的要求而非 MyBatis 的要求。如果你直接面向 JDBC 编程，你需要对可能存在空值的列指定这个类型。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 13,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "typeHandler"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 141,
							"TableCellContentMaxWidth": 347,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "我们在前面讨论过默认的类型处理器。使用这个属性，你可以覆盖默认的类型处理器。 这个属性值是一个类型处理器实现类的完全限定名，或者是类型别名。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 8,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "select"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 127,
							"TableCellContentMaxWidth": 347,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用于加载复杂类型属性的映射语句的 ID，它会从 column 属性中指定的列检索数据，作为参数传递给此 select 语句。具体请参考关联元素。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 11,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "resultMap"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 347,
							"TableCellContentMaxWidth": 347,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "结果映射的 ID，可以将嵌套的结果集映射到一个合适的对象树中。 它可以作为使用额外 select 语句的替代方案。它可以将多表连接操作的结果映射成一个单一的ResultSet。这样的ResultSet将会将包含重复或部分数据重复的结果集。为了将结果集正确地映射到嵌套的对象树中，MyBatis 允许你 “串联”结果映射，以便解决嵌套结果集的问题。想了解更多内容，请参考下面的关联元素。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "name"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 110,
							"TableCellContentMaxWidth": 347,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "构造方法形参的名字。从 3.4.3 版本开始，通过指定具体的参数名，你可以以任意顺序写入 arg 元素。参看上面的解释。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219124633-byih6f1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20211219124633-byih6f1",
				"updated": "20211219130218"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关联"
				}
			]
		},
		{
			"ID": "20211219130352-dsaz9zb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219130352-dsaz9zb",
				"updated": "20211219130403"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cassociation property=\"author\" column=\"blog_author_id\" javaType=\"Author\"\u003e\n\t\u003cid property=\"id\" column=\"author_id\"/\u003e\n\t\u003cresult property=\"username\" column=\"author_username\"/\u003e\n\u003c/association\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-9hjv90k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-9hjv90k",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关联（association）元素处理“有一个”类型的关系。 比如，在我们的示例中，一个博客有一个用户。关联结果映射和其它类型的映射工作方式差不多。 你需要指定目标属性名以及属性的javaType（很多时候 MyBatis 可以自己推断出来），在必要的情况下你还可以设置 JDBC 类型，如果你想覆盖获取结果值的过程，还可以设置类型处理器。"
				}
			]
		},
		{
			"ID": "20211219124633-bnbb6dm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-bnbb6dm",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关联的不同之处是，你需要告诉 MyBatis 如何加载关联。MyBatis 有两种不同的方式加载关联："
				}
			]
		},
		{
			"ID": "20211219124633-39ibk9v",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20211219124633-39ibk9v",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"ID": "20211219124633-ajml1tl",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219124633-ajml1tl"
					},
					"Children": [
						{
							"ID": "20211219124633-t6x3rfd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219124633-t6x3rfd"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "嵌套 Select 查询：通过执行另外一个 SQL 映射语句来加载期望的复杂类型。"
								}
							]
						}
					]
				},
				{
					"ID": "20211219124633-j7ngemt",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219124633-j7ngemt"
					},
					"Children": [
						{
							"ID": "20211219124633-7uqbumk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219124633-7uqbumk"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "嵌套结果映射：使用嵌套的结果映射来处理连接结果的重复子集。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219124633-ktzoj42",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-ktzoj42",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "首先，先让我们来看看这个元素的属性。你将会发现，和普通的结果映射相比，它只在 select 和 resultMap 属性上有所不同。"
				}
			]
		},
		{
			"ID": "20211219124633-x8wqiiq",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0
			],
			"Properties": {
				"id": "20211219124633-x8wqiiq",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 13,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "属性"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 300,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "描述"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 10,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "property"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 300,
							"TableCellContentMaxWidth": 300,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "映射到列结果的字段或属性。如果用来匹配的 JavaBean 存在给定名字的属性，那么它将会被使用。否则 MyBatis 将会寻找给定名称的字段。 无论是哪一种情形，你都可以使用通常的点式分隔形式进行复杂属性导航。 比如，你可以这样映射一些简单的东西：“username”，或者映射到一些复杂的东西上：“address.street.number”。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 10,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "javaType"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 228,
							"TableCellContentMaxWidth": 300,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一个 Java 类的完全限定名，或一个类型别名（关于内置的类型别名，可以参考上面的表格）。 如果你映射到一个 JavaBean，MyBatis 通常可以推断类型。然而，如果你映射到的是 HashMap，那么你应该明确地指定 javaType 来保证行为与期望的相一致。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 10,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "jdbcType"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 239,
							"TableCellContentMaxWidth": 300,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "JDBC 类型，所支持的 JDBC 类型参见这个表格之前的“支持的 JDBC 类型”。 只需要在可能执行插入、更新和删除的且允许空值的列上指定 JDBC 类型。这是 JDBC 的要求而非 MyBatis 的要求。如果你直接面向 JDBC 编程，你需要对可能存在空值的列指定这个类型。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 13,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "typeHandler"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 141,
							"TableCellContentMaxWidth": 300,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "我们在前面讨论过默认的类型处理器。使用这个属性，你可以覆盖默认的类型处理器。 这个属性值是一个类型处理器实现类的完全限定名，或者是类型别名。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219124633-j7oirum",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20211219124633-j7oirum",
				"updated": "20211219130224"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关联的嵌套 Select 查询"
				}
			]
		},
		{
			"ID": "20211219124633-wakiqoi",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0
			],
			"Properties": {
				"id": "20211219124633-wakiqoi",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 11,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "属性"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 326,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "描述"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 8,
							"TableCellContentMaxWidth": 11,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "column"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 300,
							"TableCellContentMaxWidth": 326,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "数据库中的列名，或者是列的别名。一般情况下，这和传递给resultSet.getString(columnName)方法的参数一样。 注意：在使用复合主键的时候，你可以使用 column=\"{prop1=col1,prop2=col2}\" 这样的语法来指定多个传递给嵌套 Select 查询语句的列名。这会使得prop1和prop2作为参数对象，被设置为对应嵌套 Select 语句的参数。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 8,
							"TableCellContentMaxWidth": 11,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "select"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 326,
							"TableCellContentMaxWidth": 326,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用于加载复杂类型属性的映射语句的 ID，它会从 column 属性指定的列中检索数据，作为参数传递给目标 select 语句。 具体请参考下面的例子。注意：在使用复合主键的时候，你可以使用column=\"{prop1=col1,prop2=col2}\"这样的语法来指定多个传递给嵌套 Select 查询语句的列名。这会使得prop1和prop2作为参数对象，被设置为对应嵌套 Select 语句的参数。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 11,
							"TableCellContentMaxWidth": 11,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "fetchType"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 120,
							"TableCellContentMaxWidth": 326,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "可选的。有效值为lazy和eager。 指定属性后，将在映射中忽略全局配置参数lazyLoadingEnabled，使用属性的值。（是否开启缓存）"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219124633-c33b4xw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-c33b4xw",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "示例："
				}
			]
		},
		{
			"ID": "20211219130417-4gtges8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219130417-4gtges8",
				"updated": "20211219130432"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cresultMap id=\"blogResult\" type=\"Blog\"\u003e\n\u003cassociation property=\"author\"\n                column=\"author_id\"\n                javaType=\"Author\"\n                select=\"selectAuthor\"/\u003e\n\u003c/resultMap\u003e\n\u003cselect id=\"selectBlog\" resultMap=\"blogResult\"\u003e\n\tSELECT * FROM BLOG WHERE ID = #{id}\n\u003c/select\u003e\n\u003cselect id=\"selectAuthor\" resultType=\"Author\"\u003e\n\tSELECT * FROM AUTHOR WHERE ID = #{id}\n\u003c/select\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-qbbbgzh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-qbbbgzh",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "就是这么简单。我们有两个 select 查询语句：一个用来加载博客（Blog），另外一个用来加载作者（Author），而且博客的结果映射描述了应该使用 selectAuthor 语句加载它的 author 属性。"
				}
			]
		},
		{
			"ID": "20211219124633-wcokbov",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-wcokbov",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其它所有的属性将会被自动加载，只要它们的列名和属性名相匹配。"
				}
			]
		},
		{
			"ID": "20211219124633-d9iqwyb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-d9iqwyb",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这种方式虽然很简单，但在大型数据集或大型数据表上表现不佳。这个问题被称为“N+1 查询问题”。 概括地讲，N+1 查询问题是这样子的："
				}
			]
		},
		{
			"ID": "20211219124633-1i8yu8t",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20211219124633-1i8yu8t",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"ID": "20211219124633-yx1g4q5",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219124633-yx1g4q5"
					},
					"Children": [
						{
							"ID": "20211219124633-pq9d5ro",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219124633-pq9d5ro"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "你执行了一个单独的 SQL 语句来获取结果的一个列表（就是“+1”）。"
								}
							]
						}
					]
				},
				{
					"ID": "20211219124633-1crh5po",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219124633-1crh5po"
					},
					"Children": [
						{
							"ID": "20211219124633-ug90l95",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219124633-ug90l95"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对列表返回的每条记录，你执行一个 select 查询语句来为每条记录加载详细信息（就是“N”）。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219124633-yqzb9nc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-yqzb9nc",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个问题会导致成百上千的 SQL 语句被执行。有时候，我们不希望产生这样的后果。"
				}
			]
		},
		{
			"ID": "20211219124633-orqazzv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-orqazzv",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "好消息是，MyBatis 能够对这样的查询进行延迟加载，因此可以将大量语句同时运行的开销分散开来。 然而，如果你加载记录列表之后立刻就遍历列表以获取嵌套的数据，就会触发所有的延迟加载查询，性能可能会变得很糟糕。"
				}
			]
		},
		{
			"ID": "20211219124633-ude37e4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-ude37e4",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "所以还有另外一种方法。"
				}
			]
		},
		{
			"ID": "20211219124633-thi2gh9",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20211219124633-thi2gh9",
				"updated": "20211219130231"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关联的嵌套结果映射"
				}
			]
		},
		{
			"ID": "20211219124633-aqs59l7",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0
			],
			"Properties": {
				"id": "20211219124633-aqs59l7",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 15,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "属性"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 335,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "描述"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 11,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "resultMap"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 335,
							"TableCellContentMaxWidth": 335,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "结果映射的 ID，可以将此关联的嵌套结果集映射到一个合适的对象树中。 它可以作为使用额外 select 语句的替代方案。它可以将多表连接操作的结果映射成一个单一的ResultSet。这样的ResultSet有部分数据是重复的。 为了将结果集正确地映射到嵌套的对象树中, MyBatis 允许你“串联”结果映射，以便解决嵌套结果集的问题。使用嵌套结果映射的一个例子在表格以后。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 14,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "columnPrefix"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 182,
							"TableCellContentMaxWidth": 335,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当连接多个表时，你可能会不得不使用列别名来避免在ResultSet中产生重复的列名。指定 columnPrefix 列名前缀允许你将带有这些前缀的列映射到一个外部的结果映射中。 详细说明请参考后面的例子。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 15,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "notNullColumn"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 222,
							"TableCellContentMaxWidth": 335,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "默认情况下，在至少一个被映射到属性的列不为空时，子对象才会被创建。 你可以在这个属性上指定非空的列来改变默认行为，指定后，Mybatis 将只在这些列非空时才创建一个子对象。可以使用逗号分隔来指定多个列。默认值：未设置（unset）。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 13,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "autoMapping"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 211,
							"TableCellContentMaxWidth": 335,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果设置这个属性，MyBatis 将会为本结果映射开启或者关闭自动映射。 这个属性会覆盖全局的属性 autoMappingBehavior。注意，本属性对外部的结果映射无效，所以不能搭配select或resultMap元素使用。默认值：未设置（unset）。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219124633-8dzgoeo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-8dzgoeo",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "之前，你已经看到了一个非常复杂的嵌套关联的例子。 下面的例子则是一个非常简单的例子，用于演示嵌套结果映射如何工作。 现在我们将博客表和作者表连接在一起，而不是执行一个独立的查询语句，就像这样："
				}
			]
		},
		{
			"ID": "20211219124633-1gohb1v",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219124633-1gohb1v",
				"updated": "20211219130518"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cselect id=\"selectBlog\" resultMap=\"blogResult\"\u003e\n\tselect\n\tB.id as blog_id,\n\tB.title as blog_title,\n\tB.author_id as blog_author_id,\n\tA.id as author_id,\n\tA.username as author_username,\n\tA.password as author_password,\n\tA.email as author_email,\n\tA.bio as author_bio\n\tfrom Blog B left outer join Author A on B.author_id = A.id\n\twhere B.id = #{id}\n\u003c/select\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-u1ceatm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-u1ceatm",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意查询中的连接，以及为确保结果能够拥有唯一且清晰的名字，我们设置的别名。 这使得进行映射非常简单。现在我们可以映射这个结果："
				}
			]
		},
		{
			"ID": "20211219124633-hotjsmj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219124633-hotjsmj",
				"updated": "20211219130552"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cresultMap id=\"blogResult\" type=\"Blog\"\u003e\n\t\u003cid property=\"id\" column=\"blog_id\" /\u003e\n\t\u003cresult property=\"title\" column=\"blog_title\"/\u003e\n\t\u003cassociation property=\"author\" column=\"blog_author_id\" javaType=\"Author\" resultMap=\"authorResult\"/\u003e\n\u003c/resultMap\u003e\n\u003cresultMap id=\"authorResult\" type=\"Author\"\u003e\n\t\u003cid property=\"id\" column=\"author_id\"/\u003e\n\t\u003cresult property=\"username\" column=\"author_username\"/\u003e\n\t\u003cresult property=\"password\" column=\"author_password\"/\u003e\n\t\u003cresult property=\"email\" column=\"author_email\"/\u003e\n\t\u003cresult property=\"bio\" column=\"author_bio\"/\u003e\n\u003c/resultMap\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-9hhv94m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-9hhv94m",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在上面的例子中，你可以看到，博客（Blog）作者（author）的关联元素委托名为 “authorResult” 的结果映射来加载作者对象的实例。"
				}
			]
		},
		{
			"ID": "20211219124633-y2t5yvg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-y2t5yvg",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "非常重要： id 元素在嵌套结果映射中扮演着非常重要的角色。你应该总是指定一个或多个可以唯一标识结果的属性。 虽然，即使不指定这个属性，MyBatis 仍然可以工作，但是会产生严重的性能问题。 只需要指定可以唯一标识结果的最少属性。显然，你可以选择主键（复合主键也可以）。"
				}
			]
		},
		{
			"ID": "20211219124633-cquv9bg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-cquv9bg",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "现在，上面的示例使用了外部的结果映射元素来映射关联。这使得 Author 的结果映射可以被重用。 然而，如果你不打算重用它，或者你更喜欢将你所有的结果映射放在一个具有描述性的结果映射元素中。 你可以直接将结果映射作为子元素嵌套在内。这里给出使用这种方式的等效例子："
				}
			]
		},
		{
			"ID": "20211219124633-yylh6zz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219124633-yylh6zz",
				"updated": "20211219130613"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cresultMap id=\"blogResult\" type=\"Blog\"\u003e\n\t\u003cid property=\"id\" column=\"blog_id\" /\u003e\n\t\u003cresult property=\"title\" column=\"blog_title\"/\u003e\n\t\u003cassociation property=\"author\" javaType=\"Author\"\u003e\n\t\t\u003cid property=\"id\" column=\"author_id\"/\u003e\n\t\t\u003cresult property=\"username\" column=\"author_username\"/\u003e\n\t\t\u003cresult property=\"password\" column=\"author_password\"/\u003e\n\t\t\u003cresult property=\"email\" column=\"author_email\"/\u003e\n\t\t\u003cresult property=\"bio\" column=\"author_bio\"/\u003e\n\t\u003c/association\u003e\n\u003c/resultMap\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-ddmpuvw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-ddmpuvw",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "那如果博客（blog）有一个共同作者（co-author）该怎么办？select 语句看起来会是这样的："
				}
			]
		},
		{
			"ID": "20211219124633-8ljzq5z",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219124633-8ljzq5z",
				"updated": "20211219120731"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cselect id=\"selectBlog\" resultMap=\"blogResult\"\u003e\n\tselect\n\tB.id as blog_id,\n\tB.title as blog_title,\n\tA.id as author_id,\n\tA.username as author_username,\n\tA.password as author_password,\n\tA.email as author_email,\n\tA.bio as author_bio,\n\tCA.id as co_author_id,\n\tCA.username as co_author_username,\n\tCA.password as co_author_password,\n\tCA.email as co_author_email,\n\tCA.bio as co_author_bio\n\tfrom Blog B\n\tleft outer join Author A on B.author_id = A.id\n\tleft outer join Author CA on B.co_author_id = CA.id\n\twhere B.id = #{id}\n\u003c/select\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-2m1h3ju",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-2m1h3ju",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "回忆一下，Author 的结果映射定义如下："
				}
			]
		},
		{
			"ID": "20211219124633-nyd06cv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219124633-nyd06cv",
				"updated": "20211219120750"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cresultMap id=\"authorResult\" type=\"Author\"\u003e\n\t\u003cid property=\"id\" column=\"author_id\"/\u003e\n\t\u003cresult property=\"username\" column=\"author_username\"/\u003e\n\t\u003cresult property=\"password\" column=\"author_password\"/\u003e\n\t\u003cresult property=\"email\" column=\"author_email\"/\u003e\n\t\u003cresult property=\"bio\" column=\"author_bio\"/\u003e\n\u003c/resultMap\u003e\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-6veqfxk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-6veqfxk",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "由于结果中的列名与结果映射中的列名不同。你需要指定 columnPrefix 以便重复使用该结果映射来映射 co-author 的结果。"
				}
			]
		},
		{
			"ID": "20211219124633-ypje7j4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219124633-ypje7j4",
				"updated": "20211219120758"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cresultMap id=\"blogResult\" type=\"Blog\"\u003e\n\t\u003cid property=\"id\" column=\"blog_id\" /\u003e\n\t\u003cresult property=\"title\" column=\"blog_title\"/\u003e\n\t\u003cassociation property=\"author\" resultMap=\"authorResult\" /\u003e\n\t\u003cassociation property=\"coAuthor\" resultMap=\"authorResult\" **columnPrefix=\"co_\"** /\u003e\n\u003c/resultMap\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-74cyc38",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20211219124633-74cyc38",
				"updated": "20211219130239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关联的多结果集（ResultSet）"
				}
			]
		},
		{
			"ID": "20211219124633-14kgnj0",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0
			],
			"Properties": {
				"id": "20211219124633-14kgnj0",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 15,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "属性"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 121,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "描述"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 8,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "column"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 121,
							"TableCellContentMaxWidth": 121,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当使用多个结果集时，该属性指定结果集中用于与foreignColumn匹配的列（多个列名以逗号隔开），以识别关系中的父类型与子类型。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 15,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "foreignColumn"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 68,
							"TableCellContentMaxWidth": 121,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "指定外键对应的列名，指定的列将与父类型中column的给出的列进行匹配。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 11,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "resultSet"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 36,
							"TableCellContentMaxWidth": 121,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "指定用于加载复杂类型的结果集名字。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219124633-s1a2qya",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-s1a2qya",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从版本 3.2.3 开始，MyBatis 提供了另一种解决 N+1 查询问题的方法。"
				}
			]
		},
		{
			"ID": "20211219124633-gil7pti",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-gil7pti",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "某些数据库允许存储过程返回多个结果集，或一次性执行多个语句，每个语句返回一个结果集。 我们可以利用这个特性，在不使用连接的情况下，只访问数据库一次就能获得相关数据。"
				}
			]
		},
		{
			"ID": "20211219124633-ntfo8bi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-ntfo8bi",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在例子中，存储过程执行下面的查询并返回两个结果集。第一个结果集会返回博客（Blog）的结果，第二个则返回作者（Author）的结果。"
				}
			]
		},
		{
			"ID": "20211219124633-2mftvjj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-2mftvjj",
				"updated": "20211219120805"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "SELECT * FROM BLOG WHERE ID = #{id}"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20211219124633-9cof9pm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-9cof9pm",
				"updated": "20211219120808"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "SELECT * FROM AUTHOR WHERE ID = #{id}"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20211219124633-ligabqz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-ligabqz",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在映射语句中，必须通过 resultSets 属性为每个结果集指定一个名字，多个名字使用逗号隔开。"
				}
			]
		},
		{
			"ID": "20211219124633-oq61q5a",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219124633-oq61q5a",
				"updated": "20211219120830"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cselect id=\"selectBlog\" resultSets=\"blogs,authors\" resultMap=\"blogResult\" statementType=\"CALLABLE\"\u003e\n\t{call getBlogsAndAuthors(#{id,jdbcType=INTEGER,mode=IN})}\n\u003c/select\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-k93wpfy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-k93wpfy",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "现在我们可以指定使用 “authors” 结果集的数据来填充 “author” 关联："
				}
			]
		},
		{
			"ID": "20211219124633-syize06",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219124633-syize06",
				"updated": "20211219120901"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cresultMap id=\"blogResult\" type=\"Blog\"\u003e\n\t\u003cid property=\"id\" column=\"id\" /\u003e\n\t\u003cresult property=\"title\" column=\"title\"/\u003e\n\t\u003cassociation property=\"author\" javaType=\"Author\" resultSet=\"authors\" column=\"author_id\" foreignColumn=\"id\"\u003e\n\t\t\u003cid property=\"id\" column=\"id\"/\u003e\n\t\t\u003cresult property=\"username\" column=\"username\"/\u003e\n\t\t\u003cresult property=\"password\" column=\"password\"/\u003e\n\t\t\u003cresult property=\"email\" column=\"email\"/\u003e\n\t\t\u003cresult property=\"bio\" column=\"bio\"/\u003e\n\t\u003c/association\u003e\n\u003c/resultMap\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-279efy3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-279efy3",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "你已经在上面看到了如何处理“有一个”类型的关联。但是该怎么处理“有很多个”类型的关联呢？这就是我们接下来要介绍的。"
				}
			]
		},
		{
			"ID": "20211219124633-kwhc132",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20211219124633-kwhc132",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "集合"
				}
			]
		},
		{
			"ID": "20211219124633-7pvyrha",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219124633-7pvyrha",
				"updated": "20211219120923"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003ccollection property=\"posts\" ofType=\"domain.blog.Post\"\u003e\n\t\u003cid property=\"id\" column=\"post_id\"/\u003e\n\t\u003cresult property=\"subject\" column=\"post_subject\"/\u003e\n\t\u003cresult property=\"body\" column=\"post_body\"/\u003e\n\u003c/collection\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-g3nwm4e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-g3nwm4e",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "集合元素和关联元素几乎是一样的，它们相似的程度之高，以致于没有必要再介绍集合元素的相似部分。 所以让我们来关注它们的不同之处吧。"
				}
			]
		},
		{
			"ID": "20211219124633-mbb2w5p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-mbb2w5p",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们来继续上面的示例，一个博客（Blog）只有一个作者（Author)。但一个博客有很多文章（Post)。 在博客类中，这可以用下面的写法来表示："
				}
			]
		},
		{
			"ID": "20211219124633-uhbvqj2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-uhbvqj2",
				"updated": "20211219120929"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "private List\u003cPost\u003e posts;"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20211219124633-wmnktfm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-wmnktfm",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "要像上面这样，映射嵌套结果集合到一个 List 中，可以使用集合元素。 和关联元素一样，我们可以使用嵌套 Select 查询，或基于连接的嵌套结果映射集合。"
				}
			]
		},
		{
			"ID": "20211219124633-3o71cxl",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20211219124633-3o71cxl",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "集合的嵌套 Select 查询"
				}
			]
		},
		{
			"ID": "20211219124633-au0fk9i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-au0fk9i",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "首先，让我们看看如何使用嵌套 Select 查询来为博客加载文章。"
				}
			]
		},
		{
			"ID": "20211219124633-ldd8k6h",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219124633-ldd8k6h",
				"updated": "20211219120947"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cresultMap id=\"blogResult\" type=\"Blog\"\u003e\n\t\u003ccollection property=\"posts\" javaType=\"ArrayList\" column=\"id\" ofType=\"Post\" select=\"selectPostsForBlog\"/\u003e\n\u003c/resultMap\u003e\n\u003cselect id=\"selectBlog\" resultMap=\"blogResult\"\u003e\n\tSELECT * FROM BLOG WHERE ID = #{id}\n\u003c/select\u003e\n\u003cselect id=\"selectPostsForBlog\" resultType=\"Post\"\u003e\n\tSELECT * FROM POST WHERE BLOG_ID = #{id}\n\u003c/select\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-q27dsis",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-q27dsis",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "你可能会立刻注意到几个不同，但大部分都和我们上面学习过的关联元素非常相似。 首先，你会注意到我们使用的是集合元素。 接下来你会注意到有一个新的 “ofType” 属性。这个属性非常重要，它用来将 JavaBean（或字段）属性的类型和集合存储的类型区分开来。 所以你可以按照下面这样来阅读映射："
				}
			]
		},
		{
			"ID": "20211219124633-3u3s968",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219124633-3u3s968",
				"updated": "20211219121009"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003ccollection\n    property=\"posts\"\n    javaType=\"ArrayList\"\n    column=\"id\"\n    ofType=\"Post\"\n    select=\"selectPostsForBlog\"/\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-uedqivd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-uedqivd",
				"updated": "20211219121014"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "读作： "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "“posts 是一个存储 Post 的 ArrayList 集合”"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20211219124633-lvozbjx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-lvozbjx",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在一般情况下，MyBatis 可以推断 javaType 属性，因此并不需要填写。所以很多时候你可以简略成："
				}
			]
		},
		{
			"ID": "20211219124633-lbj2oxo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219124633-lbj2oxo",
				"updated": "20211219121023"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003ccollection\n    property=\"posts\"\n    column=\"id\"\n    ofType=\"Post\"\n    select=\"selectPostsForBlog\"/\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-ze8bj3r",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20211219124633-ze8bj3r",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "集合的嵌套结果映射"
				}
			]
		},
		{
			"ID": "20211219124633-hmlx33k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-hmlx33k",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "现在你可能已经猜到了集合的嵌套结果映射是怎样工作的——除了新增的 “ofType” 属性，它和关联的完全相同。"
				}
			]
		},
		{
			"ID": "20211219124633-jcyw0jd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-jcyw0jd",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "首先, 让我们看看对应的 SQL 语句："
				}
			]
		},
		{
			"ID": "20211219124633-7ssynsv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219124633-7ssynsv",
				"updated": "20211219121048"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cselect id=\"selectBlog\" resultMap=\"blogResult\"\u003e\n\tselect\n\tB.id as blog_id,\n\tB.title as blog_title,\n\tB.author_id as blog_author_id,\n\tP.id as post_id,\n\tP.subject as post_subject,\n\tP.body as post_body,\n\tfrom Blog B\n\tleft outer join Post P on B.id = P.blog_id\n\twhere B.id = #{id}\n\u003c/select\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-o4uohlm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-o4uohlm",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们再次连接了博客表和文章表，并且为每一列都赋予了一个有意义的别名，以便映射保持简单。 要映射博客里面的文章集合，就这么简单："
				}
			]
		},
		{
			"ID": "20211219124633-f86audl",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219124633-f86audl",
				"updated": "20211219121146"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cresultMap id=\"blogResult\" type=\"Blog\"\u003e\n\t\u003cid property=\"id\" column=\"blog_id\" /\u003e\n\t\u003cresult property=\"title\" column=\"blog_title\"/\u003e\n\t\u003ccollection property=\"posts\" ofType=\"Post\"\u003e\n\t\t\u003cid property=\"id\" column=\"post_id\"/\u003e\n\t\t\u003cresult property=\"subject\" column=\"post_subject\"/\u003e\n\t\t\u003cresult property=\"body\" column=\"post_body\"/\u003e\n\t\u003c/collection\u003e\n\u003c/resultMap\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-mmi3yto",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-mmi3yto",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "再提醒一次，要记得上面 id 元素的重要性，如果你不记得了，请阅读关联部分的相关部分。"
				}
			]
		},
		{
			"ID": "20211219124633-jh6jylz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-jh6jylz",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果你喜欢更详略的、可重用的结果映射，你可以使用下面的等价形式："
				}
			]
		},
		{
			"ID": "20211219124633-a58v3zo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219124633-a58v3zo",
				"updated": "20211219121227"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cresultMap id=\"blogResult\" type=\"Blog\"\u003e\n\t\u003cid property=\"id\" column=\"blog_id\" /\u003e\n\t\u003cresult property=\"title\" column=\"blog_title\"/\u003e\n\t\u003ccollection property=\"posts\" ofType=\"Post\" resultMap=\"blogPostResult\" columnPrefix=\"post_\"/\u003e\n\u003c/resultMap\u003e\n\n\u003cresultMap id=\"blogPostResult\" type=\"Post\"\u003e\n\t\u003cid property=\"id\" column=\"id\"/\u003e\n\t\u003cresult property=\"subject\" column=\"subject\"/\u003e\n\t\u003cresult property=\"body\" column=\"body\"/\u003e\n\u003c/resultMap\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-2kaxjyi",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20211219124633-2kaxjyi",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "集合的多结果集（ResultSet）"
				}
			]
		},
		{
			"ID": "20211219124633-wjsqxep",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-wjsqxep",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "像关联元素那样，我们可以通过执行存储过程实现，它会执行两个查询并返回两个结果集，一个是博客的结果集，另一个是文章的结果集："
				}
			]
		},
		{
			"ID": "20211219124633-8cb9r7z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-8cb9r7z",
				"updated": "20211219121240"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "SELECT * FROM BLOG WHERE ID = #{id}"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20211219124633-7r9e9je",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-7r9e9je",
				"updated": "20211219121242"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "SELECT * FROM POST WHERE BLOG_ID = #{id}"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20211219124633-zf3xn34",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-zf3xn34",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在映射语句中，必须通过 resultSets 属性为每个结果集指定一个名字，多个名字使用逗号隔开。"
				}
			]
		},
		{
			"ID": "20211219124633-4ei278e",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219124633-4ei278e",
				"updated": "20211219121255"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cselect id=\"selectBlog\" resultSets=\"blogs,posts\" resultMap=\"blogResult\"\u003e\n\t{call getBlogsAndPosts(#{id,jdbcType=INTEGER,mode=IN})}\n\u003c/select\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-m7ufavb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-m7ufavb",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们指定 “posts” 集合将会使用存储在 “posts” 结果集中的数据进行填充："
				}
			]
		},
		{
			"ID": "20211219124633-wk6jzki",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219124633-wk6jzki",
				"updated": "20211219121313"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cresultMap id=\"blogResult\" type=\"Blog\"\u003e\n\t\u003cid property=\"id\" column=\"id\" /\u003e\n\t\u003cresult property=\"title\" column=\"title\"/\u003e\n\t\u003ccollection property=\"posts\" ofType=\"Post\" resultSet=\"posts\" column=\"id\" foreignColumn=\"blog_id\"\u003e\n\t\t\u003cid property=\"id\" column=\"id\"/\u003e\n\t\t\u003cresult property=\"subject\" column=\"subject\"/\u003e\n\t\t\u003cresult property=\"body\" column=\"body\"/\u003e\n\t\u003c/collection\u003e\n\u003c/resultMap\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-so5zgzg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-so5zgzg",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意 对关联或集合的映射，并没有深度、广度或组合上的要求。但在映射时要留意性能问题。 在探索最佳实践的过程中，应用的单元测试和性能测试会是你的好帮手。 而 MyBatis 的好处在于，可以在不对你的代码引入重大变更（如果有）的情况下，允许你之后改变你的想法。"
				}
			]
		},
		{
			"ID": "20211219124633-o3n1cth",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-o3n1cth",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "高级关联和集合映射是一个深度话题。文档的介绍只能到此为止。配合少许的实践，你会很快了解全部的用法。"
				}
			]
		},
		{
			"ID": "20211219124633-4lmg2b3",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20211219124633-4lmg2b3",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "鉴别器"
				}
			]
		},
		{
			"ID": "20211219124633-v6coz99",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219124633-v6coz99",
				"updated": "20211219121340"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cdiscriminator javaType=\"int\" column=\"draft\"\u003e\n\t\u003ccase value=\"1\" resultType=\"DraftPost\"/\u003e\n\u003c/discriminator\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-h715sea",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-h715sea",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "有时候，一个数据库查询可能会返回多个不同的结果集（但总体上还是有一定的联系的）。 鉴别器（discriminator）元素就是被设计来应对这种情况的，另外也能处理其它情况，例如类的继承层次结构。 鉴别器的概念很好理解——它很像 Java 语言中的 switch 语句。"
				}
			]
		},
		{
			"ID": "20211219124633-vglkdjz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-vglkdjz",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一个鉴别器的定义需要指定 column 和 javaType 属性。column 指定了 MyBatis 查询被比较值的地方。 而 javaType 用来确保使用正确的相等测试（虽然很多情况下字符串的相等测试都可以工作）。例如："
				}
			]
		},
		{
			"ID": "20211219124633-uuawg00",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219124633-uuawg00",
				"updated": "20211219121420"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cresultMap id=\"vehicleResult\" type=\"Vehicle\"\u003e\n\t\u003cid property=\"id\" column=\"id\" /\u003e\n\t\u003cresult property=\"vin\" column=\"vin\"/\u003e\n\t\u003cresult property=\"year\" column=\"year\"/\u003e\n\t\u003cresult property=\"make\" column=\"make\"/\u003e\n\t\u003cresult property=\"model\" column=\"model\"/\u003e\n\t\u003cresult property=\"color\" column=\"color\"/\u003e\n\t\u003cdiscriminator javaType=\"int\" column=\"vehicle_type\"\u003e\n\t\t\u003ccase value=\"1\" resultMap=\"carResult\"/\u003e\n\t\t\u003ccase value=\"2\" resultMap=\"truckResult\"/\u003e\n\t\t\u003ccase value=\"3\" resultMap=\"vanResult\"/\u003e\n\t\t\u003ccase value=\"4\" resultMap=\"suvResult\"/\u003e\n\t\u003c/discriminator\u003e\n\u003c/resultMap\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-6fvi4su",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-6fvi4su",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在这个示例中，MyBatis 会从结果集中得到每条记录，然后比较它的 vehicle type 值。 如果它匹配任意一个鉴别器的 case，就会使用这个 case 指定的结果映射。 这个过程是互斥的，也就是说，剩余的结果映射将被忽略（除非它是扩展的，我们将在稍后讨论它）。 如果不能匹配任何一个 case，MyBatis 就只会使用鉴别器块外定义的结果映射。 所以，如果 carResult 的声明如下："
				}
			]
		},
		{
			"ID": "20211219124633-fjfucfh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219124633-fjfucfh",
				"updated": "20211219121439"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cresultMap id=\"carResult\" type=\"Car\"\u003e\n\t\u003cresult property=\"doorCount\" column=\"door_count\" /\u003e\n\u003c/resultMap\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-0s8i4l3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-0s8i4l3",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "那么只有 doorCount 属性会被加载。这是为了即使鉴别器的 case 之间都能分为完全独立的一组，尽管和父结果映射可能没有什么关系。在上面的例子中，我们当然知道 cars 和 vehicles 之间有关系，也就是 Car 是一个 Vehicle。因此，我们希望剩余的属性也能被加载。而这只需要一个小修改。"
				}
			]
		},
		{
			"ID": "20211219124633-d9l6v98",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219124633-d9l6v98",
				"updated": "20211219121449"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cresultMap id=\"carResult\" type=\"Car\" extends=\"vehicleResult\"\u003e\n\t\u003cresult property=\"doorCount\" column=\"door_count\" /\u003e\n\u003c/resultMap\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-aijusqa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-aijusqa",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "现在 vehicleResult 和 carResult 的属性都会被加载了。"
				}
			]
		},
		{
			"ID": "20211219124633-pmu2ue0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-pmu2ue0",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可能有人又会觉得映射的外部定义有点太冗长了。 因此，对于那些更喜欢简洁的映射风格的人来说，还有另一种语法可以选择。例如："
				}
			]
		},
		{
			"ID": "20211219124633-053hume",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219124633-053hume",
				"updated": "20211219121554"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cresultMap id=\"vehicleResult\" type=\"Vehicle\"\u003e\n\t\u003cid property=\"id\" column=\"id\" /\u003e\n\t\u003cresult property=\"vin\" column=\"vin\"/\u003e\n\t\u003cresult property=\"year\" column=\"year\"/\u003e\n\t\u003cresult property=\"make\" column=\"make\"/\u003e\n\t\u003cresult property=\"model\" column=\"model\"/\u003e\n\t\u003cresult property=\"color\" column=\"color\"/\u003e\n\t\u003cdiscriminator javaType=\"int\" column=\"vehicle_type\"\u003e\n\t\t\u003ccase value=\"1\" resultType=\"carResult\"\u003e\n\t\t\u003cresult property=\"doorCount\" column=\"door_count\" /\u003e\n\t\t\u003c/case\u003e\n\t\t\u003ccase value=\"2\" resultType=\"truckResult\"\u003e\n\t\t\u003cresult property=\"boxSize\" column=\"box_size\" /\u003e\n\t\t\u003cresult property=\"extendedCab\" column=\"extended_cab\" /\u003e\n\t\t\u003c/case\u003e\n\t\t\u003ccase value=\"3\" resultType=\"vanResult\"\u003e\n\t\t\u003cresult property=\"powerSlidingDoor\" column=\"power_sliding_door\" /\u003e\n\t\t\u003c/case\u003e\n\t\t\u003ccase value=\"4\" resultType=\"suvResult\"\u003e\n\t\t\u003cresult property=\"allWheelDrive\" column=\"all_wheel_drive\" /\u003e\n\t\t\u003c/case\u003e\n\t\u003c/discriminator\u003e\n\u003c/resultMap\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-bf4pqy6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-bf4pqy6",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "提示 请注意，这些都是结果映射，如果你完全不设置任何的 result 元素，MyBatis 将为你自动匹配列和属性。所以上面的例子大多都要比实际的更复杂。 这也表明，大多数数据库的复杂度都比较高，我们不太可能一直依赖于这种机制。"
				}
			]
		},
		{
			"ID": "20211219124633-xrtt7bx",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20211219124633-xrtt7bx",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "自动映射"
				}
			]
		},
		{
			"ID": "20211219124633-9xd9uni",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-9xd9uni",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "正如你在前面一节看到的，在简单的场景下，MyBatis 可以为你自动映射查询结果。但如果遇到复杂的场景，你需要构建一个结果映射。 但是在本节中，你将看到，你可以混合使用这两种策略。让我们深入了解一下自动映射是怎样工作的。"
				}
			]
		},
		{
			"ID": "20211219124633-83tjf5a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-83tjf5a",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当自动映射查询结果时，MyBatis 会获取结果中返回的列名并在 Java 类中查找相同名字的属性（忽略大小写）。 这意味着如果发现了 ID 列和 id 属性，MyBatis 会将列 ID 的值赋给 id 属性。"
				}
			]
		},
		{
			"ID": "20211219124633-h4k6v98",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-h4k6v98",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通常数据库列使用大写字母组成的单词命名，单词间用下划线分隔；而 Java 属性一般遵循驼峰命名法约定。为了在这两种命名方式之间启用自动映射，需要将 mapUnderscoreToCamelCase 设置为 true。"
				}
			]
		},
		{
			"ID": "20211219124633-jvgv022",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-jvgv022",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "甚至在提供了结果映射后，自动映射也能工作。在这种情况下，对于每一个结果映射，在 ResultSet 出现的列，如果没有设置手动映射，将被自动映射。在自动映射处理完毕后，再处理手动映射。 在下面的例子中，id 和 userName 列将被自动映射，hashed_password 列将根据配置进行映射。"
				}
			]
		},
		{
			"ID": "20211219124633-j08yu81",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219124633-j08yu81",
				"updated": "20211219121632"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cselect id=\"selectUsers\" resultMap=\"userResultMap\"\u003e\n\tselect\n\tuser_id as \"id\",\n\tuser_name as \"userName\",\n\thashed_password\n\tfrom some_table\n\twhere id = #{id}\n\u003c/select\u003e\n\u003cresultMap id=\"userResultMap\" type=\"User\"\u003e\n\t\u003cresult property=\"password\" column=\"hashed_password\"/\u003e\n\u003c/resultMap\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-cidzjc5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-cidzjc5",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "有三种自动映射等级："
				}
			]
		},
		{
			"ID": "20211219124633-zh3tyua",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20211219124633-zh3tyua",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"ID": "20211219124633-ytwsxo6",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219124633-ytwsxo6"
					},
					"Children": [
						{
							"ID": "20211219124633-iiawb79",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219124633-iiawb79"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "NONE - 禁用自动映射。仅对手动映射的属性进行映射。"
								}
							]
						}
					]
				},
				{
					"ID": "20211219124633-dt7s6mt",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219124633-dt7s6mt"
					},
					"Children": [
						{
							"ID": "20211219124633-5ljeimp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219124633-5ljeimp"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "PARTIAL - 对除在内部定义了嵌套结果映射（也就是连接的属性）以外的属性进行映射"
								}
							]
						}
					]
				},
				{
					"ID": "20211219124633-j23u4c8",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219124633-j23u4c8"
					},
					"Children": [
						{
							"ID": "20211219124633-ve4axu4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219124633-ve4axu4"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "FULL - 自动映射所有属性。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219124633-1dlav03",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-1dlav03",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "默认值是 PARTIAL，这是有原因的。当对连接查询的结果使用 FULL 时，连接查询会在同一行中获取多个不同实体的数据，因此可能导致非预期的映射。 下面的例子将展示这种风险："
				}
			]
		},
		{
			"ID": "20211219124633-zcngy6v",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219124633-zcngy6v",
				"updated": "20211219121704"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cselect id=\"selectBlog\" resultMap=\"blogResult\"\u003e\n\tselect\n\tB.id,\n\tB.title,\n\tA.username,\n\tfrom Blog B left outer join Author A on B.author_id = A.id\n\twhere B.id = #{id}\n\u003c/select\u003e\n\u003cresultMap id=\"blogResult\" type=\"Blog\"\u003e\n\t\u003cassociation property=\"author\" resultMap=\"authorResult\"/\u003e\n\u003c/resultMap\u003e\n\u003cresultMap id=\"authorResult\" type=\"Author\"\u003e\n\t\u003cresult property=\"username\" column=\"author_username\"/\u003e\n\u003c/resultMap\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-h7rpkza",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-h7rpkza",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在该结果映射中，Blog 和 Author 均将被自动映射。但是注意 Author 有一个 id 属性，在 ResultSet 中也有一个名为 id 的列，所以 Author 的 id 将填入 Blog 的 id，这可不是你期望的行为。 所以，要谨慎使用 FULL。"
				}
			]
		},
		{
			"ID": "20211219124633-e48a91k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-e48a91k",
				"updated": "20211219124633"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "无论设置的自动映射等级是哪种，你都可以通过在结果映射上设置 autoMapping 属性来为指定的结果映射设置启用/禁用自动映射。"
				}
			]
		},
		{
			"ID": "20211219124633-7lumh66",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219124633-7lumh66",
				"updated": "20211219121716"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cresultMap id=\"userResultMap\" type=\"User\" autoMapping=\"false\"\u003e\n\t\u003cresult property=\"password\" column=\"hashed_password\"/\u003e\n\u003c/resultMap\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219124633-es8p1on",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219124633-es8p1on",
				"updated": "20211219124633"
			}
		}
	]
}