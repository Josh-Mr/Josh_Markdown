{
	"ID": "20211219090050-1c5s03c",
	"Type": "NodeDocument",
	"Properties": {
		"icon": "1f4dd",
		"id": "20211219090050-1c5s03c",
		"title": "Mybatis_Mapper_XML配置",
		"updated": "20211219090320"
	},
	"Children": [
		{
			"ID": "20211219090142-ddkbjbm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-ddkbjbm",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一、顶级元素"
				}
			]
		},
		{
			"ID": "20211219090142-1bxkshl",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20211219090142-1bxkshl",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"ID": "20211219090142-yj5gsqt",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-yj5gsqt"
					},
					"Children": [
						{
							"ID": "20211219090142-nmw1k0q",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-nmw1k0q"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "cache --该命名空间的缓存配置"
								}
							]
						}
					]
				},
				{
					"ID": "20211219090142-g4gxjxp",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-g4gxjxp"
					},
					"Children": [
						{
							"ID": "20211219090142-xr3s2ux",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-xr3s2ux"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "cache-ref --引用其他命名空间的缓存配置"
								}
							]
						}
					]
				},
				{
					"ID": "20211219090142-yrzcn7e",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-yrzcn7e"
					},
					"Children": [
						{
							"ID": "20211219090142-9sfk392",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-9sfk392"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "resultMap --描述从数据库返回的结果集加载的对象"
								}
							]
						}
					]
				},
				{
					"ID": "20211219090142-ramki0q",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-ramki0q"
					},
					"Children": [
						{
							"ID": "20211219090142-lmor8yg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-lmor8yg"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "parameterMap --  老式风格的参数映射。此元素已被废弃，并可能在将来被移除！请使用行内参数映射。文档中不会介绍此元素。"
								}
							]
						}
					]
				},
				{
					"ID": "20211219090142-l0ufmyk",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-l0ufmyk"
					},
					"Children": [
						{
							"ID": "20211219090142-3vyyzra",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-3vyyzra"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "sql --定义sql 引用的可重用语句块"
								}
							]
						}
					]
				},
				{
					"ID": "20211219090142-78atxva",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-78atxva"
					},
					"Children": [
						{
							"ID": "20211219090142-ebfwc93",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-ebfwc93"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "insert --插入语句"
								}
							]
						}
					]
				},
				{
					"ID": "20211219090142-7v46036",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-7v46036"
					},
					"Children": [
						{
							"ID": "20211219090142-1ufa6gg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-1ufa6gg"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "update --更新语句"
								}
							]
						}
					]
				},
				{
					"ID": "20211219090142-dtv3uin",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-dtv3uin"
					},
					"Children": [
						{
							"ID": "20211219090142-kj6bd28",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-kj6bd28"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "delete -- 删除语句"
								}
							]
						}
					]
				},
				{
					"ID": "20211219090142-mlooe2t",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-mlooe2t"
					},
					"Children": [
						{
							"ID": "20211219090142-znagavy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-znagavy"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "select --查询语句"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219090142-wkyy8sj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-wkyy8sj",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二、元素的详解"
				}
			]
		},
		{
			"ID": "20211219090142-vqsi9fb",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20211219090142-vqsi9fb",
				"updated": "20211219090320"
			},
			"Children": [
				{
					"ID": "20211219090142-n507l1n",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-n507l1n",
						"updated": "20211219090320"
					},
					"Children": [
						{
							"ID": "20211219090142-16zbxqv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-16zbxqv"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "select"
								}
							]
						},
						{
							"ID": "20211219090300-o6sox71",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20211219090300-o6sox71",
								"updated": "20211219090320"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "eG1s"
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "\u003cselect\n  id=\"selectPerson\"\n  parameterType=\"int\"\n  parameterMap=\"deprecated\"\n  resultType=\"hashmap\"\n  resultMap=\"personResultMap\"\n  flushCache=\"false\"\n  useCache=\"true\"\n  timeout=\"10\"\n  fetchSize=\"256\"\n  statementType=\"PREPARED\"\n  resultSetType=\"FORWARD_ONLY\"\u003e\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219090142-chfbul2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-chfbul2",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Select 元素的属性"
				}
			]
		},
		{
			"ID": "20211219090142-4jljx8v",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0
			],
			"Properties": {
				"id": "20211219090142-4jljx8v",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 15,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "属性"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 201,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "描述"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 4,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "id"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 52,
							"TableCellContentMaxWidth": 201,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在命名空间中唯一的标识符，可以被用来引用这条语句。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 15,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "parameterType"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 159,
							"TableCellContentMaxWidth": 201,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 14,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "parameterMap"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 91,
							"TableCellContentMaxWidth": 201,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用于引用外部 parameterMap 的属性，目前已被废弃。请使用行内参数映射和 parameterType 属性。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 12,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "resultType"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 180,
							"TableCellContentMaxWidth": 201,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "期望从这条语句中返回结果的类全限定名或别名。 注意，如果返回的是集合，那应该设置为 "
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "集合包含的类型"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " ，而不是集合本身的类型。 resultType 和 resultMap 之间只能同时使用一个。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 11,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "resultMap"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 163,
							"TableCellContentMaxWidth": 201,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对外部 resultMap 的命名引用。结果映射是 MyBatis 最强大的特性，如果你对其理解透彻，许多复杂的映射问题都能迎刃而解。 resultType 和 resultMap 之间只能同时使用一个。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 12,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "flushCache"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 87,
							"TableCellContentMaxWidth": 201,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：false。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 10,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "useCache"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 95,
							"TableCellContentMaxWidth": 201,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "将其设置为 true 后，将会导致本条语句的结果被二级缓存缓存起来，默认值：对 select 元素为 true。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 9,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "timeout"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 109,
							"TableCellContentMaxWidth": 201,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 11,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "fetchSize"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 116,
							"TableCellContentMaxWidth": 201,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "这是一个给驱动的建议值，尝试让驱动程序每次批量返回的结果行数等于这个设置值。 默认值为未设置（unset）（依赖驱动）。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 15,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "statementType"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 133,
							"TableCellContentMaxWidth": 201,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 15,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "resultSetType"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 125,
							"TableCellContentMaxWidth": 201,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "FORWARD_ONLY，SCROLL_SENSITIVE, SCROLL_INSENSITIVE 或 DEFAULT（等价于 unset） 中的一个，默认值为 unset （依赖数据库驱动）。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 12,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "databaseId"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 156,
							"TableCellContentMaxWidth": 201,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有不带 databaseId 或匹配当前 databaseId 的语句；如果带和不带的语句都有，则不带的会被忽略。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 15,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "resultOrdered"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 201,
							"TableCellContentMaxWidth": 201,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "这个设置仅针对嵌套结果 select 语句：如果为 true，将会假设包含了嵌套结果集或是分组，当返回一个主结果行时，就不会产生对前面结果集的引用。 这就使得在获取嵌套结果集的时候不至于内存不够用。默认值：false。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 12,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "resultSets"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 114,
							"TableCellContentMaxWidth": 201,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "这个设置仅适用于多结果集的情况。它将列出语句执行后返回的结果集并赋予每个结果集一个名称，多个名称之间以逗号分隔。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219090142-i9gd96h",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20211219090142-i9gd96h",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"ID": "20211219090142-m1pmocf",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-m1pmocf"
					},
					"Children": [
						{
							"ID": "20211219090142-ks8cc1r",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-ks8cc1r"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "insert、update 、delete"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219090142-blfrxpp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-blfrxpp",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cinsert"
				}
			]
		},
		{
			"ID": "20211219090142-zv0vab0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-zv0vab0",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "  id=\"insertAuthor\""
				}
			]
		},
		{
			"ID": "20211219090142-t954d37",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-t954d37",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "  parameterType=\"domain.blog.Author\""
				}
			]
		},
		{
			"ID": "20211219090142-q8vpbjy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-q8vpbjy",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "  flushCache=\"true\""
				}
			]
		},
		{
			"ID": "20211219090142-6d0spcg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-6d0spcg",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "  statementType=\"PREPARED\""
				}
			]
		},
		{
			"ID": "20211219090142-84av69d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-84av69d",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "  keyProperty=\"\""
				}
			]
		},
		{
			"ID": "20211219090142-ad57jf8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-ad57jf8",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "  keyColumn=\"\""
				}
			]
		},
		{
			"ID": "20211219090142-2ijguq8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-2ijguq8",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": " ** useGeneratedKeys=\"\"**"
				}
			]
		},
		{
			"ID": "20211219090142-9e4nw0g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-9e4nw0g",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "  timeout=\"20\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-i53pf72",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-i53pf72",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cupdate"
				}
			]
		},
		{
			"ID": "20211219090142-f0ow366",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-f0ow366",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "  id=\"updateAuthor\""
				}
			]
		},
		{
			"ID": "20211219090142-amxt7n2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-amxt7n2",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "  parameterType=\"domain.blog.Author\""
				}
			]
		},
		{
			"ID": "20211219090142-4jnpmi0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-4jnpmi0",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "  flushCache=\"true\""
				}
			]
		},
		{
			"ID": "20211219090142-bz4q9ys",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-bz4q9ys",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "  statementType=\"PREPARED\""
				}
			]
		},
		{
			"ID": "20211219090142-wtnns5b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-wtnns5b",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "  timeout=\"20\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-py7lfgr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-py7lfgr",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cdelete"
				}
			]
		},
		{
			"ID": "20211219090142-4t9uw7k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-4t9uw7k",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "  id=\"deleteAuthor\""
				}
			]
		},
		{
			"ID": "20211219090142-tlo127n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-tlo127n",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "  parameterType=\"domain.blog.Author\""
				}
			]
		},
		{
			"ID": "20211219090142-4oyf4z6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-4oyf4z6",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "  flushCache=\"true\""
				}
			]
		},
		{
			"ID": "20211219090142-g6eirtz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-g6eirtz",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "  statementType=\"PREPARED\""
				}
			]
		},
		{
			"ID": "20211219090142-7g475b2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-7g475b2",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "  timeout=\"20\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-hjs72sm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-hjs72sm",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Insert, Update, Delete 元素的属性"
				}
			]
		},
		{
			"ID": "20211219090142-glkkw4q",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0
			],
			"Properties": {
				"id": "20211219090142-glkkw4q",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 18,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "属性"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 217,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "描述"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 4,
							"TableCellContentMaxWidth": 18,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "id"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 52,
							"TableCellContentMaxWidth": 217,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在命名空间中唯一的标识符，可以被用来引用这条语句。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 15,
							"TableCellContentMaxWidth": 18,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "parameterType"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 159,
							"TableCellContentMaxWidth": 217,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 14,
							"TableCellContentMaxWidth": 18,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "parameterMap"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 91,
							"TableCellContentMaxWidth": 217,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用于引用外部 parameterMap 的属性，目前已被废弃。请使用行内参数映射和 parameterType 属性。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 12,
							"TableCellContentMaxWidth": 18,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "flushCache"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 122,
							"TableCellContentMaxWidth": 217,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：（对 insert、update 和 delete 语句）true。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 9,
							"TableCellContentMaxWidth": 18,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "timeout"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 109,
							"TableCellContentMaxWidth": 217,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 15,
							"TableCellContentMaxWidth": 18,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "statementType"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 133,
							"TableCellContentMaxWidth": 217,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 18,
							"TableCellContentMaxWidth": 18,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "useGeneratedKeys"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 198,
							"TableCellContentMaxWidth": 217,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "（仅适用于 insert 和 update）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系型数据库管理系统的自动递增字段），默认值：false。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 13,
							"TableCellContentMaxWidth": 18,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "keyProperty"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 217,
							"TableCellContentMaxWidth": 217,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "（仅适用于 insert 和 update）指定能够唯一识别对象的属性，MyBatis 会使用 getGeneratedKeys 的返回值或 insert 语句的 selectKey 子元素设置它的值，默认值：未设置（unset）。如果生成列不止一个，可以用逗号分隔多个属性名称。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 11,
							"TableCellContentMaxWidth": 18,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "keyColumn"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 184,
							"TableCellContentMaxWidth": 217,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "（仅适用于 insert 和 update）设置生成键值在表中的列名，在某些数据库（像 PostgreSQL）中，当主键列不是表中的第一列的时候，是必须设置的。如果生成列不止一个，可以用逗号分隔多个属性名称。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 12,
							"TableCellContentMaxWidth": 18,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "databaseId"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 156,
							"TableCellContentMaxWidth": 217,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有不带 databaseId 或匹配当前 databaseId 的语句；如果带和不带的语句都有，则不带的会被忽略。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219090142-4zvg62e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-4zvg62e",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下面是 insert，update 和 delete 语句的示例："
				}
			]
		},
		{
			"ID": "20211219090142-zvq58f4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-zvq58f4",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cinsert id=\"insertAuthor\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-y8nvy6w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-y8nvy6w",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "insert into Author (id,username,password,email,bio)"
				}
			]
		},
		{
			"ID": "20211219090142-xykr7o0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-xykr7o0",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "values ("
				},
				{
					"Type": "NodeTag",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeTagOpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "{id},"
						},
						{
							"Type": "NodeTagCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "{username},"
				},
				{
					"Type": "NodeTag",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeTagOpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "{password},"
						},
						{
							"Type": "NodeTagCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "{email},#{bio})"
				}
			]
		},
		{
			"ID": "20211219090142-ygq1xrk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-ygq1xrk",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/insert\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-0it6oiy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-0it6oiy",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cupdate id=\"updateAuthor\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-6mvr0ac",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-6mvr0ac",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "update Author set"
				}
			]
		},
		{
			"ID": "20211219090142-zy9pa0i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-zy9pa0i",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "username = #{username},"
				}
			]
		},
		{
			"ID": "20211219090142-iw2zka3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-iw2zka3",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "password = #{password},"
				}
			]
		},
		{
			"ID": "20211219090142-5tb1xpr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-5tb1xpr",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "email = #{email},"
				}
			]
		},
		{
			"ID": "20211219090142-czn8jdo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-czn8jdo",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "bio = #{bio}"
				}
			]
		},
		{
			"ID": "20211219090142-eowbo4m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-eowbo4m",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "where id = #{id}"
				}
			]
		},
		{
			"ID": "20211219090142-nhf0swb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-nhf0swb",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/update\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-dtspvtk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-dtspvtk",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cdelete id=\"deleteAuthor\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-j2qn5n3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-j2qn5n3",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "delete from Author where id = #{id}"
				}
			]
		},
		{
			"ID": "20211219090142-3lrtg6m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-3lrtg6m",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/delete\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-inqwn2t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-inqwn2t",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如前所述，插入语句的配置规则更加丰富，在插入语句里面有一些额外的属性和子元素用来处理主键的生成，并且提供了多种生成方式。"
				}
			]
		},
		{
			"ID": "20211219090142-vciz7cl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-vciz7cl",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "首先，如果你的数据库支持自动生成主键的字段（比如 MySQL 和 SQL Server），那么你可以设置 useGeneratedKeys=”true”，然后再把 keyProperty 设置为目标属性就 OK 了。例如，如果上面的 Author 表已经在 id 列上使用了自动生成，那么语句可以修改为："
				}
			]
		},
		{
			"ID": "20211219090142-jaamu7y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-jaamu7y",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cinsert id=\"insertAuthor\" useGeneratedKeys=\"true\""
				}
			]
		},
		{
			"ID": "20211219090142-x0jdjj2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-x0jdjj2",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "keyProperty=\"id\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-bbadb3o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-bbadb3o",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "insert into Author (username,password,email,bio)"
				}
			]
		},
		{
			"ID": "20211219090142-rlx5oww",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-rlx5oww",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "values ("
				},
				{
					"Type": "NodeTag",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeTagOpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "{username},"
						},
						{
							"Type": "NodeTagCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "{password},"
				},
				{
					"Type": "NodeTag",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeTagOpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "{email},"
						},
						{
							"Type": "NodeTagCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "{bio})"
				}
			]
		},
		{
			"ID": "20211219090142-y8z77yg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-y8z77yg",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/insert\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-lwqqij4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-lwqqij4",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果你的数据库还支持多行插入, 你也可以传入一个 Author 数组或集合，并返回自动生成的主键。"
				}
			]
		},
		{
			"ID": "20211219090142-ftckkka",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-ftckkka",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cinsert id=\"insertAuthor\" useGeneratedKeys=\"true\""
				}
			]
		},
		{
			"ID": "20211219090142-x1slwh2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-x1slwh2",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "keyProperty=\"id\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-qxlvkix",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-qxlvkix",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "insert into Author (username, password, email, bio) values"
				}
			]
		},
		{
			"ID": "20211219090142-3ca50jd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-3ca50jd",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cforeach item=\"item\" collection=\"list\" separator=\",\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-wf6310c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-wf6310c",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "(#{item.username}, #{item.password}, #{item.email}, #{item.bio})"
				}
			]
		},
		{
			"ID": "20211219090142-k89hw8r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-k89hw8r",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/foreach\u003e\u003c/insert\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-r94i9pw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-r94i9pw",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于不支持自动生成主键列的数据库和可能不支持自动生成主键的 JDBC 驱动，MyBatis 有另外一种方法来生成主键。"
				}
			]
		},
		{
			"ID": "20211219090142-5kg3xyt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-5kg3xyt",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里有一个简单（也很傻）的示例，它可以生成一个随机 ID（不建议实际使用，这里只是为了展示 MyBatis 处理问题的灵活性和宽容度）："
				}
			]
		},
		{
			"ID": "20211219090142-g3d1kds",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-g3d1kds",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cinsert id=\"insertAuthor\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-iphclbq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-iphclbq",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cselectKey keyProperty=\"id\" resultType=\"int\" order=\"BEFORE\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-vq7hg78",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-vq7hg78",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "select CAST(RANDOM()*1000000 as INTEGER) a from SYSIBM.SYSDUMMY1"
				}
			]
		},
		{
			"ID": "20211219090142-3wc5inb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-3wc5inb",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/selectKey\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-98ey2yk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-98ey2yk",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "insert into Author"
				}
			]
		},
		{
			"ID": "20211219090142-q1kr675",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-q1kr675",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "(id, username, password, email,bio, favourite_section)"
				}
			]
		},
		{
			"ID": "20211219090142-1btkof3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-1btkof3",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "values"
				}
			]
		},
		{
			"ID": "20211219090142-ixtldwf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-ixtldwf",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "(#{id}, #{username}, #{password}, #{email}, #{bio}, #{favouriteSection,jdbcType=VARCHAR})"
				}
			]
		},
		{
			"ID": "20211219090142-njgm90l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-njgm90l",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/insert\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-ku5asyx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-ku5asyx",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在上面的示例中，首先会运行 selectKey 元素中的语句，并设置 Author 的 id，然后才会调用插入语句。这样就实现了数据库自动生成主键类似的行为，同时保持了 Java 代码的简洁。"
				}
			]
		},
		{
			"ID": "20211219090142-3zxeuy9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-3zxeuy9",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "selectKey 元素描述如下："
				}
			]
		},
		{
			"ID": "20211219090142-ayaucgd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-ayaucgd",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cselectKey"
				}
			]
		},
		{
			"ID": "20211219090142-h4asslo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-h4asslo",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "keyProperty=\"id\""
				}
			]
		},
		{
			"ID": "20211219090142-aatppws",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-aatppws",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "resultType=\"int\""
				}
			]
		},
		{
			"ID": "20211219090142-hm9vbsv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-hm9vbsv",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "order=\"BEFORE\""
				}
			]
		},
		{
			"ID": "20211219090142-oe5f6dw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-oe5f6dw",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "statementType=\"PREPARED\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-fouhay0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-fouhay0",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "selectKey 元素的属性"
				}
			]
		},
		{
			"ID": "20211219090142-eshnit4",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0
			],
			"Properties": {
				"id": "20211219090142-eshnit4",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 15,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "属性"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 226,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "描述"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 13,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "keyProperty"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 91,
							"TableCellContentMaxWidth": 226,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "selectKey语句结果应该被设置到的目标属性。如果生成列不止一个，可以用逗号分隔多个属性名称。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 11,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "keyColumn"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 80,
							"TableCellContentMaxWidth": 226,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "返回结果集中生成列属性的列名。如果生成列不止一个，可以用逗号分隔多个属性名称。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 12,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "resultType"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 195,
							"TableCellContentMaxWidth": 226,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "结果的类型。通常 MyBatis 可以推断出来，但是为了更加准确，写上也不会有什么问题。MyBatis 允许将任何简单类型用作主键的类型，包括字符串。如果生成列不止一个，则可以使用包含期望属性的 Object 或 Map。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 7,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "order"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 226,
							"TableCellContentMaxWidth": 226,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "可以设置为 BEFORE或AFTER。如果设置为BEFORE，那么它首先会生成主键，设置keyProperty再执行插入语句。如果设置为AFTER，那么先执行插入语句，然后是selectKey中的语句 - 这和 Oracle 数据库的行为相似，在插入语句内部可能有嵌入索引调用。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 15,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "statementType"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 131,
							"TableCellContentMaxWidth": 226,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "和前面一样，MyBatis 支持STATEMENT，PREPARED和CALLABLE类型的映射语句，分别代表Statement,PreparedStatement和CallableStatement类型。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219090142-35ewd0s",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20211219090142-35ewd0s",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"ID": "20211219090142-lpireef",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-lpireef"
					},
					"Children": [
						{
							"ID": "20211219090142-pqqmapd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-pqqmapd"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "SQL"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219090142-qlh6c4k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-qlh6c4k",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个元素可以用来定义可重用的 SQL 代码片段，以便在其它语句中使用。 参数可以静态地（在加载的时候）确定下来，并且可以在不同的 include 元素中定义不同的参数值。比如："
				}
			]
		},
		{
			"ID": "20211219090142-79madsf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-79madsf",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003csql id=\"userColumns\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-f310zah",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-f310zah",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "    "
				},
				{
					"Type": "NodeInlineMath",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeInlineMathOpenMarker"
						},
						{
							"Type": "NodeInlineMathContent",
							"Data": "{alias}.id,"
						},
						{
							"Type": "NodeInlineMathCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "{alias}.username,${alias}.password"
				}
			]
		},
		{
			"ID": "20211219090142-o098yp1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-o098yp1",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/sql\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-sudgl3d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-sudgl3d",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个 SQL 片段可以在其它语句中使用，例如："
				}
			]
		},
		{
			"ID": "20211219090142-lidl5q7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-lidl5q7",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cselect id=\"selectUsers\" resultType=\"map\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-ru9vixf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-ru9vixf",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "select"
				}
			]
		},
		{
			"ID": "20211219090142-jebrm6c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-jebrm6c",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cinclude refid=\"userColumns\"\u003e\u003cproperty name=\"alias\" value=\"t1\"/\u003e\u003c/include\u003e,"
				}
			]
		},
		{
			"ID": "20211219090142-dnihhq5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-dnihhq5",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cinclude refid=\"userColumns\"\u003e\u003cproperty name=\"alias\" value=\"t2\"/\u003e\u003c/include\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-ai2587v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-ai2587v",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "from some_table t1"
				}
			]
		},
		{
			"ID": "20211219090142-rz6m5un",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-rz6m5un",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "cross join some_table t2"
				}
			]
		},
		{
			"ID": "20211219090142-dbfr2l1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-dbfr2l1",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/select\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-ijv1sm4",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20211219090142-ijv1sm4",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "参数"
				}
			]
		},
		{
			"ID": "20211219090142-wilwrhx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-wilwrhx",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "之前见到的所有语句都使用了简单的参数形式。但实际上，参数是 MyBatis 非常强大的元素。对于大多数简单的使用场景，你都不需要使用复杂的参数，比如："
				}
			]
		},
		{
			"ID": "20211219090142-y7eyygc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-y7eyygc",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cselect id=\"selectUsers\" resultType=\"User\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-iv7dpwv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-iv7dpwv",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "select id, username, password"
				}
			]
		},
		{
			"ID": "20211219090142-a7pzimm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-a7pzimm",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "from users"
				}
			]
		},
		{
			"ID": "20211219090142-8aghdpg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-8aghdpg",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "where id = #{id}"
				}
			]
		},
		{
			"ID": "20211219090142-1xqow7i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-1xqow7i",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/select\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-qpeijcw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-qpeijcw",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上面的这个示例说明了一个非常简单的命名参数映射。鉴于参数类型（parameterType）会被自动设置为 int，这个参数可以随意命名。原始类型或简单数据类型（比如 Integer 和 String）因为没有其它属性，会用它们的值来作为参数。 然而，如果传入一个复杂的对象，行为就会有点不一样了。比如："
				}
			]
		},
		{
			"ID": "20211219090142-ti32sj2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-ti32sj2",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cinsert id=\"insertUser\" parameterType=\"User\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-pmtu9ce",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-pmtu9ce",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "insert into users (id, username, password)"
				}
			]
		},
		{
			"ID": "20211219090142-iil2e33",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-iil2e33",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "values (#{id}, #{username}, #{password})"
				}
			]
		},
		{
			"ID": "20211219090142-w8sratt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-w8sratt",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/insert\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-3xcgw9a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-3xcgw9a",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果 User 类型的参数对象传递到了语句中，会查找 id、username 和 password 属性，然后将它们的值传入预处理语句的参数中。"
				}
			]
		},
		{
			"ID": "20211219090142-c8987i2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-c8987i2",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对传递语句参数来说，这种方式真是干脆利落。不过参数映射的功能远不止于此。"
				}
			]
		},
		{
			"ID": "20211219090142-vacgub4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-vacgub4",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "首先，和 MyBatis 的其它部分一样，参数也可以指定一个特殊的数据类型。"
				}
			]
		},
		{
			"ID": "20211219090142-la187a4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-la187a4",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "#{property,javaType=int,jdbcType=NUMERIC}"
				}
			]
		},
		{
			"ID": "20211219090142-jf882yo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-jf882yo",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "和 MyBatis 的其它部分一样，几乎总是可以根据参数对象的类型确定 javaType，除非该对象是一个 HashMap。这个时候，你需要显式指定 javaType 来确保正确的类型处理器（TypeHandler）被使用。"
				}
			]
		},
		{
			"ID": "20211219090142-x65b793",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-x65b793",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "提示 JDBC 要求，如果一个列允许使用 null 值，并且会使用值为 null 的参数，就必须要指定 JDBC 类型（jdbcType）。阅读 PreparedStatement.setNull()的 JavaDoc 来获取更多信息。"
				}
			]
		},
		{
			"ID": "20211219090142-z440pnp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-z440pnp",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "要更进一步地自定义类型处理方式，可以指定一个特殊的类型处理器类（或别名），比如："
				}
			]
		},
		{
			"ID": "20211219090142-1d7shyb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-1d7shyb",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "#{age,javaType=int,jdbcType=NUMERIC,typeHandler=MyTypeHandler}"
				}
			]
		},
		{
			"ID": "20211219090142-584qi3i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-584qi3i",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "参数的配置好像越来越繁琐了，但实际上，很少需要如此繁琐的配置。"
				}
			]
		},
		{
			"ID": "20211219090142-zj2t3f7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-zj2t3f7",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于数值类型，还可以设置 numericScale 指定小数点后保留的位数。"
				}
			]
		},
		{
			"ID": "20211219090142-ep892n2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-ep892n2",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "#{height,javaType=double,jdbcType=NUMERIC,numericScale=2}"
				}
			]
		},
		{
			"ID": "20211219090142-1v79e3l",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20211219090142-1v79e3l",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "字符串替换"
				}
			]
		},
		{
			"ID": "20211219090142-bnf9si3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-bnf9si3",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "默认情况下，使用 #{} 参数语法时，MyBatis 会创建 PreparedStatement 参数占位符，并通过占位符安全地设置参数（就像使用 ? 一样）。 这样做更安全，更迅速，通常也是首选做法，不过有时你就是想直接在 SQL 语句中直接插入一个不转义的字符串。 比如 ORDER BY 子句，这时候你可以："
				}
			]
		},
		{
			"ID": "20211219090142-wq3tg4w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-wq3tg4w",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ORDER BY ${columnName}"
				}
			]
		},
		{
			"ID": "20211219090142-0o40guk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-0o40guk",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这样，MyBatis 就不会修改或转义该字符串了。"
				}
			]
		},
		{
			"ID": "20211219090142-ntl3mbs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-ntl3mbs",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当 SQL 语句中的元数据（如表名或列名）是动态生成的时候，字符串替换将会非常有用。 举个例子，如果你想 select 一个表任意一列的数据时，不需要这样写："
				}
			]
		},
		{
			"ID": "20211219090142-651zh5s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-651zh5s",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@Select(\"select * from user where id = #{id}\")User findById(@Param(\"id\") long id);"
				}
			]
		},
		{
			"ID": "20211219090142-1l80izm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-1l80izm",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@Select(\"select * from user where name = #{name}\")User findByName(@Param(\"name\") String name);"
				}
			]
		},
		{
			"ID": "20211219090142-nfqzmeo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-nfqzmeo",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@Select(\"select * from user where email = #{email}\")User findByEmail(@Param(\"email\") String email);"
				}
			]
		},
		{
			"ID": "20211219090142-kjowffw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-kjowffw",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "// 其它的 \"findByXxx\" 方法"
				}
			]
		},
		{
			"ID": "20211219090142-2p103sd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-2p103sd",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "而是可以只写这样一个方法："
				}
			]
		},
		{
			"ID": "20211219090142-l9zfwit",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-l9zfwit",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@Select(\"select * from user where ${column} = #{value}\")"
				}
			]
		},
		{
			"ID": "20211219090142-5fp2ejj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-5fp2ejj",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "User  "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "findByColumn"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " (@Param(\"column\") String column, @Param(\"value\") String value);"
				}
			]
		},
		{
			"ID": "20211219090142-jeh3yt5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-jeh3yt5",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其中 ${column} 会被直接替换，而 #{value} 会使用 ? 预处理。 这样，就能完成同样的任务："
				}
			]
		},
		{
			"ID": "20211219090142-sd34jwn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-sd34jwn",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "User userOfId1 = userMapper.findByColumn(\"id\", 1L);"
				}
			]
		},
		{
			"ID": "20211219090142-otifz3y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-otifz3y",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "User userOfNameKid = userMapper.findByColumn(\"name\", \"kid\");"
				}
			]
		},
		{
			"ID": "20211219090142-bu1neuu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-bu1neuu",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "User userOfEmail = userMapper.findByColumn(\"email\", \"noone@nowhere.com\");"
				}
			]
		},
		{
			"ID": "20211219090142-elp9b87",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-elp9b87",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这种方式也同样适用于替换表名的情况。"
				}
			]
		},
		{
			"ID": "20211219090142-5oyy3qx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-5oyy3qx",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "提示 用这种方式接受用户的输入，并用作语句参数是不安全的，会导致潜在的 SQL 注入攻击。因此，要么不允许用户输入这些字段，要么自行转义并检验这些参数。"
				}
			]
		},
		{
			"ID": "20211219090142-z0fb33i",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20211219090142-z0fb33i",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"ID": "20211219090142-572tiiw",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-572tiiw"
					},
					"Children": [
						{
							"ID": "20211219090142-7exmxew",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-7exmxew"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "结果映射"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219090142-raqsx4y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-raqsx4y",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c!-- 非常复杂的结果映射 --\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-wmajfef",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-wmajfef",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresultMap id=\"detailedBlogResultMap\" type=\"Blog\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-6u3d2j4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-6u3d2j4",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cconstructor\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-ml27thf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-ml27thf",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cidArg column=\"blog_id\" javaType=\"int\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-wted8mt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-wted8mt",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/constructor\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-ndwii92",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-ndwii92",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"title\" column=\"blog_title\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-ajwb1w6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-ajwb1w6",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cassociation property=\"author\" javaType=\"Author\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-djj1egy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-djj1egy",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cid property=\"id\" column=\"author_id\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-0rk6ezo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-0rk6ezo",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"username\" column=\"author_username\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-cvcm5zi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-cvcm5zi",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"password\" column=\"author_password\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-5zrvx7e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-5zrvx7e",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"email\" column=\"author_email\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-8kpd7gx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-8kpd7gx",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"bio\" column=\"author_bio\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-3mibkn3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-3mibkn3",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"favouriteSection\" column=\"author_favourite_section\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-48xsov0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-48xsov0",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/association\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-dsbd3hc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-dsbd3hc",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003ccollection property=\"posts\" ofType=\"Post\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-kpglyxq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-kpglyxq",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cid property=\"id\" column=\"post_id\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-qdcf8ka",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-qdcf8ka",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"subject\" column=\"post_subject\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-qhyrf7o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-qhyrf7o",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cassociation property=\"author\" javaType=\"Author\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-efnvccp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-efnvccp",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003ccollection property=\"comments\" ofType=\"Comment\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-l6bbzhv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-l6bbzhv",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cid property=\"id\" column=\"comment_id\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-yfvz3so",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-yfvz3so",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/collection\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-sr1yjd1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-sr1yjd1",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003ccollection property=\"tags\" ofType=\"Tag\" \u003e"
				}
			]
		},
		{
			"ID": "20211219090142-3sopvb9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-3sopvb9",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cid property=\"id\" column=\"tag_id\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-nu3a5i3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-nu3a5i3",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/collection\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-nozqw59",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-nozqw59",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cdiscriminator javaType=\"int\" column=\"draft\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-10n207e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-10n207e",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003ccase value=\"1\" resultType=\"DraftPost\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-3h8y888",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-3h8y888",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/discriminator\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-w400hla",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-w400hla",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/collection\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-2ch5tdv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-2ch5tdv",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/resultMap\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-smnyrco",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-smnyrco",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "resultMap 元素有很多子元素和一个值得深入探讨的结构。 下面是resultMap 元素的概念视图。"
				}
			]
		},
		{
			"ID": "20211219090142-qh98czg",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20211219090142-qh98czg",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "结果映射（resultMap）"
				}
			]
		},
		{
			"ID": "20211219090142-zqiz2qx",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20211219090142-zqiz2qx",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"ID": "20211219090142-bq1bi8a",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-bq1bi8a"
					},
					"Children": [
						{
							"ID": "20211219090142-fp5zt9m",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-fp5zt9m"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "constructor - 用于在实例化类时，注入结果到构造方法中"
								}
							]
						},
						{
							"ID": "20211219090142-1u1e4p8",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20211219090142-1u1e4p8"
							},
							"Children": [
								{
									"ID": "20211219090142-2i5ecp8",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20211219090142-2i5ecp8"
									},
									"Children": [
										{
											"ID": "20211219090142-30ro2ol",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20211219090142-30ro2ol"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "idArg - ID 参数；标记出作为 ID 的结果可以帮助提高整体性能"
												}
											]
										}
									]
								},
								{
									"ID": "20211219090142-ajoz5z8",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20211219090142-ajoz5z8"
									},
									"Children": [
										{
											"ID": "20211219090142-ejdpj7r",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20211219090142-ejdpj7r"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "arg - 将被注入到构造方法的一个普通结果"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20211219090142-n9u3ocq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-n9u3ocq"
					},
					"Children": [
						{
							"ID": "20211219090142-8ua7mil",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-8ua7mil"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "id – 一个 ID 结果；标记出作为 ID 的结果可以帮助提高整体性能"
								}
							]
						}
					]
				},
				{
					"ID": "20211219090142-4nvolhq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-4nvolhq"
					},
					"Children": [
						{
							"ID": "20211219090142-ibqs11j",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-ibqs11j"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "result – 注入到字段或 JavaBean 属性的普通结果"
								}
							]
						}
					]
				},
				{
					"ID": "20211219090142-u8eh8tf",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-u8eh8tf"
					},
					"Children": [
						{
							"ID": "20211219090142-7g5piog",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-7g5piog"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "association – 一个复杂类型的关联；许多结果将包装成这种类型"
								}
							]
						}
					]
				},
				{
					"ID": "20211219090142-6gs6tyt",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-6gs6tyt"
					},
					"Children": [
						{
							"ID": "20211219090142-87joz8s",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-87joz8s"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "嵌套结果映射 – 关联可以是 resultMap 元素，或是对其它结果映射的引用"
								}
							]
						}
					]
				},
				{
					"ID": "20211219090142-bp0v4s7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-bp0v4s7"
					},
					"Children": [
						{
							"ID": "20211219090142-l9y0be3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-l9y0be3"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "collection – 一个复杂类型的集合"
								}
							]
						}
					]
				},
				{
					"ID": "20211219090142-qc4ttyr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-qc4ttyr"
					},
					"Children": [
						{
							"ID": "20211219090142-f62a30a",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-f62a30a"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "嵌套结果映射 – 集合可以是 resultMap 元素，或是对其它结果映射的引用"
								}
							]
						}
					]
				},
				{
					"ID": "20211219090142-lijjgfs",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-lijjgfs"
					},
					"Children": [
						{
							"ID": "20211219090142-jexrm1g",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-jexrm1g"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "discriminator – 使用结果值来决定使用哪个 resultMap"
								}
							]
						}
					]
				},
				{
					"ID": "20211219090142-uzankkp",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-uzankkp"
					},
					"Children": [
						{
							"ID": "20211219090142-hrm4gvi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-hrm4gvi"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "case – 基于某些值的结果映射"
								}
							]
						}
					]
				},
				{
					"ID": "20211219090142-rgs2dbd",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-rgs2dbd"
					},
					"Children": [
						{
							"ID": "20211219090142-9keucvq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-9keucvq"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "嵌套结果映射 – case 也是一个结果映射，因此具有相同的结构和元素；或者引用其它的结果映射"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219090142-16eyo13",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-16eyo13",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ResultMap 的属性列表"
				}
			]
		},
		{
			"ID": "20211219090142-h8ooh5z",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0
			],
			"Properties": {
				"id": "20211219090142-h8ooh5z",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 13,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "属性"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 138,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "描述"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 4,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "id"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 54,
							"TableCellContentMaxWidth": 138,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当前命名空间中的一个唯一标识，用于标识一个结果映射。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "type"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 78,
							"TableCellContentMaxWidth": 138,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "类的完全限定名, 或者一个类型别名（关于内置的类型别名，可以参考上面的表格）。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 13,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "autoMapping"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 138,
							"TableCellContentMaxWidth": 138,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果设置这个属性，MyBatis 将会为本结果映射开启或者关闭自动映射。 这个属性会覆盖全局的属性 autoMappingBehavior。默认值：未设置（unset）。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219090142-euf90gm",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20211219090142-euf90gm",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "id \u0026 result"
				}
			]
		},
		{
			"ID": "20211219090142-rllzyei",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-rllzyei",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cid property=\"id\" column=\"post_id\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-s6ab4ei",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-s6ab4ei",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"subject\" column=\"post_subject\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-4ycbfcs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-4ycbfcs",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这些元素是结果映射的基础。id 和 result 元素都将一个列的值映射到一个简单数据类型（String, int, double, Date 等）的属性或字段。"
				}
			]
		},
		{
			"ID": "20211219090142-nu8tn6c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-nu8tn6c",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这两者之间的唯一不同是，id 元素对应的属性会被标记为对象的标识符，在比较对象实例时使用。 这样可以提高整体的性能，尤其是进行缓存和嵌套结果映射（也就是连接映射）的时候。"
				}
			]
		},
		{
			"ID": "20211219090142-ehfiwqc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-ehfiwqc",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "两个元素都有一些属性："
				}
			]
		},
		{
			"ID": "20211219090142-xcqg851",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0
			],
			"Properties": {
				"id": "20211219090142-xcqg851",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 13,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "属性"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 307,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "描述"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 10,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "property"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 307,
							"TableCellContentMaxWidth": 307,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "映射到列结果的字段或属性。如果 JavaBean 有这个名字的属性（property），会先使用该属性。否则 MyBatis 将会寻找给定名称的字段（field）。 无论是哪一种情形，你都可以使用常见的点式分隔形式进行复杂属性导航。 比如，你可以这样映射一些简单的东西：“username”，或者映射到一些复杂的东西上：“address.street.number”。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 8,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "column"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 103,
							"TableCellContentMaxWidth": 307,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "数据库中的列名，或者是列的别名。一般情况下，这和传递给resultSet.getString(columnName)方法的参数一样。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 10,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "javaType"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 226,
							"TableCellContentMaxWidth": 307,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一个 Java 类的全限定名，或一个类型别名（关于内置的类型别名，可以参考上面的表格）。 如果你映射到一个 JavaBean，MyBatis 通常可以推断类型。然而，如果你映射到的是 HashMap，那么你应该明确地指定 javaType 来保证行为与期望的相一致。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 10,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "jdbcType"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 237,
							"TableCellContentMaxWidth": 307,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "JDBC 类型，所支持的 JDBC 类型参见这个表格之后的“支持的 JDBC 类型”。 只需要在可能执行插入、更新和删除的且允许空值的列上指定 JDBC 类型。这是 JDBC 的要求而非 MyBatis 的要求。如果你直接面向 JDBC 编程，你需要对可以为空值的列指定这个类型。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 13,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "typeHandler"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 139,
							"TableCellContentMaxWidth": 307,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "我们在前面讨论过默认的类型处理器。使用这个属性，你可以覆盖默认的类型处理器。 这个属性值是一个类型处理器实现类的全限定名，或者是类型别名。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219090142-whkesko",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20211219090142-whkesko",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "支持的 JDBC 类型"
				}
			]
		},
		{
			"ID": "20211219090142-pvdf8ux",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-pvdf8ux",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为了以后可能的使用场景，MyBatis 通过内置的 jdbcType 枚举类型支持下面的 JDBC 类型。"
				}
			]
		},
		{
			"ID": "20211219090142-to16vpn",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0,
				0,
				0,
				0,
				0
			],
			"Properties": {
				"id": "20211219090142-to16vpn",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 5,
									"TableCellContentMaxWidth": 10,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "BIT"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 7,
									"TableCellContentMaxWidth": 9,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "FLOAT"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 13,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "CHAR"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 11,
									"TableCellContentMaxWidth": 15,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "TIMESTAMP"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 7,
									"TableCellContentMaxWidth": 9,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "OTHER"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 11,
									"TableCellContentMaxWidth": 11,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "UNDEFINED"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 9,
							"TableCellContentMaxWidth": 10,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "TINYINT"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 9,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "REAL"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 9,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "VARCHAR"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 8,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "BINARY"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 9,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "BLOB"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 10,
							"TableCellContentMaxWidth": 11,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "NVARCHAR"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 10,
							"TableCellContentMaxWidth": 10,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "SMALLINT"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 8,
							"TableCellContentMaxWidth": 9,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "DOUBLE"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 13,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "LONGVARCHAR"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 11,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "VARBINARY"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 9,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "CLOB"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 7,
							"TableCellContentMaxWidth": 11,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "NCHAR"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 9,
							"TableCellContentMaxWidth": 10,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "INTEGER"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 9,
							"TableCellContentMaxWidth": 9,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "NUMERIC"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "DATE"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 15,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "LONGVARBINARY"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 9,
							"TableCellContentMaxWidth": 9,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "BOOLEAN"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 7,
							"TableCellContentMaxWidth": 11,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "NCLOB"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 8,
							"TableCellContentMaxWidth": 10,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "BIGINT"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 9,
							"TableCellContentMaxWidth": 9,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "DECIMAL"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "TIME"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "NULL"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 8,
							"TableCellContentMaxWidth": 9,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "CURSOR"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 7,
							"TableCellContentMaxWidth": 11,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ARRAY"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219090142-et035d6",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20211219090142-et035d6",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "构造方法"
				}
			]
		},
		{
			"ID": "20211219090142-3tbdu9w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-3tbdu9w",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过修改对象属性的方式，可以满足大多数的数据传输对象（Data Transfer Object, DTO）以及绝大部分领域模型的要求。但有些情况下你想使用不可变类。 一般来说，很少改变或基本不变的包含引用或数据的表，很适合使用不可变类。 构造方法注入允许你在初始化时为类设置属性的值，而不用暴露出公有方法。MyBatis 也支持私有属性和私有 JavaBean 属性来完成注入，但有一些人更青睐于通过构造方法进行注入。 constructor 元素就是为此而生的。"
				}
			]
		},
		{
			"ID": "20211219090142-qusfyht",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-qusfyht",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "看看下面这个构造方法:"
				}
			]
		},
		{
			"ID": "20211219090142-76t2y0y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-76t2y0y",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public class User {"
				}
			]
		},
		{
			"ID": "20211219090142-zamopgk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-zamopgk",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "//..."
				}
			]
		},
		{
			"ID": "20211219090142-y0i3lqm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-y0i3lqm",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public User(Integer id, String username, int age) {"
				}
			]
		},
		{
			"ID": "20211219090142-kmmfdhn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-kmmfdhn",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "//..."
				}
			]
		},
		{
			"ID": "20211219090142-bwcw9do",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-bwcw9do",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "}//...}"
				}
			]
		},
		{
			"ID": "20211219090142-vh23lcn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-vh23lcn",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为了将结果注入构造方法，MyBatis 需要通过某种方式定位相应的构造方法。 在下面的例子中，MyBatis 搜索一个声明了三个形参的的构造方法，参数类型以 java.lang.Integer, java.lang.String 和 int 的顺序给出。"
				}
			]
		},
		{
			"ID": "20211219090142-u49tacb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-u49tacb",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cconstructor\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-0slz5e8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-0slz5e8",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cidArg column=\"id\" javaType=\"int\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-e16mlzl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-e16mlzl",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003carg column=\"username\" javaType=\"String\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-jhw3z5u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-jhw3z5u",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003carg column=\"age\" javaType=\"_int\"/\u003e\u003c/constructor\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-tx4js3h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-tx4js3h",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当你在处理一个带有多个形参的构造方法时，很容易搞乱 arg 元素的顺序。 从版本 3.4.3 开始，可以在指定参数名称的前提下，以任意顺序编写 arg 元素。 为了通过名称来引用构造方法参数，你可以添加 @Param 注解，或者使用 '-parameters' 编译选项并启用 useActualParamName 选项（默认开启）来编译项目。下面是一个等价的例子，尽管函数签名中第二和第三个形参的顺序与 constructor 元素中参数声明的顺序不匹配。"
				}
			]
		},
		{
			"ID": "20211219090142-7jx1s6i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-7jx1s6i",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cconstructor\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-808p2gj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-808p2gj",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cidArg column=\"id\" javaType=\"int\" name=\"id\" /\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-h7zuui7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-h7zuui7",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003carg column=\"age\" javaType=\"_int\" name=\"age\" /\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-bp69dyh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-bp69dyh",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003carg column=\"username\" javaType=\"String\" name=\"username\" /\u003e\u003c/constructor\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-3hwd8qh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-3hwd8qh",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果存在名称和类型相同的属性，那么可以省略 javaType 。"
				}
			]
		},
		{
			"ID": "20211219090142-pijqkdi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-pijqkdi",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "剩余的属性和规则和普通的 id 和 result 元素是一样的。"
				}
			]
		},
		{
			"ID": "20211219090142-cl8xi0l",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0
			],
			"Properties": {
				"id": "20211219090142-cl8xi0l",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 13,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "属性"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 347,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "描述"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 8,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "column"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 103,
							"TableCellContentMaxWidth": 347,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "数据库中的列名，或者是列的别名。一般情况下，这和传递给resultSet.getString(columnName)方法的参数一样。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 10,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "javaType"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 228,
							"TableCellContentMaxWidth": 347,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一个 Java 类的完全限定名，或一个类型别名（关于内置的类型别名，可以参考上面的表格）。 如果你映射到一个 JavaBean，MyBatis 通常可以推断类型。然而，如果你映射到的是 HashMap，那么你应该明确地指定 javaType 来保证行为与期望的相一致。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 10,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "jdbcType"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 239,
							"TableCellContentMaxWidth": 347,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "JDBC 类型，所支持的 JDBC 类型参见这个表格之前的“支持的 JDBC 类型”。 只需要在可能执行插入、更新和删除的且允许空值的列上指定 JDBC 类型。这是 JDBC 的要求而非 MyBatis 的要求。如果你直接面向 JDBC 编程，你需要对可能存在空值的列指定这个类型。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 13,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "typeHandler"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 141,
							"TableCellContentMaxWidth": 347,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "我们在前面讨论过默认的类型处理器。使用这个属性，你可以覆盖默认的类型处理器。 这个属性值是一个类型处理器实现类的完全限定名，或者是类型别名。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 8,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "select"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 127,
							"TableCellContentMaxWidth": 347,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用于加载复杂类型属性的映射语句的 ID，它会从 column 属性中指定的列检索数据，作为参数传递给此 select 语句。具体请参考关联元素。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 11,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "resultMap"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 347,
							"TableCellContentMaxWidth": 347,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "结果映射的 ID，可以将嵌套的结果集映射到一个合适的对象树中。 它可以作为使用额外 select 语句的替代方案。它可以将多表连接操作的结果映射成一个单一的ResultSet。这样的ResultSet将会将包含重复或部分数据重复的结果集。为了将结果集正确地映射到嵌套的对象树中，MyBatis 允许你 “串联”结果映射，以便解决嵌套结果集的问题。想了解更多内容，请参考下面的关联元素。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "name"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 110,
							"TableCellContentMaxWidth": 347,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "构造方法形参的名字。从 3.4.3 版本开始，通过指定具体的参数名，你可以以任意顺序写入 arg 元素。参看上面的解释。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219090142-4z3epxw",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20211219090142-4z3epxw",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关联"
				}
			]
		},
		{
			"ID": "20211219090142-sjm0mcn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-sjm0mcn",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cassociation property=\"author\" column=\"blog_author_id\" javaType=\"Author\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-91sxhvu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-91sxhvu",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cid property=\"id\" column=\"author_id\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-rk30r3h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-rk30r3h",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"username\" column=\"author_username\"/\u003e\u003c/association\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-947510u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-947510u",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关联（association）元素处理“有一个”类型的关系。 比如，在我们的示例中，一个博客有一个用户。关联结果映射和其它类型的映射工作方式差不多。 你需要指定目标属性名以及属性的javaType（很多时候 MyBatis 可以自己推断出来），在必要的情况下你还可以设置 JDBC 类型，如果你想覆盖获取结果值的过程，还可以设置类型处理器。"
				}
			]
		},
		{
			"ID": "20211219090142-okw9q6l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-okw9q6l",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关联的不同之处是，你需要告诉 MyBatis 如何加载关联。MyBatis 有两种不同的方式加载关联："
				}
			]
		},
		{
			"ID": "20211219090142-qbnvs6u",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20211219090142-qbnvs6u",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"ID": "20211219090142-yp1vlez",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-yp1vlez"
					},
					"Children": [
						{
							"ID": "20211219090142-2qxhp3k",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-2qxhp3k"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "嵌套 Select 查询：通过执行另外一个 SQL 映射语句来加载期望的复杂类型。"
								}
							]
						}
					]
				},
				{
					"ID": "20211219090142-me6bcyq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-me6bcyq"
					},
					"Children": [
						{
							"ID": "20211219090142-1m3emx2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-1m3emx2"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "嵌套结果映射：使用嵌套的结果映射来处理连接结果的重复子集。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219090142-o3oum0b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-o3oum0b",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "首先，先让我们来看看这个元素的属性。你将会发现，和普通的结果映射相比，它只在 select 和 resultMap 属性上有所不同。"
				}
			]
		},
		{
			"ID": "20211219090142-sgfvqb3",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0
			],
			"Properties": {
				"id": "20211219090142-sgfvqb3",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 13,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "属性"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 300,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "描述"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 10,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "property"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 300,
							"TableCellContentMaxWidth": 300,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "映射到列结果的字段或属性。如果用来匹配的 JavaBean 存在给定名字的属性，那么它将会被使用。否则 MyBatis 将会寻找给定名称的字段。 无论是哪一种情形，你都可以使用通常的点式分隔形式进行复杂属性导航。 比如，你可以这样映射一些简单的东西：“username”，或者映射到一些复杂的东西上：“address.street.number”。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 10,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "javaType"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 228,
							"TableCellContentMaxWidth": 300,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一个 Java 类的完全限定名，或一个类型别名（关于内置的类型别名，可以参考上面的表格）。 如果你映射到一个 JavaBean，MyBatis 通常可以推断类型。然而，如果你映射到的是 HashMap，那么你应该明确地指定 javaType 来保证行为与期望的相一致。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 10,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "jdbcType"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 239,
							"TableCellContentMaxWidth": 300,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "JDBC 类型，所支持的 JDBC 类型参见这个表格之前的“支持的 JDBC 类型”。 只需要在可能执行插入、更新和删除的且允许空值的列上指定 JDBC 类型。这是 JDBC 的要求而非 MyBatis 的要求。如果你直接面向 JDBC 编程，你需要对可能存在空值的列指定这个类型。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 13,
							"TableCellContentMaxWidth": 13,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "typeHandler"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 141,
							"TableCellContentMaxWidth": 300,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "我们在前面讨论过默认的类型处理器。使用这个属性，你可以覆盖默认的类型处理器。 这个属性值是一个类型处理器实现类的完全限定名，或者是类型别名。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219090142-y2k0954",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20211219090142-y2k0954",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关联的嵌套 Select 查询"
				}
			]
		},
		{
			"ID": "20211219090142-frrh98b",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0
			],
			"Properties": {
				"id": "20211219090142-frrh98b",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 11,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "属性"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 326,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "描述"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 8,
							"TableCellContentMaxWidth": 11,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "column"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 300,
							"TableCellContentMaxWidth": 326,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "数据库中的列名，或者是列的别名。一般情况下，这和传递给resultSet.getString(columnName)方法的参数一样。 注意：在使用复合主键的时候，你可以使用 column=\"{prop1=col1,prop2=col2}\" 这样的语法来指定多个传递给嵌套 Select 查询语句的列名。这会使得prop1和prop2作为参数对象，被设置为对应嵌套 Select 语句的参数。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 8,
							"TableCellContentMaxWidth": 11,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "select"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 326,
							"TableCellContentMaxWidth": 326,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用于加载复杂类型属性的映射语句的 ID，它会从 column 属性指定的列中检索数据，作为参数传递给目标 select 语句。 具体请参考下面的例子。注意：在使用复合主键的时候，你可以使用column=\"{prop1=col1,prop2=col2}\"这样的语法来指定多个传递给嵌套 Select 查询语句的列名。这会使得prop1和prop2作为参数对象，被设置为对应嵌套 Select 语句的参数。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 11,
							"TableCellContentMaxWidth": 11,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "fetchType"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 120,
							"TableCellContentMaxWidth": 326,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "可选的。有效值为lazy和eager。 指定属性后，将在映射中忽略全局配置参数lazyLoadingEnabled，使用属性的值。（是否开启缓存）"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219090142-j0tvgkv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-j0tvgkv",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "示例："
				}
			]
		},
		{
			"ID": "20211219090142-jlfvg6b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-jlfvg6b",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresultMap id=\"blogResult\" type=\"Blog\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-yyrho3y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-yyrho3y",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cassociation property=\"author\""
				}
			]
		},
		{
			"ID": "20211219090142-y2i2dke",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-y2i2dke",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "                column=\"author_id\""
				}
			]
		},
		{
			"ID": "20211219090142-j16wqs8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-j16wqs8",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "                javaType=\"Author\""
				}
			]
		},
		{
			"ID": "20211219090142-g6v9d9v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-g6v9d9v",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "                select=\"selectAuthor\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-1fzqe8m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-1fzqe8m",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/resultMap\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-mypm2rl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-mypm2rl",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cselect id=\"selectBlog\" resultMap=\"blogResult\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-g7kf7bd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-g7kf7bd",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SELECT * FROM BLOG WHERE ID = #{id}"
				}
			]
		},
		{
			"ID": "20211219090142-mshqfk2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-mshqfk2",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/select\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-z4cb3h1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-z4cb3h1",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cselect id=\"selectAuthor\" resultType=\"Author\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-6xb3teq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-6xb3teq",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SELECT * FROM AUTHOR WHERE ID = #{id}"
				}
			]
		},
		{
			"ID": "20211219090142-e2bnqtw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-e2bnqtw",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/select\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-0fng0h9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-0fng0h9",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "就是这么简单。我们有两个 select 查询语句：一个用来加载博客（Blog），另外一个用来加载作者（Author），而且博客的结果映射描述了应该使用 selectAuthor 语句加载它的 author 属性。"
				}
			]
		},
		{
			"ID": "20211219090142-n5cw53o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-n5cw53o",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其它所有的属性将会被自动加载，只要它们的列名和属性名相匹配。"
				}
			]
		},
		{
			"ID": "20211219090142-hurn63u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-hurn63u",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这种方式虽然很简单，但在大型数据集或大型数据表上表现不佳。这个问题被称为“N+1 查询问题”。 概括地讲，N+1 查询问题是这样子的："
				}
			]
		},
		{
			"ID": "20211219090142-f70kfxj",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20211219090142-f70kfxj",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"ID": "20211219090142-aukazrr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-aukazrr"
					},
					"Children": [
						{
							"ID": "20211219090142-a56mrzt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-a56mrzt"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "你执行了一个单独的 SQL 语句来获取结果的一个列表（就是“+1”）。"
								}
							]
						}
					]
				},
				{
					"ID": "20211219090142-d001hxi",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-d001hxi"
					},
					"Children": [
						{
							"ID": "20211219090142-ocq1sx1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-ocq1sx1"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对列表返回的每条记录，你执行一个 select 查询语句来为每条记录加载详细信息（就是“N”）。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219090142-1ztp1zc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-1ztp1zc",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个问题会导致成百上千的 SQL 语句被执行。有时候，我们不希望产生这样的后果。"
				}
			]
		},
		{
			"ID": "20211219090142-xha11np",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-xha11np",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "好消息是，MyBatis 能够对这样的查询进行延迟加载，因此可以将大量语句同时运行的开销分散开来。 然而，如果你加载记录列表之后立刻就遍历列表以获取嵌套的数据，就会触发所有的延迟加载查询，性能可能会变得很糟糕。"
				}
			]
		},
		{
			"ID": "20211219090142-b06rzbu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-b06rzbu",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "所以还有另外一种方法。"
				}
			]
		},
		{
			"ID": "20211219090142-9d47ckb",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20211219090142-9d47ckb",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关联的嵌套结果映射"
				}
			]
		},
		{
			"ID": "20211219090142-an34ojj",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0
			],
			"Properties": {
				"id": "20211219090142-an34ojj",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 15,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "属性"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 335,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "描述"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 11,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "resultMap"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 335,
							"TableCellContentMaxWidth": 335,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "结果映射的 ID，可以将此关联的嵌套结果集映射到一个合适的对象树中。 它可以作为使用额外 select 语句的替代方案。它可以将多表连接操作的结果映射成一个单一的ResultSet。这样的ResultSet有部分数据是重复的。 为了将结果集正确地映射到嵌套的对象树中, MyBatis 允许你“串联”结果映射，以便解决嵌套结果集的问题。使用嵌套结果映射的一个例子在表格以后。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 14,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "columnPrefix"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 182,
							"TableCellContentMaxWidth": 335,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当连接多个表时，你可能会不得不使用列别名来避免在ResultSet中产生重复的列名。指定 columnPrefix 列名前缀允许你将带有这些前缀的列映射到一个外部的结果映射中。 详细说明请参考后面的例子。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 15,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "notNullColumn"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 222,
							"TableCellContentMaxWidth": 335,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "默认情况下，在至少一个被映射到属性的列不为空时，子对象才会被创建。 你可以在这个属性上指定非空的列来改变默认行为，指定后，Mybatis 将只在这些列非空时才创建一个子对象。可以使用逗号分隔来指定多个列。默认值：未设置（unset）。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 13,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "autoMapping"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 211,
							"TableCellContentMaxWidth": 335,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果设置这个属性，MyBatis 将会为本结果映射开启或者关闭自动映射。 这个属性会覆盖全局的属性 autoMappingBehavior。注意，本属性对外部的结果映射无效，所以不能搭配select或resultMap元素使用。默认值：未设置（unset）。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219090142-weju6bb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-weju6bb",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "之前，你已经看到了一个非常复杂的嵌套关联的例子。 下面的例子则是一个非常简单的例子，用于演示嵌套结果映射如何工作。 现在我们将博客表和作者表连接在一起，而不是执行一个独立的查询语句，就像这样："
				}
			]
		},
		{
			"ID": "20211219090142-qpq0dg9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-qpq0dg9",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cselect id=\"selectBlog\" resultMap=\"blogResult\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-4y6kbmt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-4y6kbmt",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "select"
				}
			]
		},
		{
			"ID": "20211219090142-g9vg9i3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-g9vg9i3",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "B.id as blog_id,"
				}
			]
		},
		{
			"ID": "20211219090142-47sx9mu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-47sx9mu",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "B.title as blog_title,"
				}
			]
		},
		{
			"ID": "20211219090142-i4dgpcn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-i4dgpcn",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "B.author_id as blog_author_id,"
				}
			]
		},
		{
			"ID": "20211219090142-qz0zskk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-qz0zskk",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "A.id as author_id,"
				}
			]
		},
		{
			"ID": "20211219090142-8z56olm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-8z56olm",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "A.username as author_username,"
				}
			]
		},
		{
			"ID": "20211219090142-r8z3kuv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-r8z3kuv",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "A.password as author_password,"
				}
			]
		},
		{
			"ID": "20211219090142-jo49fhq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-jo49fhq",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "A.email as author_email,"
				}
			]
		},
		{
			"ID": "20211219090142-d2b8sw0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-d2b8sw0",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "A.bio as author_bio"
				}
			]
		},
		{
			"ID": "20211219090142-dye8lbb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-dye8lbb",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "from Blog B left outer join Author A on B.author_id = A.id"
				}
			]
		},
		{
			"ID": "20211219090142-gnxz0hg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-gnxz0hg",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "where B.id = #{id}"
				}
			]
		},
		{
			"ID": "20211219090142-7ju7au9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-7ju7au9",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/select\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-jp48wgt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-jp48wgt",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意查询中的连接，以及为确保结果能够拥有唯一且清晰的名字，我们设置的别名。 这使得进行映射非常简单。现在我们可以映射这个结果："
				}
			]
		},
		{
			"ID": "20211219090142-bbfg5j6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-bbfg5j6",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresultMap id=\"blogResult\" type=\"Blog\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-omhhdxn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-omhhdxn",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cid property=\"id\" column=\"blog_id\" /\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-inmoiac",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-inmoiac",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"title\" column=\"blog_title\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-sg5x35f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-sg5x35f",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cassociation property=\"author\" column=\"blog_author_id\" javaType=\"Author\" resultMap=\"authorResult\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-p1w2i9k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-p1w2i9k",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/resultMap\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-7cjd2r8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-7cjd2r8",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresultMap id=\"authorResult\" type=\"Author\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-hwabn3b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-hwabn3b",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cid property=\"id\" column=\"author_id\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-4fa4146",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-4fa4146",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"username\" column=\"author_username\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-eqespf0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-eqespf0",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"password\" column=\"author_password\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-814minl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-814minl",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"email\" column=\"author_email\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-wqqmu3p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-wqqmu3p",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"bio\" column=\"author_bio\"/\u003e\u003c/resultMap\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-x2ut8tr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-x2ut8tr",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在上面的例子中，你可以看到，博客（Blog）作者（author）的关联元素委托名为 “authorResult” 的结果映射来加载作者对象的实例。"
				}
			]
		},
		{
			"ID": "20211219090142-ynp7ttq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-ynp7ttq",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "非常重要： id 元素在嵌套结果映射中扮演着非常重要的角色。你应该总是指定一个或多个可以唯一标识结果的属性。 虽然，即使不指定这个属性，MyBatis 仍然可以工作，但是会产生严重的性能问题。 只需要指定可以唯一标识结果的最少属性。显然，你可以选择主键（复合主键也可以）。"
				}
			]
		},
		{
			"ID": "20211219090142-7cowt1s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-7cowt1s",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "现在，上面的示例使用了外部的结果映射元素来映射关联。这使得 Author 的结果映射可以被重用。 然而，如果你不打算重用它，或者你更喜欢将你所有的结果映射放在一个具有描述性的结果映射元素中。 你可以直接将结果映射作为子元素嵌套在内。这里给出使用这种方式的等效例子："
				}
			]
		},
		{
			"ID": "20211219090142-ef7zixn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-ef7zixn",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresultMap id=\"blogResult\" type=\"Blog\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-jdbm9zf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-jdbm9zf",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cid property=\"id\" column=\"blog_id\" /\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-yc5syvf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-yc5syvf",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"title\" column=\"blog_title\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-axatw4t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-axatw4t",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cassociation property=\"author\" javaType=\"Author\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-1768ilr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-1768ilr",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cid property=\"id\" column=\"author_id\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-994meq5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-994meq5",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"username\" column=\"author_username\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-qme8f5c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-qme8f5c",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"password\" column=\"author_password\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-d3luedi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-d3luedi",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"email\" column=\"author_email\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-hmvq6lm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-hmvq6lm",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"bio\" column=\"author_bio\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-9nkm6p2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-9nkm6p2",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/association\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-njufkw3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-njufkw3",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/resultMap\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-nih5o6g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-nih5o6g",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "那如果博客（blog）有一个共同作者（co-author）该怎么办？select 语句看起来会是这样的："
				}
			]
		},
		{
			"ID": "20211219090142-77cvwmg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-77cvwmg",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cselect id=\"selectBlog\" resultMap=\"blogResult\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-bzeqwfs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-bzeqwfs",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "select"
				}
			]
		},
		{
			"ID": "20211219090142-seqaykk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-seqaykk",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "B.id as blog_id,"
				}
			]
		},
		{
			"ID": "20211219090142-wj62e0l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-wj62e0l",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "B.title as blog_title,"
				}
			]
		},
		{
			"ID": "20211219090142-vjl75lz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-vjl75lz",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "A.id as author_id,"
				}
			]
		},
		{
			"ID": "20211219090142-4zpuvfu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-4zpuvfu",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "A.username as author_username,"
				}
			]
		},
		{
			"ID": "20211219090142-tse0raj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-tse0raj",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "A.password as author_password,"
				}
			]
		},
		{
			"ID": "20211219090142-95fsnji",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-95fsnji",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "A.email as author_email,"
				}
			]
		},
		{
			"ID": "20211219090142-b6jykqq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-b6jykqq",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "A.bio as author_bio,"
				}
			]
		},
		{
			"ID": "20211219090142-7j9w7al",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-7j9w7al",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "CA.id as co_author_id,"
				}
			]
		},
		{
			"ID": "20211219090142-tdpidwn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-tdpidwn",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "CA.username as co_author_username,"
				}
			]
		},
		{
			"ID": "20211219090142-56hsabz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-56hsabz",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "CA.password as co_author_password,"
				}
			]
		},
		{
			"ID": "20211219090142-cgli3f3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-cgli3f3",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "CA.email as co_author_email,"
				}
			]
		},
		{
			"ID": "20211219090142-9mn75dh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-9mn75dh",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "CA.bio as co_author_bio"
				}
			]
		},
		{
			"ID": "20211219090142-qlye5eo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-qlye5eo",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "from Blog B"
				}
			]
		},
		{
			"ID": "20211219090142-w94l2js",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-w94l2js",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "left outer join Author A on B.author_id = A.id"
				}
			]
		},
		{
			"ID": "20211219090142-go17twr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-go17twr",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "left outer join Author CA on B.co_author_id = CA.id"
				}
			]
		},
		{
			"ID": "20211219090142-ilo6a4u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-ilo6a4u",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "where B.id = #{id}"
				}
			]
		},
		{
			"ID": "20211219090142-mwckjav",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-mwckjav",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/select\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-niqdx7j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-niqdx7j",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "回忆一下，Author 的结果映射定义如下："
				}
			]
		},
		{
			"ID": "20211219090142-u6a0wq4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-u6a0wq4",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresultMap id=\"authorResult\" type=\"Author\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-cxdrr5r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-cxdrr5r",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cid property=\"id\" column=\"author_id\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-83qw3xc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-83qw3xc",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"username\" column=\"author_username\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-1cdjb8d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-1cdjb8d",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"password\" column=\"author_password\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-fq9ncxk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-fq9ncxk",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"email\" column=\"author_email\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-7gtxy3i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-7gtxy3i",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"bio\" column=\"author_bio\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-3e5v875",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-3e5v875",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/resultMap\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-zvqf44t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-zvqf44t",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "由于结果中的列名与结果映射中的列名不同。你需要指定 columnPrefix 以便重复使用该结果映射来映射 co-author 的结果。"
				}
			]
		},
		{
			"ID": "20211219090142-8ag0lrj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-8ag0lrj",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresultMap id=\"blogResult\" type=\"Blog\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-tpxqa1s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-tpxqa1s",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cid property=\"id\" column=\"blog_id\" /\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-1j7ufhs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-1j7ufhs",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"title\" column=\"blog_title\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-onbyqr2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-onbyqr2",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cassociation property=\"author\" resultMap=\"authorResult\" /\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-saet6nt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-saet6nt",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cassociation property=\"coAuthor\" resultMap=\"authorResult\" "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "columnPrefix=\"co_\""
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " /\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-sfdccak",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-sfdccak",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/resultMap\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-ug2uhjn",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20211219090142-ug2uhjn",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关联的多结果集（ResultSet）"
				}
			]
		},
		{
			"ID": "20211219090142-a9lx5zy",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0
			],
			"Properties": {
				"id": "20211219090142-a9lx5zy",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 15,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "属性"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 121,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "描述"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 8,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "column"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 121,
							"TableCellContentMaxWidth": 121,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当使用多个结果集时，该属性指定结果集中用于与foreignColumn匹配的列（多个列名以逗号隔开），以识别关系中的父类型与子类型。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 15,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "foreignColumn"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 68,
							"TableCellContentMaxWidth": 121,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "指定外键对应的列名，指定的列将与父类型中column的给出的列进行匹配。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 11,
							"TableCellContentMaxWidth": 15,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "resultSet"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 36,
							"TableCellContentMaxWidth": 121,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "指定用于加载复杂类型的结果集名字。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219090142-c9fg0x2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-c9fg0x2",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从版本 3.2.3 开始，MyBatis 提供了另一种解决 N+1 查询问题的方法。"
				}
			]
		},
		{
			"ID": "20211219090142-4xq8520",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-4xq8520",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "某些数据库允许存储过程返回多个结果集，或一次性执行多个语句，每个语句返回一个结果集。 我们可以利用这个特性，在不使用连接的情况下，只访问数据库一次就能获得相关数据。"
				}
			]
		},
		{
			"ID": "20211219090142-ttmsenb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-ttmsenb",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在例子中，存储过程执行下面的查询并返回两个结果集。第一个结果集会返回博客（Blog）的结果，第二个则返回作者（Author）的结果。"
				}
			]
		},
		{
			"ID": "20211219090142-30a0wgz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-30a0wgz",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SELECT * FROM BLOG WHERE ID = #{id}"
				}
			]
		},
		{
			"ID": "20211219090142-sqct4my",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-sqct4my",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SELECT * FROM AUTHOR WHERE ID = #{id}"
				}
			]
		},
		{
			"ID": "20211219090142-suizhn7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-suizhn7",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在映射语句中，必须通过 resultSets 属性为每个结果集指定一个名字，多个名字使用逗号隔开。"
				}
			]
		},
		{
			"ID": "20211219090142-dregt1r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-dregt1r",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cselect id=\"selectBlog\" resultSets=\"blogs,authors\" resultMap=\"blogResult\" statementType=\"CALLABLE\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-shappki",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-shappki",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "{call getBlogsAndAuthors(#{id,jdbcType=INTEGER,mode=IN})}"
				}
			]
		},
		{
			"ID": "20211219090142-fdsldvn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-fdsldvn",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/select\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-nm9phco",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-nm9phco",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "现在我们可以指定使用 “authors” 结果集的数据来填充 “author” 关联："
				}
			]
		},
		{
			"ID": "20211219090142-i5buogx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-i5buogx",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresultMap id=\"blogResult\" type=\"Blog\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-8wm5j1u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-8wm5j1u",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cid property=\"id\" column=\"id\" /\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-k9bp7wk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-k9bp7wk",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"title\" column=\"title\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-ezpqm7k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-ezpqm7k",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cassociation property=\"author\" javaType=\"Author\" resultSet=\"authors\" column=\"author_id\" foreignColumn=\"id\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-o9h4v0t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-o9h4v0t",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cid property=\"id\" column=\"id\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-gmg1xct",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-gmg1xct",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"username\" column=\"username\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-fc5hfb7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-fc5hfb7",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"password\" column=\"password\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-mhcqhbn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-mhcqhbn",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"email\" column=\"email\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-1je64sn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-1je64sn",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"bio\" column=\"bio\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-r46uagk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-r46uagk",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/association\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-0jns17i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-0jns17i",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/resultMap\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-6bn2lx8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-6bn2lx8",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "你已经在上面看到了如何处理“有一个”类型的关联。但是该怎么处理“有很多个”类型的关联呢？这就是我们接下来要介绍的。"
				}
			]
		},
		{
			"ID": "20211219090142-qow03ls",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20211219090142-qow03ls",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "集合"
				}
			]
		},
		{
			"ID": "20211219090142-f3qkb0j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-f3qkb0j",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003ccollection property=\"posts\" ofType=\"domain.blog.Post\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-mcgeq69",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-mcgeq69",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cid property=\"id\" column=\"post_id\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-eqmm0ro",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-eqmm0ro",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"subject\" column=\"post_subject\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-p0w6pg6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-p0w6pg6",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"body\" column=\"post_body\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-r5y4egr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-r5y4egr",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/collection\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-232s3y9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-232s3y9",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "集合元素和关联元素几乎是一样的，它们相似的程度之高，以致于没有必要再介绍集合元素的相似部分。 所以让我们来关注它们的不同之处吧。"
				}
			]
		},
		{
			"ID": "20211219090142-5ndai57",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-5ndai57",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们来继续上面的示例，一个博客（Blog）只有一个作者（Author)。但一个博客有很多文章（Post)。 在博客类中，这可以用下面的写法来表示："
				}
			]
		},
		{
			"ID": "20211219090142-oyydicw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-oyydicw",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "private List\u003cPost\u003e posts;"
				}
			]
		},
		{
			"ID": "20211219090142-8c9tnlp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-8c9tnlp",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "要像上面这样，映射嵌套结果集合到一个 List 中，可以使用集合元素。 和关联元素一样，我们可以使用嵌套 Select 查询，或基于连接的嵌套结果映射集合。"
				}
			]
		},
		{
			"ID": "20211219090142-tzo0mm9",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20211219090142-tzo0mm9",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "集合的嵌套 Select 查询"
				}
			]
		},
		{
			"ID": "20211219090142-62306vk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-62306vk",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "首先，让我们看看如何使用嵌套 Select 查询来为博客加载文章。"
				}
			]
		},
		{
			"ID": "20211219090142-y0zc2uj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-y0zc2uj",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresultMap id=\"blogResult\" type=\"Blog\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-93e3la2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-93e3la2",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003ccollection property=\"posts\" javaType=\"ArrayList\" column=\"id\" ofType=\"Post\" select=\"selectPostsForBlog\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-cfccuzy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-cfccuzy",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/resultMap\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-atluyg5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-atluyg5",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cselect id=\"selectBlog\" resultMap=\"blogResult\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-pwl543j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-pwl543j",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SELECT * FROM BLOG WHERE ID = #{id}"
				}
			]
		},
		{
			"ID": "20211219090142-pfoje66",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-pfoje66",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/select\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-mq5daqj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-mq5daqj",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cselect id=\"selectPostsForBlog\" resultType=\"Post\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-osrekof",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-osrekof",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SELECT * FROM POST WHERE BLOG_ID = #{id}"
				}
			]
		},
		{
			"ID": "20211219090142-jjcvfow",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-jjcvfow",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/select\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-44l51mx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-44l51mx",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "你可能会立刻注意到几个不同，但大部分都和我们上面学习过的关联元素非常相似。 首先，你会注意到我们使用的是集合元素。 接下来你会注意到有一个新的 “ofType” 属性。这个属性非常重要，它用来将 JavaBean（或字段）属性的类型和集合存储的类型区分开来。 所以你可以按照下面这样来阅读映射："
				}
			]
		},
		{
			"ID": "20211219090142-nmnwd3k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-nmnwd3k",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003ccollection"
				}
			]
		},
		{
			"ID": "20211219090142-xp0cbkl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-xp0cbkl",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "    property=\"posts\""
				}
			]
		},
		{
			"ID": "20211219090142-3hvsxrv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-3hvsxrv",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "    javaType=\"ArrayList\""
				}
			]
		},
		{
			"ID": "20211219090142-0t4w5v1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-0t4w5v1",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "    column=\"id\""
				}
			]
		},
		{
			"ID": "20211219090142-xyl59qe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-xyl59qe",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "    ofType=\"Post\""
				}
			]
		},
		{
			"ID": "20211219090142-2a2hyt6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-2a2hyt6",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "    select=\"selectPostsForBlog\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-vrhhpy8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-vrhhpy8",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "读作： “posts 是一个存储 Post 的 ArrayList 集合”"
				}
			]
		},
		{
			"ID": "20211219090142-2vehtyp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-2vehtyp",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在一般情况下，MyBatis 可以推断 javaType 属性，因此并不需要填写。所以很多时候你可以简略成："
				}
			]
		},
		{
			"ID": "20211219090142-zwrc45p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-zwrc45p",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003ccollection"
				}
			]
		},
		{
			"ID": "20211219090142-4p5em3j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-4p5em3j",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "    property=\"posts\""
				}
			]
		},
		{
			"ID": "20211219090142-tfkr8ei",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-tfkr8ei",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "    column=\"id\""
				}
			]
		},
		{
			"ID": "20211219090142-7q09lmc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-7q09lmc",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "    ofType=\"Post\""
				}
			]
		},
		{
			"ID": "20211219090142-hiebhu5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-hiebhu5",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "    select=\"selectPostsForBlog\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-mpcme8j",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20211219090142-mpcme8j",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "集合的嵌套结果映射"
				}
			]
		},
		{
			"ID": "20211219090142-x2k4jyw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-x2k4jyw",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "现在你可能已经猜到了集合的嵌套结果映射是怎样工作的——除了新增的 “ofType” 属性，它和关联的完全相同。"
				}
			]
		},
		{
			"ID": "20211219090142-poxpxls",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-poxpxls",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "首先, 让我们看看对应的 SQL 语句："
				}
			]
		},
		{
			"ID": "20211219090142-6d02wxr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-6d02wxr",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cselect id=\"selectBlog\" resultMap=\"blogResult\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-6wzmxh5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-6wzmxh5",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "select"
				}
			]
		},
		{
			"ID": "20211219090142-m1720jp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-m1720jp",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "B.id as blog_id,"
				}
			]
		},
		{
			"ID": "20211219090142-e090k6l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-e090k6l",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "B.title as blog_title,"
				}
			]
		},
		{
			"ID": "20211219090142-rnyp87g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-rnyp87g",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "B.author_id as blog_author_id,"
				}
			]
		},
		{
			"ID": "20211219090142-u4sbjjm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-u4sbjjm",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "P.id as post_id,"
				}
			]
		},
		{
			"ID": "20211219090142-2g6dd3l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-2g6dd3l",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "P.subject as post_subject,"
				}
			]
		},
		{
			"ID": "20211219090142-uhmv170",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-uhmv170",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "P.body as post_body,"
				}
			]
		},
		{
			"ID": "20211219090142-zju52x9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-zju52x9",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "from Blog B"
				}
			]
		},
		{
			"ID": "20211219090142-q98u454",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-q98u454",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "left outer join Post P on B.id = P.blog_id"
				}
			]
		},
		{
			"ID": "20211219090142-4vw7cm2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-4vw7cm2",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "where B.id = #{id}"
				}
			]
		},
		{
			"ID": "20211219090142-apqggoc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-apqggoc",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/select\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-pklvntt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-pklvntt",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们再次连接了博客表和文章表，并且为每一列都赋予了一个有意义的别名，以便映射保持简单。 要映射博客里面的文章集合，就这么简单："
				}
			]
		},
		{
			"ID": "20211219090142-f29zkm1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-f29zkm1",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresultMap id=\"blogResult\" type=\"Blog\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-scg14fi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-scg14fi",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cid property=\"id\" column=\"blog_id\" /\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-rse05c5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-rse05c5",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"title\" column=\"blog_title\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-txq3m9p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-txq3m9p",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003ccollection property=\"posts\" ofType=\"Post\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-0xj2g94",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-0xj2g94",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cid property=\"id\" column=\"post_id\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-llytel7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-llytel7",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"subject\" column=\"post_subject\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-8hhu0pe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-8hhu0pe",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"body\" column=\"post_body\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-r87m3wp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-r87m3wp",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/collection\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-x4hiy2q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-x4hiy2q",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/resultMap\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-6t13t5e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-6t13t5e",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "再提醒一次，要记得上面 id 元素的重要性，如果你不记得了，请阅读关联部分的相关部分。"
				}
			]
		},
		{
			"ID": "20211219090142-r6z9wm6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-r6z9wm6",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果你喜欢更详略的、可重用的结果映射，你可以使用下面的等价形式："
				}
			]
		},
		{
			"ID": "20211219090142-182sm5r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-182sm5r",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresultMap id=\"blogResult\" type=\"Blog\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-c2i1r8u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-c2i1r8u",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cid property=\"id\" column=\"blog_id\" /\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-sxgmtdh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-sxgmtdh",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"title\" column=\"blog_title\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-ilc921h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-ilc921h",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003ccollection property=\"posts\" ofType=\"Post\" resultMap=\"blogPostResult\" columnPrefix=\"post_\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-zpxqot5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-zpxqot5",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/resultMap\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-nqmv77y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-nqmv77y",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresultMap id=\"blogPostResult\" type=\"Post\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-3m0oiw5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-3m0oiw5",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cid property=\"id\" column=\"id\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-1flp9op",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-1flp9op",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"subject\" column=\"subject\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-tvdsk60",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-tvdsk60",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"body\" column=\"body\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-x24yqwp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-x24yqwp",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/resultMap\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-7lwktrf",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20211219090142-7lwktrf",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "集合的多结果集（ResultSet）"
				}
			]
		},
		{
			"ID": "20211219090142-gthxb7x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-gthxb7x",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "像关联元素那样，我们可以通过执行存储过程实现，它会执行两个查询并返回两个结果集，一个是博客的结果集，另一个是文章的结果集："
				}
			]
		},
		{
			"ID": "20211219090142-l5ko8wv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-l5ko8wv",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SELECT * FROM BLOG WHERE ID = #{id}"
				}
			]
		},
		{
			"ID": "20211219090142-e3fqnwy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-e3fqnwy",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SELECT * FROM POST WHERE BLOG_ID = #{id}"
				}
			]
		},
		{
			"ID": "20211219090142-ijnghbr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-ijnghbr",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在映射语句中，必须通过 resultSets 属性为每个结果集指定一个名字，多个名字使用逗号隔开。"
				}
			]
		},
		{
			"ID": "20211219090142-nsxpm2x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-nsxpm2x",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cselect id=\"selectBlog\" resultSets=\"blogs,posts\" resultMap=\"blogResult\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-1drj8vl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-1drj8vl",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "{call getBlogsAndPosts(#{id,jdbcType=INTEGER,mode=IN})}"
				}
			]
		},
		{
			"ID": "20211219090142-9w88zpi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-9w88zpi",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/select\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-k7d2jc4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-k7d2jc4",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们指定 “posts” 集合将会使用存储在 “posts” 结果集中的数据进行填充："
				}
			]
		},
		{
			"ID": "20211219090142-2b47l04",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-2b47l04",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresultMap id=\"blogResult\" type=\"Blog\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-w0zdxbb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-w0zdxbb",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cid property=\"id\" column=\"id\" /\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-nshcqkf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-nshcqkf",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"title\" column=\"title\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-61nirda",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-61nirda",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003ccollection property=\"posts\" ofType=\"Post\" resultSet=\"posts\" column=\"id\" foreignColumn=\"blog_id\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-d1ljrtq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-d1ljrtq",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cid property=\"id\" column=\"id\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-31ji2my",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-31ji2my",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"subject\" column=\"subject\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-rm5jv7b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-rm5jv7b",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"body\" column=\"body\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-qgs761v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-qgs761v",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/collection\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-wo1smd9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-wo1smd9",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/resultMap\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-8fgwz2s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-8fgwz2s",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意 对关联或集合的映射，并没有深度、广度或组合上的要求。但在映射时要留意性能问题。 在探索最佳实践的过程中，应用的单元测试和性能测试会是你的好帮手。 而 MyBatis 的好处在于，可以在不对你的代码引入重大变更（如果有）的情况下，允许你之后改变你的想法。"
				}
			]
		},
		{
			"ID": "20211219090142-f9b8hcd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-f9b8hcd",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "高级关联和集合映射是一个深度话题。文档的介绍只能到此为止。配合少许的实践，你会很快了解全部的用法。"
				}
			]
		},
		{
			"ID": "20211219090142-vnz6mlf",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20211219090142-vnz6mlf",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "鉴别器"
				}
			]
		},
		{
			"ID": "20211219090142-mg0s1k2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-mg0s1k2",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cdiscriminator javaType=\"int\" column=\"draft\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-jy7ddnt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-jy7ddnt",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003ccase value=\"1\" resultType=\"DraftPost\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-9p7v00p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-9p7v00p",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/discriminator\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-7hamg93",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-7hamg93",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "有时候，一个数据库查询可能会返回多个不同的结果集（但总体上还是有一定的联系的）。 鉴别器（discriminator）元素就是被设计来应对这种情况的，另外也能处理其它情况，例如类的继承层次结构。 鉴别器的概念很好理解——它很像 Java 语言中的 switch 语句。"
				}
			]
		},
		{
			"ID": "20211219090142-myzyi8h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-myzyi8h",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一个鉴别器的定义需要指定 column 和 javaType 属性。column 指定了 MyBatis 查询被比较值的地方。 而 javaType 用来确保使用正确的相等测试（虽然很多情况下字符串的相等测试都可以工作）。例如："
				}
			]
		},
		{
			"ID": "20211219090142-rvdjorg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-rvdjorg",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresultMap id=\"vehicleResult\" type=\"Vehicle\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-cvaoik8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-cvaoik8",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cid property=\"id\" column=\"id\" /\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-bzqp44b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-bzqp44b",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"vin\" column=\"vin\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-jb3yr5q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-jb3yr5q",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"year\" column=\"year\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-n3mn2nw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-n3mn2nw",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"make\" column=\"make\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-3sbv3sn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-3sbv3sn",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"model\" column=\"model\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-caxmfdd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-caxmfdd",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"color\" column=\"color\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-vsemd7n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-vsemd7n",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cdiscriminator javaType=\"int\" column=\"vehicle_type\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-4ucpsho",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-4ucpsho",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003ccase value=\"1\" resultMap=\"carResult\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-lnm25q0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-lnm25q0",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003ccase value=\"2\" resultMap=\"truckResult\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-srdiw11",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-srdiw11",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003ccase value=\"3\" resultMap=\"vanResult\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-6iwlaaw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-6iwlaaw",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003ccase value=\"4\" resultMap=\"suvResult\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-4km816x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-4km816x",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/discriminator\u003e\u003c/resultMap\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-9kkiexf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-9kkiexf",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在这个示例中，MyBatis 会从结果集中得到每条记录，然后比较它的 vehicle type 值。 如果它匹配任意一个鉴别器的 case，就会使用这个 case 指定的结果映射。 这个过程是互斥的，也就是说，剩余的结果映射将被忽略（除非它是扩展的，我们将在稍后讨论它）。 如果不能匹配任何一个 case，MyBatis 就只会使用鉴别器块外定义的结果映射。 所以，如果 carResult 的声明如下："
				}
			]
		},
		{
			"ID": "20211219090142-afsyjam",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-afsyjam",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresultMap id=\"carResult\" type=\"Car\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-x1zlsow",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-x1zlsow",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"doorCount\" column=\"door_count\" /\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-7q3azxw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-7q3azxw",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/resultMap\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-q7jkwkt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-q7jkwkt",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "那么只有 doorCount 属性会被加载。这是为了即使鉴别器的 case 之间都能分为完全独立的一组，尽管和父结果映射可能没有什么关系。在上面的例子中，我们当然知道 cars 和 vehicles 之间有关系，也就是 Car 是一个 Vehicle。因此，我们希望剩余的属性也能被加载。而这只需要一个小修改。"
				}
			]
		},
		{
			"ID": "20211219090142-sght27j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-sght27j",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresultMap id=\"carResult\" type=\"Car\" extends=\"vehicleResult\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-jw2f351",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-jw2f351",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"doorCount\" column=\"door_count\" /\u003e\u003c/resultMap\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-5gk19oo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-5gk19oo",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "现在 vehicleResult 和 carResult 的属性都会被加载了。"
				}
			]
		},
		{
			"ID": "20211219090142-vocns9k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-vocns9k",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可能有人又会觉得映射的外部定义有点太冗长了。 因此，对于那些更喜欢简洁的映射风格的人来说，还有另一种语法可以选择。例如："
				}
			]
		},
		{
			"ID": "20211219090142-safj37c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-safj37c",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresultMap id=\"vehicleResult\" type=\"Vehicle\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-h1ne8nq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-h1ne8nq",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cid property=\"id\" column=\"id\" /\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-pllagoo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-pllagoo",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"vin\" column=\"vin\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-hbc6dtp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-hbc6dtp",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"year\" column=\"year\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-hx8ap5u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-hx8ap5u",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"make\" column=\"make\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-aam50zl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-aam50zl",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"model\" column=\"model\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-wetq7j3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-wetq7j3",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"color\" column=\"color\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-noyg25l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-noyg25l",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cdiscriminator javaType=\"int\" column=\"vehicle_type\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-bes5eu3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-bes5eu3",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003ccase value=\"1\" resultType=\"carResult\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-wuuulm2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-wuuulm2",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"doorCount\" column=\"door_count\" /\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-drlht50",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-drlht50",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/case\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-s62ge52",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-s62ge52",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003ccase value=\"2\" resultType=\"truckResult\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-fir6sac",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-fir6sac",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"boxSize\" column=\"box_size\" /\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-3900tk9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-3900tk9",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"extendedCab\" column=\"extended_cab\" /\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-n9hrbvb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-n9hrbvb",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/case\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-aude89z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-aude89z",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003ccase value=\"3\" resultType=\"vanResult\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-j5md1o8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-j5md1o8",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"powerSlidingDoor\" column=\"power_sliding_door\" /\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-ix73odp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-ix73odp",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/case\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-ckk1aib",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-ckk1aib",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003ccase value=\"4\" resultType=\"suvResult\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-i6lvd2a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-i6lvd2a",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"allWheelDrive\" column=\"all_wheel_drive\" /\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-o1eg25e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-o1eg25e",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/case\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-kxznitz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-kxznitz",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/discriminator\u003e\u003c/resultMap\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-s1xax4e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-s1xax4e",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "提示 请注意，这些都是结果映射，如果你完全不设置任何的 result 元素，MyBatis 将为你自动匹配列和属性。所以上面的例子大多都要比实际的更复杂。 这也表明，大多数数据库的复杂度都比较高，我们不太可能一直依赖于这种机制。"
				}
			]
		},
		{
			"ID": "20211219090142-1u1ysbk",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20211219090142-1u1ysbk",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "自动映射"
				}
			]
		},
		{
			"ID": "20211219090142-isk2h51",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-isk2h51",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "正如你在前面一节看到的，在简单的场景下，MyBatis 可以为你自动映射查询结果。但如果遇到复杂的场景，你需要构建一个结果映射。 但是在本节中，你将看到，你可以混合使用这两种策略。让我们深入了解一下自动映射是怎样工作的。"
				}
			]
		},
		{
			"ID": "20211219090142-i65b8lj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-i65b8lj",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当自动映射查询结果时，MyBatis 会获取结果中返回的列名并在 Java 类中查找相同名字的属性（忽略大小写）。 这意味着如果发现了 ID 列和 id 属性，MyBatis 会将列 ID 的值赋给 id 属性。"
				}
			]
		},
		{
			"ID": "20211219090142-tcqbl3j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-tcqbl3j",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通常数据库列使用大写字母组成的单词命名，单词间用下划线分隔；而 Java 属性一般遵循驼峰命名法约定。为了在这两种命名方式之间启用自动映射，需要将 mapUnderscoreToCamelCase 设置为 true。"
				}
			]
		},
		{
			"ID": "20211219090142-0ldt1yd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-0ldt1yd",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "甚至在提供了结果映射后，自动映射也能工作。在这种情况下，对于每一个结果映射，在 ResultSet 出现的列，如果没有设置手动映射，将被自动映射。在自动映射处理完毕后，再处理手动映射。 在下面的例子中，id 和 userName 列将被自动映射，hashed_password 列将根据配置进行映射。"
				}
			]
		},
		{
			"ID": "20211219090142-bhyem2b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-bhyem2b",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cselect id=\"selectUsers\" resultMap=\"userResultMap\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-c3f3z86",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-c3f3z86",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "select"
				}
			]
		},
		{
			"ID": "20211219090142-irhgfg3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-irhgfg3",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "user_id as \"id\","
				}
			]
		},
		{
			"ID": "20211219090142-g7s2qjd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-g7s2qjd",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "user_name as \"userName\","
				}
			]
		},
		{
			"ID": "20211219090142-gh8czub",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-gh8czub",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "hashed_password"
				}
			]
		},
		{
			"ID": "20211219090142-b6x9abc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-b6x9abc",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "from some_table"
				}
			]
		},
		{
			"ID": "20211219090142-itgylt5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-itgylt5",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "where id = #{id}"
				}
			]
		},
		{
			"ID": "20211219090142-zu6gey5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-zu6gey5",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/select\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-vr1typn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-vr1typn",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresultMap id=\"userResultMap\" type=\"User\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-oyaefsw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-oyaefsw",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"password\" column=\"hashed_password\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-5s99nnw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-5s99nnw",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/resultMap\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-e0eh8ev",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-e0eh8ev",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "有三种自动映射等级："
				}
			]
		},
		{
			"ID": "20211219090142-45pcwfm",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20211219090142-45pcwfm",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"ID": "20211219090142-9efrjew",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-9efrjew"
					},
					"Children": [
						{
							"ID": "20211219090142-f00x1si",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-f00x1si"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "NONE - 禁用自动映射。仅对手动映射的属性进行映射。"
								}
							]
						}
					]
				},
				{
					"ID": "20211219090142-12dag4s",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-12dag4s"
					},
					"Children": [
						{
							"ID": "20211219090142-ms5922f",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-ms5922f"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "PARTIAL - 对除在内部定义了嵌套结果映射（也就是连接的属性）以外的属性进行映射"
								}
							]
						}
					]
				},
				{
					"ID": "20211219090142-xsio3ax",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-xsio3ax"
					},
					"Children": [
						{
							"ID": "20211219090142-ujwsnjc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-ujwsnjc"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "FULL - 自动映射所有属性。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219090142-yqfdnq4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-yqfdnq4",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "默认值是 PARTIAL，这是有原因的。当对连接查询的结果使用 FULL 时，连接查询会在同一行中获取多个不同实体的数据，因此可能导致非预期的映射。 下面的例子将展示这种风险："
				}
			]
		},
		{
			"ID": "20211219090142-e47rizp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-e47rizp",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cselect id=\"selectBlog\" resultMap=\"blogResult\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-2nocawj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-2nocawj",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "select"
				}
			]
		},
		{
			"ID": "20211219090142-fn2n8m4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-fn2n8m4",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "B.id,"
				}
			]
		},
		{
			"ID": "20211219090142-6850fp9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-6850fp9",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "B.title,"
				}
			]
		},
		{
			"ID": "20211219090142-3aoybiz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-3aoybiz",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "A.username,"
				}
			]
		},
		{
			"ID": "20211219090142-z9z7k2u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-z9z7k2u",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "from Blog B left outer join Author A on B.author_id = A.id"
				}
			]
		},
		{
			"ID": "20211219090142-8q9a9ek",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-8q9a9ek",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "where B.id = #{id}"
				}
			]
		},
		{
			"ID": "20211219090142-vyx0aeh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-vyx0aeh",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/select\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-xhqkfc3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-xhqkfc3",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresultMap id=\"blogResult\" type=\"Blog\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-63ebp66",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-63ebp66",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cassociation property=\"author\" resultMap=\"authorResult\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-1iikmq2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-1iikmq2",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/resultMap\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-ag07nsu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-ag07nsu",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresultMap id=\"authorResult\" type=\"Author\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-ynq99or",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-ynq99or",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"username\" column=\"author_username\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-zktexon",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-zktexon",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/resultMap\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-te7sox0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-te7sox0",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在该结果映射中，Blog 和 Author 均将被自动映射。但是注意 Author 有一个 id 属性，在 ResultSet 中也有一个名为 id 的列，所以 Author 的 id 将填入 Blog 的 id，这可不是你期望的行为。 所以，要谨慎使用 FULL。"
				}
			]
		},
		{
			"ID": "20211219090142-afrebjo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-afrebjo",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "无论设置的自动映射等级是哪种，你都可以通过在结果映射上设置 autoMapping 属性来为指定的结果映射设置启用/禁用自动映射。"
				}
			]
		},
		{
			"ID": "20211219090142-q51oxkt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-q51oxkt",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresultMap id=\"userResultMap\" type=\"User\" autoMapping=\"false\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-eg8oo97",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-eg8oo97",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cresult property=\"password\" column=\"hashed_password\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-jlq2biq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-jlq2biq",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003c/resultMap\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-8vu9w2l",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20211219090142-8vu9w2l",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "缓存"
				}
			]
		},
		{
			"ID": "20211219090142-wml885k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-wml885k",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "MyBatis 内置了一个强大的事务性查询缓存机制，它可以非常方便地配置和定制。 为了使它更加强大而且易于配置，我们对 MyBatis 3 中的缓存实现进行了许多改进。"
				}
			]
		},
		{
			"ID": "20211219090142-0gmj00j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-0gmj00j",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "默认情况下，只启用了本地的会话缓存，它仅仅对一个会话中的数据进行缓存。 要启用全局的二级缓存，只需要在你的 SQL 映射文件中添加一行："
				}
			]
		},
		{
			"ID": "20211219090142-sxt8ocs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-sxt8ocs",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003ccache/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-67wfv2z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-67wfv2z",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基本上就是这样。这个简单语句的效果如下:"
				}
			]
		},
		{
			"ID": "20211219090142-v5p9ipl",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20211219090142-v5p9ipl",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"ID": "20211219090142-cht8g4x",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-cht8g4x"
					},
					"Children": [
						{
							"ID": "20211219090142-y92ljme",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-y92ljme"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "映射语句文件中的所有 select 语句的结果将会被缓存。"
								}
							]
						}
					]
				},
				{
					"ID": "20211219090142-2p082qh",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-2p082qh"
					},
					"Children": [
						{
							"ID": "20211219090142-4ttgjv9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-4ttgjv9"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "映射语句文件中的所有 insert、update 和 delete 语句会刷新缓存。"
								}
							]
						}
					]
				},
				{
					"ID": "20211219090142-d3oqypq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-d3oqypq"
					},
					"Children": [
						{
							"ID": "20211219090142-vj16omx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-vj16omx"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "缓存会使用最近最少使用算法（LRU, Least Recently Used）算法来清除不需要的缓存。"
								}
							]
						}
					]
				},
				{
					"ID": "20211219090142-kakqqsb",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-kakqqsb"
					},
					"Children": [
						{
							"ID": "20211219090142-l8zmf4z",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-l8zmf4z"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "缓存不会定时进行刷新（也就是说，没有刷新间隔）。"
								}
							]
						}
					]
				},
				{
					"ID": "20211219090142-mlnk7ln",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-mlnk7ln"
					},
					"Children": [
						{
							"ID": "20211219090142-c21dkhm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-c21dkhm"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "缓存会保存列表或对象（无论查询方法返回哪种）的 1024 个引用。"
								}
							]
						}
					]
				},
				{
					"ID": "20211219090142-q5mpt8p",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-q5mpt8p"
					},
					"Children": [
						{
							"ID": "20211219090142-ezo161v",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-ezo161v"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "缓存会被视为读/写缓存，这意味着获取到的对象并不是共享的，可以安全地被调用者修改，而不干扰其他调用者或线程所做的潜在修改。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219090142-qqrfim6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-qqrfim6",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "提示 缓存只作用于 cache 标签所在的映射文件中的语句。如果你混合使用 Java API 和 XML 映射文件，在共用接口中的语句将不会被默认缓存。你需要使用 @CacheNamespaceRef 注解指定缓存作用域。"
				}
			]
		},
		{
			"ID": "20211219090142-i7glb2m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-i7glb2m",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这些属性可以通过 cache 元素的属性来修改。比如："
				}
			]
		},
		{
			"ID": "20211219090142-5pzlueh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-5pzlueh",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003ccache"
				}
			]
		},
		{
			"ID": "20211219090142-ntycpiu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-ntycpiu",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "eviction=\"FIFO\""
				}
			]
		},
		{
			"ID": "20211219090142-5bis36y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-5bis36y",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "flushInterval=\"60000\""
				}
			]
		},
		{
			"ID": "20211219090142-v8bwozs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-v8bwozs",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "size=\"512\""
				}
			]
		},
		{
			"ID": "20211219090142-juy26ii",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-juy26ii",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "readOnly=\"true\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-mq7adz6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-mq7adz6",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。"
				}
			]
		},
		{
			"ID": "20211219090142-7pg39uw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-7pg39uw",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可用的清除策略有："
				}
			]
		},
		{
			"ID": "20211219090142-cv364he",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20211219090142-cv364he",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"ID": "20211219090142-b5i3z1w",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-b5i3z1w"
					},
					"Children": [
						{
							"ID": "20211219090142-x003zll",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-x003zll"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "LRU – 最近最少使用：移除最长时间不被使用的对象。"
								}
							]
						}
					]
				},
				{
					"ID": "20211219090142-494qqor",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-494qqor"
					},
					"Children": [
						{
							"ID": "20211219090142-sifyiwg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-sifyiwg"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "FIFO – 先进先出：按对象进入缓存的顺序来移除它们。"
								}
							]
						}
					]
				},
				{
					"ID": "20211219090142-dfqv2rc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-dfqv2rc"
					},
					"Children": [
						{
							"ID": "20211219090142-wenrsea",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-wenrsea"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "SOFT – 软引用：基于垃圾回收器状态和软引用规则移除对象。"
								}
							]
						}
					]
				},
				{
					"ID": "20211219090142-sb6je1h",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20211219090142-sb6je1h"
					},
					"Children": [
						{
							"ID": "20211219090142-rq5lzpv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20211219090142-rq5lzpv"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "WEAK – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20211219090142-bnd9417",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-bnd9417",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "默认的清除策略是 LRU。"
				}
			]
		},
		{
			"ID": "20211219090142-azdwufh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-azdwufh",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "flushInterval（刷新间隔）属性可以被设置为任意的正整数，设置的值应该是一个以毫秒为单位的合理时间量。 默认情况是不设置，也就是没有刷新间隔，缓存仅仅会在调用语句时刷新。"
				}
			]
		},
		{
			"ID": "20211219090142-psh9qz7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-psh9qz7",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "size（引用数目）属性可以被设置为任意正整数，要注意欲缓存对象的大小和运行环境中可用的内存资源。默认值是 1024。"
				}
			]
		},
		{
			"ID": "20211219090142-50c1j01",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-50c1j01",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "readOnly（只读）属性可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓存对象的相同实例。 因此这些对象不能被修改。这就提供了可观的性能提升。而可读写的缓存会（通过序列化）返回缓存对象的拷贝。 速度上会慢一些，但是更安全，因此默认值是 false。"
				}
			]
		},
		{
			"ID": "20211219090142-65ave8m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-65ave8m",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "提示 二级缓存是事务性的。这意味着，当 SqlSession 完成并提交时，或是完成并回滚，但没有执行 flushCache=true 的 insert/delete/update 语句时，缓存会获得更新。"
				}
			]
		},
		{
			"ID": "20211219090142-8r57huv",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20211219090142-8r57huv",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用自定义缓存"
				}
			]
		},
		{
			"ID": "20211219090142-jo111r8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-jo111r8",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "除了上述自定义缓存的方式，你也可以通过实现你自己的缓存，或为其他第三方缓存方案创建适配器，来完全覆盖缓存行为。"
				}
			]
		},
		{
			"ID": "20211219090142-q8t9360",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-q8t9360",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003ccache type=\"com.domain.something.MyCustomCache\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-2kb3g28",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-2kb3g28",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个示例展示了如何使用一个自定义的缓存实现。type 属性指定的类必须实现 org.apache.ibatis.cache.Cache 接口，且提供一个接受 String 参数作为 id 的构造器。 这个接口是 MyBatis 框架中许多复杂的接口之一，但是行为却非常简单。"
				}
			]
		},
		{
			"ID": "20211219090142-sc9ftt3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-sc9ftt3",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public interface Cache {"
				}
			]
		},
		{
			"ID": "20211219090142-wc0zcy9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-wc0zcy9",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "String getId();"
				}
			]
		},
		{
			"ID": "20211219090142-2dpqpas",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-2dpqpas",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "int getSize();"
				}
			]
		},
		{
			"ID": "20211219090142-mp4i181",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-mp4i181",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "void putObject(Object key, Object value);"
				}
			]
		},
		{
			"ID": "20211219090142-kel4aa8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-kel4aa8",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Object getObject(Object key);"
				}
			]
		},
		{
			"ID": "20211219090142-afzsnnb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-afzsnnb",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "boolean hasKey(Object key);"
				}
			]
		},
		{
			"ID": "20211219090142-r73shof",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-r73shof",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Object removeObject(Object key);"
				}
			]
		},
		{
			"ID": "20211219090142-jzd0o6z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-jzd0o6z",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "void clear();}"
				}
			]
		},
		{
			"ID": "20211219090142-bepq0cm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-bepq0cm",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为了对你的缓存进行配置，只需要简单地在你的缓存实现中添加公有的 JavaBean 属性，然后通过 cache 元素传递属性值，例如，下面的例子将在你的缓存实现上调用一个名为 setCacheFile(String file) 的方法："
				}
			]
		},
		{
			"ID": "20211219090142-kix988d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-kix988d",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003ccache type=\"com.domain.something.MyCustomCache\"\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-la6vouy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-la6vouy",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cproperty name=\"cacheFile\" value=\"/tmp/my-custom-cache.tmp\"/\u003e\u003c/cache\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-bxcit48",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-bxcit48",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "你可以使用所有简单类型作为 JavaBean 属性的类型，MyBatis 会进行转换。 你也可以使用占位符（如 ${cache.file}），以便替换成在"
				},
				{
					"Type": "NodeLink",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "配置文件属性"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://mybatis.org/mybatis-3/zh/configuration.html#properties"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "中定义的值。"
				}
			]
		},
		{
			"ID": "20211219090142-5c9ifua",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-5c9ifua",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从版本 3.4.2 开始，MyBatis 已经支持在所有属性设置完毕之后，调用一个初始化方法。 如果想要使用这个特性，请在你的自定义缓存类里实现 org.apache.ibatis.builder.InitializingObject 接口。"
				}
			]
		},
		{
			"ID": "20211219090142-xqdxpn2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-xqdxpn2",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public interface InitializingObject {"
				}
			]
		},
		{
			"ID": "20211219090142-8kt6a7e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-8kt6a7e",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "void initialize() throws Exception;}"
				}
			]
		},
		{
			"ID": "20211219090142-ijw59ji",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-ijw59ji",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "提示 上一节中对缓存的配置（如清除策略、可读或可读写等），不能应用于自定义缓存。"
				}
			]
		},
		{
			"ID": "20211219090142-eu3njpg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-eu3njpg",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "请注意，缓存的配置和缓存实例会被绑定到 SQL 映射文件的命名空间中。 因此，同一命名空间中的所有语句和缓存将通过命名空间绑定在一起。 每条语句可以自定义与缓存交互的方式，或将它们完全排除于缓存之外，这可以通过在每条语句上使用两个简单属性来达成。 默认情况下，语句会这样来配置："
				}
			]
		},
		{
			"ID": "20211219090142-n1l0nr3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-n1l0nr3",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003cselect ... flushCache=\"false\" useCache=\"true\"/\u003e\u003cinsert ... flushCache=\"true\"/\u003e\u003cupdate ... flushCache=\"true\"/\u003e\u003cdelete ... flushCache=\"true\"/\u003e"
				}
			]
		},
		{
			"ID": "20211219090142-sv47n1v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-sv47n1v",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "鉴于这是默认行为，显然你永远不应该以这样的方式显式配置一条语句。但如果你想改变默认的行为，只需要设置 flushCache 和 useCache 属性。比如，某些情况下你可能希望特定 select 语句的结果排除于缓存之外，或希望一条 select 语句清空缓存。类似地，你可能希望某些 update 语句执行时不要刷新缓存。"
				}
			]
		},
		{
			"ID": "20211219090142-6mv2tph",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20211219090142-6mv2tph",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "cache-ref"
				}
			]
		},
		{
			"ID": "20211219090142-4eos4nv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-4eos4nv",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "回想一下上一节的内容，对某一命名空间的语句，只会使用该命名空间的缓存进行缓存或刷新。 但你可能会想要在多个命名空间中共享相同的缓存配置和实例。要实现这种需求，你可以使用 cache-ref 元素来引用另一个缓存。"
				}
			]
		},
		{
			"ID": "20211219090142-i7byr8b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219090142-i7byr8b",
				"updated": "20211219090142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\u003ccache-ref namespace=\"com.someone.application.data.SomeMapper\"/\u003e"
				}
			]
		}
	]
}