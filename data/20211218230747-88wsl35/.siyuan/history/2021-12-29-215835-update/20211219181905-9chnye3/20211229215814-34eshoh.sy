{
	"ID": "20211229215814-34eshoh",
	"Type": "NodeDocument",
	"Properties": {
		"icon": "1f4c4",
		"id": "20211229215814-34eshoh",
		"title": "int和Integer的区别",
		"updated": "20211229215830"
	},
	"Children": [
		{
			"ID": "20211229215822-t4sgcje",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211229215822-t4sgcje",
				"updated": "20211229215822"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1、Integer是int的包装类，int则是java的一种基本数据类型\n2、Integer变量必须实例化后才能使用，而int变量不需要\n3、Integer实际是对象的引用，当new一个Integer时，实际上是生成一个指针指向此对象；而int则是直接存储数据值\n4、Integer的默认值是null，int的默认值是0"
				}
			]
		},
		{
			"ID": "20211229215822-1wo678v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211229215822-1wo678v",
				"updated": "20211229215822"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "延伸：\n关于Integer和int的比较\n1、由于Integer变量实际上是对一个Integer对象的引用，所以两个通过new生成的Integer变量永远是不相等的（因为new生成的是两个对象，其内存地址不同）。"
				}
			]
		},
		{
			"ID": "20211229215822-nz09ovp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211229215822-nz09ovp",
				"updated": "20211229215822"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Integer i = new Integer(100);\nInteger j = new Integer(100);\nSystem.out.print(i == j); //false\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211229215822-d5bjecf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211229215822-d5bjecf",
				"updated": "20211229215822"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2、Integer变量和int变量比较时，只要两个变量的值是向等的，则结果为true（因为包装类Integer和基本数据类型int比较时，java会自动拆包装为int，然后进行比较，实际上就变为两个int变量的比较）"
				}
			]
		},
		{
			"ID": "20211229215822-2fgyzxo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211229215822-2fgyzxo",
				"updated": "20211229215822"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Integer i = new Integer(100);\nint j = 100；\nSystem.out.print(i == j); //true\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211229215822-3n5kq1x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211229215822-3n5kq1x",
				"updated": "20211229215822"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3、非new生成的Integer变量和new Integer()生成的变量比较时，结果为false。（因为 ①当变量值在-128"
				},
				{
					"Type": "NodeSub",
					"Data": "sub",
					"Children": [
						{
							"Type": "NodeSubOpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "127之间时，非new生成的Integer变量指向的是java常量池中的对象，而new Integer()生成的变量指向堆中新建的对象，两者在内存中的地址不同；②当变量值在-128"
						},
						{
							"Type": "NodeSubCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "127之间时，非new生成Integer变量时，java API中最终会按照new Integer(i)进行处理（参考下面第4条），最终两个Interger的地址同样是不相同的）"
				}
			]
		},
		{
			"ID": "20211229215822-3ieg93x",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211229215822-3ieg93x",
				"updated": "20211229215822"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Integer i = new Integer(100);\nInteger j = 100;\nSystem.out.print(i == j); //false\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211229215822-amzntpw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211229215822-amzntpw",
				"updated": "20211229215822"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4、对于两个非new生成的Integer对象，进行比较时，如果两个变量的值在区间-128到127之间，则比较结果为true，如果两个变量的值不在此区间，则比较结果为false"
				}
			]
		},
		{
			"ID": "20211229215822-3alykww",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211229215822-3alykww",
				"updated": "20211229215822"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Integer i = 100;\nInteger j = 100;\nSystem.out.print(i == j); //true\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211229215822-8s4tgrx",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211229215822-8s4tgrx",
				"updated": "20211229215822"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Integer i = 128;\nInteger j = 128;\nSystem.out.print(i == j); //false\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211229215822-h0aay3m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211229215822-h0aay3m",
				"updated": "20211229215822"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于第4条的原因：\njava在编译Integer i = 100 ;时，会翻译成为Integer i = Integer.valueOf(100)；，而java API中对Integer类型的valueOf的定义如下："
				}
			]
		},
		{
			"ID": "20211229215822-fn4qyou",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211229215822-fn4qyou",
				"updated": "20211229215822"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static Integer valueOf(int i){\n    assert IntegerCache.high \u003e= 127;\n    if (i \u003e= IntegerCache.low \u0026\u0026 i \u003c= IntegerCache.high){\n        return IntegerCache.cache[i + (-IntegerCache.low)];\n    }\n    return new Integer(i);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211229215822-mz831jp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211229215822-mz831jp",
				"updated": "20211229215822"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "java对于-128到127之间的数，会进行缓存，Integer i = 127时，会将127进行缓存，下次再写Integer j = 127时，就会直接从缓存中取，就不会new了"
				}
			]
		}
	]
}