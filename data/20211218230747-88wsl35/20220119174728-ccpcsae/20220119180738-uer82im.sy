{
	"ID": "20220119180738-uer82im",
	"Type": "NodeDocument",
	"Properties": {
		"icon": "1f4dd",
		"id": "20220119180738-uer82im",
		"title": "Nginx_配置文件详解",
		"updated": "20220119181214"
	},
	"Children": [
		{
			"ID": "20220119180826-alp53fy",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220119180826-alp53fy",
				"updated": "20220119180831"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一、 nginx.conf结构"
				}
			]
		},
		{
			"ID": "20220119181200-byl02gg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220119181200-byl02gg",
				"updated": "20220119181214"
			},
			"Children": [
				{
					"Type": "NodeLink",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "权证配置的nginx.conf"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/权证配置的nginx-20220119181201-mfgbe4s.conf"
						},
						{
							"Type": "NodeLinkSpace"
						},
						{
							"Type": "NodeLinkTitle",
							"Data": "权证配置例子"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220119180826-bzxv4op",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220119180826-bzxv4op",
				"updated": "20220119180900"
			},
			"Children": [
				{
					"ID": "20220119180842-co0n38w",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220119180842-co0n38w",
						"updated": "20220119180900"
					},
					"Children": [
						{
							"ID": "20220119180842-4bz9s1v",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220119180842-4bz9s1v"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "全局块：配置影响nginx全局的指令"
								}
							]
						},
						{
							"ID": "20220119180845-vzdshn7",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20220119180845-vzdshn7",
								"updated": "20220119180900"
							},
							"Children": [
								{
									"ID": "20220119180847-pvhqi5g",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20220119180847-pvhqi5g"
									},
									"Children": [
										{
											"ID": "20220119180847-zln223c",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220119180847-zln223c"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "一般有运行nginx服务器的用户组"
												}
											]
										}
									]
								},
								{
									"ID": "20220119180849-zl6h6qs",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20220119180849-zl6h6qs"
									},
									"Children": [
										{
											"ID": "20220119180849-w8lkpjp",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220119180849-w8lkpjp",
												"updated": "20220119180852"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "nginx进程pid存放路径"
												}
											]
										}
									]
								},
								{
									"ID": "20220119180854-zg7n8tr",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20220119180854-zg7n8tr"
									},
									"Children": [
										{
											"ID": "20220119180854-708ppxo",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220119180854-708ppxo",
												"updated": "20220119180854"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "日志存放路径"
												}
											]
										}
									]
								},
								{
									"ID": "20220119180857-p4f6ld1",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20220119180857-p4f6ld1"
									},
									"Children": [
										{
											"ID": "20220119180857-pi066sx",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220119180857-pi066sx",
												"updated": "20220119180857"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "配置文件引入"
												}
											]
										}
									]
								},
								{
									"ID": "20220119180900-ja7dg0p",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20220119180900-ja7dg0p",
										"updated": "20220119180900"
									},
									"Children": [
										{
											"ID": "20220119180900-eu0lagr",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220119180900-eu0lagr",
												"updated": "20220119180900"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "允许生成worker process数"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220119180925-6182iuk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220119180925-6182iuk",
				"updated": "20220119180936"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eWFtbA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "1、#user administrator administrators;  #配置用户或者组，默认为nobody nobody。\n   #user  nobody;\n2、#worker_processes 2;  #允许生成的进程数，默认为1，通常设置成和cpu的数量相等\n    worker_processes  1;\n3、error_log log/error.log debug;  #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为debug|info|notice|warn|error|crit|alert|emerg\n    #error_log  logs/error.log;\n    #error_log  logs/error.log  notice;\n    #error_log  logs/error.log  info;\n4、#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址\n    #pid        logs/nginx.pid;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220119180941-ggljr94",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220119180941-ggljr94",
				"updated": "20220119180946"
			},
			"Children": [
				{
					"ID": "20220119180946-2phcm2e",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220119180946-2phcm2e",
						"updated": "20220119180946"
					},
					"Children": [
						{
							"ID": "20220119180954-vow8601",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220119180954-vow8601"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "events块：配置影响nginx服务器或用户的网络连接"
								}
							]
						},
						{
							"ID": "20220119180954-n4uzjxn",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20220119180954-n4uzjxn"
							},
							"Children": [
								{
									"ID": "20220119180954-zflornx",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20220119180954-zflornx"
									},
									"Children": [
										{
											"ID": "20220119180954-81i0j4u",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220119180954-81i0j4u"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "有每个进程的最大连接数，"
												}
											]
										}
									]
								},
								{
									"ID": "20220119180954-b1p88l9",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20220119180954-b1p88l9"
									},
									"Children": [
										{
											"ID": "20220119180954-y1ubyh0",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220119180954-y1ubyh0"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "选取哪种事件驱动模型处理连接请求。"
												}
											]
										}
									]
								},
								{
									"ID": "20220119180954-c2epkiy",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20220119180954-c2epkiy"
									},
									"Children": [
										{
											"ID": "20220119180954-wr3o94r",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220119180954-wr3o94r"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "是否允许同时接受多个网路连接。"
												}
											]
										}
									]
								},
								{
									"ID": "20220119180954-828lody",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20220119180954-828lody"
									},
									"Children": [
										{
											"ID": "20220119180954-v22dj95",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220119180954-v22dj95"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "开启多个网络连接序列化等。"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220119181008-tyip788",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220119181008-tyip788",
				"updated": "20220119181010"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eWFtbA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "events {\n    #accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on\n    #multi_accept on;  #设置一个进程是否同时接受多个网络连接，默认为off\n    #use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport\n    worker_connections  1024;    #最大连接数，默认为512\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220119181017-02d5jdn",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220119181017-02d5jdn",
				"updated": "20220119181018"
			},
			"Children": [
				{
					"ID": "20220119181018-ga9z54a",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20220119181018-ga9z54a",
						"updated": "20220119181018"
					},
					"Children": [
						{
							"ID": "20220119181018-5dge8tq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220119181018-5dge8tq"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "http块： 可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。"
								}
							]
						},
						{
							"ID": "20220119181018-vwvpyjj",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20220119181018-vwvpyjj"
							},
							"Children": [
								{
									"ID": "20220119181018-skzv3ve",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20220119181018-skzv3ve"
									},
									"Children": [
										{
											"ID": "20220119181018-tneyqg0",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220119181018-tneyqg0"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "文件引入"
												}
											]
										}
									]
								},
								{
									"ID": "20220119181018-ishel1x",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20220119181018-ishel1x"
									},
									"Children": [
										{
											"ID": "20220119181018-houu7mu",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220119181018-houu7mu"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "mime-type定义"
												}
											]
										}
									]
								},
								{
									"ID": "20220119181018-21lq2dy",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20220119181018-21lq2dy"
									},
									"Children": [
										{
											"ID": "20220119181018-yq5t97j",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220119181018-yq5t97j"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "日志自定义"
												}
											]
										}
									]
								},
								{
									"ID": "20220119181018-mrl3v7c",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20220119181018-mrl3v7c"
									},
									"Children": [
										{
											"ID": "20220119181018-biuraym",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220119181018-biuraym"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "是否使用sendfile传输文件"
												}
											]
										}
									]
								},
								{
									"ID": "20220119181018-itqt68q",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20220119181018-itqt68q"
									},
									"Children": [
										{
											"ID": "20220119181018-vghug4p",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220119181018-vghug4p"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "连接超时时间"
												}
											]
										}
									]
								},
								{
									"ID": "20220119181018-xl4uku7",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20220119181018-xl4uku7"
									},
									"Children": [
										{
											"ID": "20220119181018-wsty4ki",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220119181018-wsty4ki"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "单连接请求数"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220119181023-lcpy83k",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220119181023-lcpy83k",
				"updated": "20220119181029"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eWFtbA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "http {\n    include       /etc/nginx/mime.types;#设定mime类型,类型由mime.type文件定义\n    default_type  application/octet-stream;#默认文件类型，默认为text/plain\n    access_log    /var/log/nginx/access.log;#设定日志格式\n    sendfile        on;#sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，#必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.\n    #tcp_nopush     on;\n    keepalive_timeout  65;#连接超时时间#keepalive_timeout  0;\n    tcp_nodelay        on;\n    gzip  on; #开启gzip压缩\n    gzip_disable \"MSIE [1-6]\\.(?!.*SV1)\";\n    client_header_buffer_size    1k;#设定请求缓冲\n    large_client_header_buffers  4 4k;\n    include /etc/nginx/conf.d/*.conf;#包含其它配置文件，如自定义的虚拟主机\n    include /etc/nginx/sites-enabled/*;\n    error_page 404 https://www.baidu.com; #错误页\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220119181040-vusxtk6",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220119181040-vusxtk6",
				"updated": "20220119181042"
			},
			"Children": [
				{
					"ID": "20220119181042-y3evcan",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20220119181042-y3evcan"
					},
					"Children": [
						{
							"ID": "20220119181042-xepmd0e",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220119181042-xepmd0e",
								"updated": "20220119181042"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "server块：配置虚拟主机的相关参数，一个http中可以有多个server"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220119181046-153az8h",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220119181046-153az8h",
				"updated": "20220119181056"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eWFtbA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "server {\n    #侦听80端口\n    listen       80;\n    #定义使用www.xx.com访问\n    server_name  www.xx.com;\n    #设定本虚拟主机的访问日志\n    access_log  logs/www.xx.com.access.log  main;\n    #默认请求\n    location / {\n          root   /root;      #定义服务器的默认网站根目录位置\n          index index.php index.html index.htm;   #定义首页索引文件的名称\n          fastcgi_pass  www.xx.com;\n          fastcgi_param  SCRIPT_FILENAME  $document_root/$fastcgi_script_name;\n          include /etc/nginx/fastcgi_params;\n    }\n    # 定义错误提示页面\n    error_page   500 502 503 504 /50x.html;  \n        location = /50x.html {\n        root   /root;\n    }\n    #静态文件，nginx自己处理\n    location ~ ^/(images|javascript|js|css|flash|media|static)/ {\n        root /var/www/virtual/htdocs;\n        #过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。\n        expires 30d;\n    }\n    #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.\n    location ~ \\.php$ {\n        root /root;\n        fastcgi_pass 127.0.0.1:9000;\n        fastcgi_index index.php;\n        fastcgi_param SCRIPT_FILENAME /home/www/www$fastcgi_script_name;\n        include fastcgi_params;\n    }\n    #设定查看Nginx状态的地址\n    location /NginxStatus {\n        stub_status            on;\n        access_log              on;\n        auth_basic              \"NginxStatus\";\n        auth_basic_user_file  conf/htpasswd;\n    }\n    #禁止访问 .htxxx 文件\n    location ~ /\\.ht {\n        deny all;\n    }\n}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220119181059-w8vkcpc",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220119181059-w8vkcpc",
				"updated": "20220119181107"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二、负载均衡配置信息"
				}
			]
		},
		{
			"ID": "20220119181108-2lqjf8t",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220119181108-2lqjf8t",
				"updated": "20220119181114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eWFtbA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "几个常见配置项：\n1.$remote_addr 与 $http_x_forwarded_for 用以记录客户端的ip地址；\n2.$remote_user ：用来记录客户端用户名称；\n3.$time_local ： 用来记录访问时间与时区；\n4.$request ： 用来记录请求的url与http协议；\n5.$status ： 用来记录请求状态；成功是200；\n6.$body_bytes_s ent ：记录发送给客户端文件主体内容大小；\n7.$http_referer ：用来记录从那个页面链接访问过来的；\n8.$http_user_agent ：记录客户端浏览器的相关信息；\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220119181121-epinhdc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220119181121-epinhdc",
				"updated": "20220119181123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eWFtbA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "server {\n    #侦听192.168.8.x的80端口\n    listen       80;\n    server_name  192.168.8.x;\n    #对aspx后缀的进行负载均衡请求\n    location ~ .*\\.aspx$ {\n      root   /root;      #定义服务器的默认网站根目录位置\n      index index.php index.html index.htm;   #定义首页索引文件的名称\n      proxy_pass  http://mysvr ;#请求转向mysvr 定义的服务器列表\n      #以下是一些反向代理的配置.\n      proxy_redirect off;\n      #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n      proxy_set_header Host $host;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      client_max_body_size 10m;    #允许客户端请求的最大单文件字节数\n      client_body_buffer_size 128k;  #缓冲区代理缓冲用户端请求的最大字节数，\n      proxy_connect_timeout 90;  #nginx跟后端服务器连接超时时间(代理连接超时)\n      proxy_send_timeout 90;        #后端服务器数据回传时间(代理发送超时)\n      proxy_read_timeout 90;         #连接成功后，后端服务器响应时间(代理接收超时)\n      proxy_buffer_size 4k;             #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n      proxy_buffers 4 32k;               #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置\n      proxy_busy_buffers_size 64k;    #高负荷下缓冲大小（proxy_buffers*2）\n      proxy_temp_file_write_size 64k;  #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n   }\n}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220119181129-ss5ntt0",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220119181129-ss5ntt0",
				"updated": "20220119181131"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "三、全部配置信息详解"
				}
			]
		},
		{
			"ID": "20220119181132-o6unz5u",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220119181132-o6unz5u",
				"updated": "20220119181145"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eWFtbA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "######Nginx配置文件nginx.conf中文详解#####\n\n\n#定义Nginx运行的用户和用户组\nuser www www;\n\n\n#nginx进程数，建议设置为等于CPU总核心数。\nworker_processes 8;\n#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]\nerror_log /usr/local/nginx/logs/error.log info;\n\n\n#进程pid文件\npid /usr/local/nginx/logs/nginx.pid;\n\n\n#指定进程可以打开的最大描述符：数目\n#工作模式与连接数上限\n#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。\n#现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。\n#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。\nworker_rlimit_nofile 65535;\n\n\n\n\nevents\n{\n    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型\n    #是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。\n    #补充说明：\n    #与apache相类，nginx针对不同的操作系统，有不同的事件模型\n    #A）标准事件模型\n    #Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll\n    #B）高效事件模型\n    #Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。\n    #Epoll：使用于Linux内核2.6版本及以后的系统。\n    #/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。\n    #Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。\n    use epoll;\n\n\n    #单个进程最大连接数（最大连接数=连接数*进程数）\n    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。\n    worker_connections 65535;\n\n\n    #keepalive超时时间。\n    keepalive_timeout 60;\n\n\n    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。\n    #分页大小可以用命令getconf PAGESIZE 取得。\n    #[root@web001 ~]# getconf PAGESIZE\n    #4096\n    #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。\n    client_header_buffer_size 4k;\n\n\n    #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。\n    open_file_cache max=65535 inactive=60s;\n\n\n    #这个是指多长时间检查一次缓存的有效信息。\n    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.\n    open_file_cache_valid 80s;\n\n\n    #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。\n    #语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.\n    open_file_cache_min_uses 1;\n  \n    #语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件时记录cache错误.\n    open_file_cache_errors on;\n}\n#设定http服务器，利用它的反向代理功能提供负载均衡支持\nhttp\n{\n    #文件扩展名与文件类型映射表\n    include mime.types;\n\n\n    #默认文件类型\n    default_type application/octet-stream;\n\n\n    #默认编码\n    #charset utf-8;\n\n\n    #服务器名字的hash表大小\n    #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.\n    server_names_hash_bucket_size 128;\n\n\n    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。\n    client_header_buffer_size 32k;\n\n\n    #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。\n    large_client_header_buffers 4 64k;\n\n\n    #设定通过nginx上传文件的大小\n    client_max_body_size 8m;\n\n\n    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。\n    #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。\n    sendfile on;\n\n\n    #开启目录列表访问，合适下载服务器，默认关闭。\n    autoindex on;\n\n\n    #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用\n    tcp_nopush on;\n   \n    tcp_nodelay on;\n\n\n    #长连接超时时间，单位是秒\n    keepalive_timeout 120;\n\n\n    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。\n    fastcgi_connect_timeout 300;\n    fastcgi_send_timeout 300;\n    fastcgi_read_timeout 300;\n    fastcgi_buffer_size 64k;\n    fastcgi_buffers 4 64k;\n    fastcgi_busy_buffers_size 128k;\n    fastcgi_temp_file_write_size 128k;\n\n\n    #gzip模块设置\n    gzip on; #开启gzip压缩输出\n    gzip_min_length 1k;    #最小压缩文件大小\n    gzip_buffers 4 16k;    #压缩缓冲区\n    gzip_http_version 1.0;    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）\n    gzip_comp_level 2;    #压缩等级\n    gzip_types text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。\n    gzip_vary on;\n\n\n    #开启限制IP连接数的时候需要使用\n    #limit_zone crawler $binary_remote_addr 10m;\n\n\n\n\n\n\n    #负载均衡配置\n    upstream jh.w3cschool.cn {\n   \n        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。\n        server 192.168.80.121:80 weight=3;\n        server 192.168.80.122:80 weight=2;\n        server 192.168.80.123:80 weight=3;\n\n\n        #nginx的upstream目前支持4种方式的分配\n        #1、轮询（默认）\n        #每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。\n        #2、weight\n        #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。\n        #例如：\n        #upstream bakend {\n        #    server 192.168.0.14 weight=10;\n        #    server 192.168.0.15 weight=10;\n        #}\n        #2、ip_hash\n        #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。\n        #例如：\n        #upstream bakend {\n        #    ip_hash;\n        #    server 192.168.0.14:88;\n        #    server 192.168.0.15:80;\n        #}\n        #3、fair（第三方）\n        #按后端服务器的响应时间来分配请求，响应时间短的优先分配。\n        #upstream backend {\n        #    server server1;\n        #    server server2;\n        #    fair;\n        #}\n        #4、url_hash（第三方）\n        #按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。\n        #例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法\n        #upstream backend {\n        #    server squid1:3128;\n        #    server squid2:3128;\n        #    hash $request_uri;\n        #    hash_method crc32;\n        #}\n\n\n        #tips:\n        #upstream bakend{#定义负载均衡设备的Ip及设备状态}{\n        #    ip_hash;\n        #    server 127.0.0.1:9090 down;\n        #    server 127.0.0.1:8080 weight=2;\n        #    server 127.0.0.1:6060;\n        #    server 127.0.0.1:7070 backup;\n        #}\n        #在需要使用负载均衡的server中增加 proxy_pass http://bakend/;\n\n\n        #每个设备的状态设置为:\n        #1.down表示单前的server暂时不参与负载\n        #2.weight为weight越大，负载的权重就越大。\n        #3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误\n        #4.fail_timeout:max_fails次失败后，暂停的时间。\n        #5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。\n\n\n        #nginx支持同时设置多组的负载均衡，用来给不用的server来使用。\n        #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug\n        #client_body_temp_path设置记录文件的目录 可以设置最多3层目录\n        #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡\n    }\n   \n   \n   \n    #虚拟主机的配置\n    server\n    {\n        #监听端口\n        listen 80;\n\n\n        #域名可以有多个，用空格隔开\n        server_name www.w3cschool.cn w3cschool.cn;\n        index index.html index.htm index.php;\n        root /data/www/w3cschool;\n\n\n        #对******进行负载均衡\n        location ~ .*.(php|php5)?$\n        {\n            fastcgi_pass 127.0.0.1:9000;\n            fastcgi_index index.php;\n            include fastcgi.conf;\n        }\n     \n        #图片缓存时间设置\n        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$\n        {\n            expires 10d;\n        }\n     \n        #JS和CSS缓存时间设置\n        location ~ .*.(js|css)?$\n        {\n            expires 1h;\n        }\n     \n        #日志格式设定\n        #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；\n        #$remote_user：用来记录客户端用户名称；\n        #$time_local： 用来记录访问时间与时区；\n        #$request： 用来记录请求的url与http协议；\n        #$status： 用来记录请求状态；成功是200，\n        #$body_bytes_sent ：记录发送给客户端文件主体内容大小；\n        #$http_referer：用来记录从那个页面链接访问过来的；\n        #$http_user_agent：记录客户浏览器的相关信息；\n        #通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。\n        log_format access '$remote_addr - $remote_user [$time_local] \"$request\" '\n        '$status $body_bytes_sent \"$http_referer\" '\n        '\"$http_user_agent\" $http_x_forwarded_for';\n     \n        #定义本虚拟主机的访问日志\n        access_log  /usr/local/nginx/logs/host.access.log  main;\n        access_log  /usr/local/nginx/logs/host.access.404.log  log404;\n     \n        #对 \"/\" 启用反向代理\n        location / {\n            proxy_pass http://127.0.0.1:88;\n            proxy_redirect off;\n            proxy_set_header X-Real-IP $remote_addr;\n         \n            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n         \n            #以下是一些反向代理的配置，可选。\n            proxy_set_header Host $host;\n\n\n            #允许客户端请求的最大单文件字节数\n            client_max_body_size 10m;\n\n\n            #缓冲区代理缓冲用户端请求的最大字节数，\n            #如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。\n            #无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误\n            client_body_buffer_size 128k;\n\n\n            #表示使nginx阻止HTTP应答代码为400或者更高的应答。\n            proxy_intercept_errors on;\n\n\n            #后端服务器连接的超时时间_发起握手等候响应超时时间\n            #nginx跟后端服务器连接超时时间(代理连接超时)\n            proxy_connect_timeout 90;\n\n\n            #后端服务器数据回传时间(代理发送超时)\n            #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据\n            proxy_send_timeout 90;\n\n\n            #连接成功后，后端服务器响应时间(代理接收超时)\n            #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）\n            proxy_read_timeout 90;\n\n\n            #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n            #设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小\n            proxy_buffer_size 4k;\n\n\n            #proxy_buffers缓冲区，网页平均在32k以下的设置\n            #设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k\n            proxy_buffers 4 32k;\n\n\n            #高负荷下缓冲大小（proxy_buffers*2）\n            proxy_busy_buffers_size 64k;\n\n\n            #设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长\n            #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n            proxy_temp_file_write_size 64k;\n        }\n     \n     \n        #设定查看Nginx状态的地址\n        location /NginxStatus {\n            stub_status on;\n            access_log on;\n            auth_basic \"NginxStatus\";\n            auth_basic_user_file confpasswd;\n            #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。\n        }\n     \n        #本地动静分离反向代理配置\n        #所有jsp的页面均交由tomcat或resin处理\n        location ~ .(jsp|jspx|do)?$ {\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_pass http://127.0.0.1:8080;\n        }\n     \n        #所有静态文件由nginx直接读取不经过tomcat或resin\n        location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|\n        pdf|xls|mp3|wma)$\n        {\n            expires 15d;\n        }\n     \n        location ~ .*.(js|css)?$\n        {\n            expires 1h;\n        }\n    }\n}\n######Nginx配置文件nginx.conf中文详解#####\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}