{
	"ID": "20211219124916-pfq4li9",
	"Type": "NodeDocument",
	"Properties": {
		"icon": "1f4c4",
		"id": "20211219124916-pfq4li9",
		"title": "\u0026lt;sql\u0026gt;、参数、#{}${}区别",
		"updated": "20211219125122"
	},
	"Children": [
		{
			"ID": "20211219125045-68hn6le",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20211219125045-68hn6le",
				"updated": "20211219125114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一、SQL"
				}
			]
		},
		{
			"ID": "20211219125037-02isadp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219125037-02isadp",
				"updated": "20211219125037"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个元素可以用来定义可重用的 SQL 代码片段，以便在其它语句中使用。 参数可以静态地（在加载的时候）确定下来，并且可以在不同的 include 元素中定义不同的参数值。比如："
				}
			]
		},
		{
			"ID": "20211219125037-6ceenr5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219125037-6ceenr5",
				"updated": "20211219110340"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003csql id=\"userColumns\"\u003e\n    ${alias}.id,${alias}.username,${alias}.password\n\u003c/sql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219125037-xloucqt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219125037-xloucqt",
				"updated": "20211219125037"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个 SQL 片段可以在其它语句中使用，例如："
				}
			]
		},
		{
			"ID": "20211219125037-5g4lmzr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219125037-5g4lmzr",
				"updated": "20211219110418"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cselect id=\"selectUsers\" resultType=\"map\"\u003e\n\tselect\n\t\u003cinclude refid=\"userColumns\"\u003e\n\t\t\u003cproperty name=\"alias\" value=\"t1\"/\u003e\n\t\u003c/include\u003e,\n\t\u003cinclude refid=\"userColumns\"\u003e\n\t\t\u003cproperty name=\"alias\" value=\"t2\"/\u003e\n\t\u003c/include\u003e\n\tfrom some_table t1\n\tcross join some_table t2\n\u003c/select\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219125051-xduoz8p",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20211219125051-xduoz8p",
				"updated": "20211219125118"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二、参数"
				}
			]
		},
		{
			"ID": "20211219125037-qgatlsh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219125037-qgatlsh",
				"updated": "20211219125037"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "之前见到的所有语句都使用了简单的参数形式。但实际上，参数是 MyBatis 非常强大的元素。对于大多数简单的使用场景，你都不需要使用复杂的参数，比如："
				}
			]
		},
		{
			"ID": "20211219125037-mn7jcdg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219125037-mn7jcdg",
				"updated": "20211219110535"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cselect id=\"selectUsers\" resultType=\"User\"\u003e\n\tselect id, username, password\n\tfrom users\n\twhere id = #{id}\n\u003c/select\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219125037-ys7fkob",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219125037-ys7fkob",
				"updated": "20211219125037"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上面的这个示例说明了一个非常简单的命名参数映射。鉴于参数类型（parameterType）会被自动设置为 int，这个参数可以随意命名。原始类型或简单数据类型（比如 Integer 和 String）因为没有其它属性，会用它们的值来作为参数。 然而，如果传入一个复杂的对象，行为就会有点不一样了。比如："
				}
			]
		},
		{
			"ID": "20211219125037-5oja42y",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219125037-5oja42y",
				"updated": "20211219110705"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cinsert id=\"insertUser\" parameterType=\"User\"\u003e\n\tinsert into users (id, username, password)\n\tvalues (#{id}, #{username}, #{password})\n\u003c/insert\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219125037-c2bz0sg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219125037-c2bz0sg",
				"updated": "20211219125037"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果 User 类型的参数对象传递到了语句中，会查找 id、username 和 password 属性，然后将它们的值传入预处理语句的参数中。"
				}
			]
		},
		{
			"ID": "20211219125037-xd0tuwd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219125037-xd0tuwd",
				"updated": "20211219125037"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对传递语句参数来说，这种方式真是干脆利落。不过参数映射的功能远不止于此。"
				}
			]
		},
		{
			"ID": "20211219125037-5i0vfxa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219125037-5i0vfxa",
				"updated": "20211219125037"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "首先，和 MyBatis 的其它部分一样，参数也可以指定一个特殊的数据类型。"
				}
			]
		},
		{
			"ID": "20211219125037-lgyj34a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219125037-lgyj34a",
				"updated": "20211219110648"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "#{property,javaType=int,jdbcType=NUMERIC}"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20211219125037-o1idoyl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219125037-o1idoyl",
				"updated": "20211219123523"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "和 MyBatis 的其它部分一样，"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "几乎总是可以根据参数对象的类型确定 javaType，除非该对象是一个 HashMap。这个时候，你需要显式指定 javaType 来确保正确的类型处理器（TypeHandler）被使用。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20211219125037-f6kcoiq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219125037-f6kcoiq",
				"updated": "20211219110826"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "提示 JDBC 要求，如果一个列允许使用 null 值，并且会使用值为 null 的参数，就必须要指定 JDBC 类型（jdbcType）。"
				}
			]
		},
		{
			"ID": "20211219125037-j81tbwh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219125037-j81tbwh",
				"updated": "20211219125037"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "要更进一步地自定义类型处理方式，可以指定一个特殊的类型处理器类（或别名），比如："
				}
			]
		},
		{
			"ID": "20211219125037-wxs54v3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219125037-wxs54v3",
				"updated": "20211219110820"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "#{age,javaType=int,jdbcType=NUMERIC,typeHandler=MyTypeHandler}"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20211219125037-0tbup98",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219125037-0tbup98",
				"updated": "20211219125037"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "参数的配置好像越来越繁琐了，但实际上，很少需要如此繁琐的配置。"
				}
			]
		},
		{
			"ID": "20211219125037-ejt9szh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219125037-ejt9szh",
				"updated": "20211219125037"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于数值类型，还可以设置 numericScale 指定小数点后保留的位数。"
				}
			]
		},
		{
			"ID": "20211219125037-c83ea4p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219125037-c83ea4p",
				"updated": "20211219110817"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "#{height,javaType=double,jdbcType=NUMERIC,numericScale=2}"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20211219125102-o7edmef",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20211219125102-o7edmef",
				"updated": "20211219125122"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "三、字符串替换"
				}
			]
		},
		{
			"ID": "20211219125037-po1bjzc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219125037-po1bjzc",
				"updated": "20211219123724"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "默认情况下，使用 #{} 参数语法时，MyBatis 会创建 PreparedStatement 参数占位符，并通过"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "占位符"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "安全地设置参数（就像使用 ? 一样）。 这样做更安全，更迅速，通常也是首选做法，不过有时你就是想直接在 SQL 语句中"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "直接插入一个不转义的字符串。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 比如 ORDER BY 子句，这时候你可以："
				}
			]
		},
		{
			"ID": "20211219125037-g8yodjl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219125037-g8yodjl",
				"updated": "20211219123556"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "ORDER BY ${columnName}"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20211219125037-2oinhfp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219125037-2oinhfp",
				"updated": "20211219125037"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这样，MyBatis 就不会修改或转义该字符串了。"
				}
			]
		},
		{
			"ID": "20211219125037-sk3qjdt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219125037-sk3qjdt",
				"updated": "20211219125037"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当 SQL 语句中的元数据（如表名或列名）是动态生成的时候，字符串替换将会非常有用。 举个例子，如果你想 select 一个表任意一列的数据时，不需要这样写："
				}
			]
		},
		{
			"ID": "20211219125037-ebtbhl6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219125037-ebtbhl6",
				"updated": "20211219123831"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Select(\"select * from user where id = #{id}\") \nUser findById(@Param(\"id\") long id);\n\n@Select(\"select * from user where name = #{name}\")\nUser findByName(@Param(\"name\") String name);\n\n@Select(\"select * from user where email = #{email}\")\nUser findByEmail(@Param(\"email\") String email);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219125037-fjn0zb5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219125037-fjn0zb5",
				"updated": "20211219123944"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其它的 \"findByXxx\" 方法，而是可以只写这样一个方法："
				}
			]
		},
		{
			"ID": "20211219125037-8lh3ccz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219125037-8lh3ccz",
				"updated": "20211219123919"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Select(\"select * from user where ${column} = #{value}\")\nUser  **findByColumn** (@Param(\"column\") String column, @Param(\"value\") String value);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219125037-w91z262",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219125037-w91z262",
				"updated": "20211219123904"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其中 "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "${column} 会被直接替换"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，而 "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "#{value} 会使用 ? 预处理"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。 这样，就能完成同样的任务："
				}
			]
		},
		{
			"ID": "20211219125037-67ijzam",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20211219125037-67ijzam",
				"updated": "20211219124047"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "User userOfId1 = userMapper.findByColumn(\"id\", 1L);\nUser userOfNameKid = userMapper.findByColumn(\"name\", \"kid\");\nUser userOfEmail = userMapper.findByColumn(\"email\", \"noone@nowhere.com\");\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20211219125037-w80vkk5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219125037-w80vkk5",
				"updated": "20211219125037"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这种方式也同样适用于替换表名的情况。"
				}
			]
		},
		{
			"ID": "20211219125037-dx27n3h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20211219125037-dx27n3h",
				"updated": "20211219124101"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "提示 用这种方式接受用户的输入，并用作语句参数是不安全的，会导致潜在的 "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "SQL 注入攻击"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。因此，要么不允许用户输入这些字段，要么自行转义并检验这些参数。"
				}
			]
		}
	]
}