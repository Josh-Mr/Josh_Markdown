{
	"ID": "20220120223611-3x5fa7t",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20220120223611-3x5fa7t",
		"title": "Ajax_详解",
		"updated": "20220120230105"
	},
	"Children": [
		{
			"ID": "20220120223611-w1q0ufz",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220120223611-w1q0ufz",
				"updated": "20220120230008"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一、Ajax例子"
				}
			]
		},
		{
			"ID": "20220120230008-51d5sqa",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220120230008-51d5sqa",
				"updated": "20220120230015"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "anM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "function getAjaxDemo(){\n                  jQuery.ajax({\n                       url:  \"http://localhost:7000/getAjaxDemo\",\n                     type: \"GET\",\n                     async: true,//请求是否异步，默认为异步，这也是ajax重要特性\n                     timeout: 60000,\n                     contentType: \"application/json\",\n                     data:{\n                         data:'123'\n                     },\n                     /*校验是否跨域，false，true*/\n                     xhrFields: {\n                         withCredentials: false\n                     },\n                     /*请求前的处理*/\n                     beforeSend: function(request) {\n                           console.log(\"request\"+request);   \n                           console.log(\"this\"+JSON.stringify(this));\n                           console.log(this);\n                           console.log(request);\n                           request.setRequestHeader(\"Content-type\",\"application/json\");\n                           request.setRequestHeader(\"token\",\"token\");\n                       },\n                       /*请求成功处理 */\n                     success: function  (data,textStatus,xhr){\n                          console.log(JSON.stringify(data),textStatus,xhr);\n                          console.log(textStatus);\n                          console.log(xhr);\n                          console.log(this.url);\n                     },\n                     /*请求出错处理 */\n                     error: function  (error,textStatus,xhr){\n                          console.log(error,textStatus,xhr);\n                     },\n                     /*请求完成处理 */\n                     complete: function(){\n                         console.log(\"complete\");\n                     }\n            \n                });\n              }\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220120230050-9thd4ch",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220120230050-9thd4ch",
				"updated": "20220120230105"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "anM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "格式说明： 参数名；\n　　参数类型；\n　　参数说明，默认值，可选值；\nurl\n　　String　　(默认: 当前页地址) 发送请求的地址。\n\ntype\n　　String　　(默认: \"GET\") 请求方式 (\"POST\" 或 \"GET\")， 默认为 \"GET\"。\n　　注意：其它 HTTP 请求方法，如 PUT 和 DELETE 也可以使用，但仅部分浏览器支持。\n\ntimeout\n　　Number\n　　设置请求超时时间（毫秒）。此设置将覆盖全局设置。\n\nasync　　Boolean　　(默认: true) 默认设置下，所有请求均为异步请求。如果需要发送同步请求，将此选项设置为 false。注意，同步请求将锁住浏览器，用户其它操作必须等待请求完成才可以执行。\n\nbeforeSend\n　　Function\n　　发送请求前可修改 XMLHttpRequest 对象的函数，如添加自定义 HTTP 头。XMLHttpRequest 对象是唯一的参数。\n　　function (XMLHttpRequest) { this; }\n\ncache\n　　Boolean　　(默认: true) jQuery 1.2 新功能，设置为 false 将不会从浏览器缓存中加载请求信息。\n\ncomplete\n　　Function\n　　请求完成后回调函数 (请求成功或失败时均调用)。参数： XMLHttpRequest 对象，成功信息字符串。\n　　function (XMLHttpRequest, textStatus) { }\n\ncontentType\n　　String　　(默认: \"application/x-www-form-urlencoded\") 发送信息至服务器时内容编码类型。默认值适合大多数应用场合。\n\ndata\n　　Object,String\n　　发送到服务器的数据。将自动转换为请求字符串格式。GET 请求中将附加在 URL 后。\n　　查看 processData 选项说明以禁止此自动转换。必须为 Key/Value 格式。\n　　如果为数组，jQuery 将自动为不同值对应同一个名称。\n　　如 {foo:[\"bar1\", \"bar2\"]} 转换为 '\u0026foo=bar1\u0026foo=bar2'。\n\ndataType\n　　String\n　　预期服务器返回的数据类型。如果不指定，jQuery 将自动根据 HTTP 包 MIME 信息返回 responseXML 或 responseText，并作为回调函数参数传递，可用值:\n　　\"xml\": 返回 XML 文档，可用 jQuery 处理。\n　　\"html\": 返回纯文本 HTML 信息；包含 script 元素。\n　　\"script\": 返回纯文本 JavaScript 代码。不会自动缓存结果。\n　　\"json\": 返回 JSON 数据 。\n　　\"jsonp\": JSONP 格式。使用 JSONP 形式调用函数时，\n　　如 \"myurl?callback=?\" jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。\n\nerror\n　　Function　　(默认: 自动判断 (xml 或 html)) 请求失败时将调用此方法。\n　　这个方法有三个参数：XMLHttpRequest 对象，错误信息，（可能）捕获的错误对象。\n　　function (XMLHttpRequest, textStatus, errorThrown) { // 通常情况下textStatus和errorThown只有其中一个有值 this; }\n\nglobal\n　　Boolean　　(默认: true) 是否触发全局 AJAX 事件。\n　　设置为 false 将不会触发全局 AJAX 事件，如 ajaxStart 或 ajaxStop 。\n　　可用于控制不同的Ajax事件\n\nifModified\n　　Boolean　　(默认: false) 仅在服务器数据改变时获取新数据。使用 HTTP 包 Last-Modified 头信息判断。\n\nprocessData\n　　Boolean　　(默认: true) 默认情况下，发送的数据将被转换为对象(技术上讲并非字符串) 以配合默认内容类型 \"application/x-www-form-urlencoded\"。\n　　如果要发送 DOM 树信息或其它不希望转换的信息，请设置为 false。\n\nsuccess\n　　Function\n　　请求成功后回调函数。这个方法有两个参数：服务器返回数据，返回状态function (data, textStatus) { // data could be xmlDoc, jsonObj, html, text, etc... }\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}